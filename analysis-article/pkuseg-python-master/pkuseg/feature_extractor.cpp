/* Generated by Cython 0.29.32 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "include_dirs": [
            "E:\\anaconda\\envs\\analysis\\lib\\site-packages\\numpy\\core\\include"
        ],
        "language": "c++",
        "name": "pkuseg.feature_extractor",
        "sources": [
            "pkuseg/feature_extractor.pyx"
        ]
    },
    "module_name": "pkuseg.feature_extractor"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_32"
#define CYTHON_HEX_VERSION 0x001D20F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pkuseg__feature_extractor
#define __PYX_HAVE_API__pkuseg__feature_extractor
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pkuseg\\feature_extractor.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text;
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build;
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr;
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr;
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr;
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load;
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr;

/* "pkuseg/feature_extractor.pyx":208
 * 
 *     @classmethod
 *     def normalize_text(cls, text):             # <<<<<<<<<<<<<<
 *         text = cls.keyword_rename(text)
 *         for character in text:
 */
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text {
  PyObject_HEAD
  PyObject *__pyx_v_character;
  PyObject *__pyx_v_cls;
  PyObject *__pyx_v_text;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pkuseg/feature_extractor.pyx":224
 *         self.tag_to_idx = {}  # type: Dict[str, int]
 * 
 *     def build(self, train_file):             # <<<<<<<<<<<<<<
 *         with open(train_file, "r", encoding="utf8") as reader:
 *             lines = reader.readlines()
 */
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build {
  PyObject_HEAD
  PyObject *__pyx_v_feature_freq;
  PyObject *__pyx_v_node_features;
  PyObject *__pyx_v_words;
};


/* "pkuseg/feature_extractor.pyx":245
 * 
 *             word_length_info.update(map(len, words))
 *             specials.update(word for word in words if len(word)>=10)             # <<<<<<<<<<<<<<
 *             self.unigram.update(words)
 * 
 */
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *__pyx_outer_scope;
  PyObject *__pyx_v_word;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "pkuseg/feature_extractor.pyx":270
 *                 node_features = self.get_node_features(i, example)
 *                 feature_freq.update(
 *                     feature for feature in node_features if feature != "/"             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *__pyx_outer_scope;
  PyObject *__pyx_v_feature;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pkuseg/feature_extractor.pyx":274
 * 
 *         feature_set = (
 *             feature             # <<<<<<<<<<<<<<
 *             for feature, freq in feature_freq.most_common()
 *             if freq > config.featureTrim
 */
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *__pyx_outer_scope;
  PyObject *__pyx_v_feature;
  PyObject *__pyx_v_freq;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pkuseg/feature_extractor.pyx":587
 * 
 *     @classmethod
 *     def load(cls, model_dir=None):             # <<<<<<<<<<<<<<
 *         if model_dir is None:
 *             model_dir = config.modelDir
 */
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load {
  PyObject_HEAD
  PyObject *__pyx_v_reader;
};


/* "pkuseg/feature_extractor.pyx":637
 *             encoding="utf8",
 *         ) as reader:
 *             extractor.bigram = set(line.strip() for line in reader)             # <<<<<<<<<<<<<<
 * 
 *         extractor.feature_to_idx = {}
 */
struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *__pyx_outer_scope;
  PyObject *__pyx_v_line;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cython' */

/* Module declarations from 'pkuseg.feature_extractor' */
static PyTypeObject *__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text = 0;
static PyTypeObject *__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_1_build = 0;
static PyTypeObject *__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr = 0;
static PyTypeObject *__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr = 0;
static PyTypeObject *__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_5_load = 0;
static PyTypeObject *__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr = 0;
static PyObject *__pyx_f_6pkuseg_17feature_extractor_get_slice_str(PyObject *, int, int, int, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "pkuseg.feature_extractor"
extern int __pyx_module_is_main_pkuseg__feature_extractor;
int __pyx_module_is_main_pkuseg__feature_extractor = 0;

/* Implementation of 'pkuseg.feature_extractor' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_enumerate;
static const char __pyx_k_[] = "";
static const char __pyx_k_0[] = "0\n";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_c[] = "c.";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_w[] = "w";
static const char __pyx_k__2[] = ".";
static const char __pyx_k__3[] = "*";
static const char __pyx_k__5[] = "/";
static const char __pyx_k__7[] = "\n\r";
static const char __pyx_k__8[] = "{}*{}";
static const char __pyx_k__9[] = "$$";
static const char __pyx_k_c1[] = "c1.";
static const char __pyx_k_c2[] = "c2.";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_rb[] = "rb";
static const char __pyx_k_w1[] = "w1.";
static const char __pyx_k_wb[] = "wb";
static const char __pyx_k_Num[] = "**Num";
static const char __pyx_k__10[] = "{}\n\n";
static const char __pyx_k__11[] = ",";
static const char __pyx_k__12[] = "\n";
static const char __pyx_k__13[] = "\n\n";
static const char __pyx_k__14[] = " ";
static const char __pyx_k__16[] = "{} {}\n";
static const char __pyx_k__19[] = "{}_{}";
static const char __pyx_k__24[] = "-._,|/*:";
static const char __pyx_k__25[] = "\357\274\241\357\274\242\357\274\243\357\274\244\357\274\245\357\274\246\357\274\247\357\274\250\357\274\251\357\274\252\357\274\253\357\274\254\357\274\255\357\274\256\357\274\257\357\274\260\357\274\261\357\274\262\357\274\263\357\274\264\357\274\265\357\274\266\357\274\267\357\274\270\357\274\271\357\274\272\357\275\201\357\275\202\357\275\203\357\275\204\357\275\205\357\275\206\357\275\207\357\275\210\357\275\211\357\275\207\357\275\213\357\275\214\357\275\215\357\275\216\357\275\217\357\275\220\357\275\221\357\275\222\357\275\223\357\275\224\357\275\225\357\275\226\357\275\227\357\275\230\357\275\231\357\275\232\357\274\217\343\203\273\357\274\215";
static const char __pyx_k__26[] = "&&&&&&&&";
static const char __pyx_k__35[] = "_";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_c_1[] = "c-1.";
static const char __pyx_k_c_2[] = "c-2.";
static const char __pyx_k_c_3[] = "c";
static const char __pyx_k_cc1[] = "cc1.";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_len[] = "len";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_num[] = "num";
static const char __pyx_k_pre[] = "pre";
static const char __pyx_k_suf[] = "suf";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_tmp[] = "tmp";
static const char __pyx_k_tot[] = "tot";
static const char __pyx_k_w_1[] = "w-1.";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_c_1c[] = "c-1c.";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dump[] = "dump";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_feat[] = "{}.feat{}";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_json[] = "json";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_load[] = "load";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_post[] = "post";
static const char __pyx_k_save[] = "save";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_tags[] = "tags";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_word[] = "word";
static const char __pyx_k_ww_l[] = "ww.l.";
static const char __pyx_k_ww_r[] = "ww.r.";
static const char __pyx_k_I_end[] = "I_end";
static const char __pyx_k_build[] = "build";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_conll[] = "{}.conll{}";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_flist[] = "flist";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_lines[] = "lines";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_words[] = "words";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_Letter[] = "**Letter";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_bigram[] = "bigram";
static const char __pyx_k_c_2c_1[] = "c-2c-1.";
static const char __pyx_k_config[] = "config";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_feat_2[] = "feat";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_letter[] = "letter";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_nLabel[] = "nLabel";
static const char __pyx_k_next_c[] = "next_c";
static const char __pyx_k_noWord[] = "**noWord";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_prev_c[] = "prev_c";
static const char __pyx_k_reader[] = "reader";
static const char __pyx_k_splits[] = "splits";
static const char __pyx_k_stderr[] = "stderr";
static const char __pyx_k_tmplst[] = "tmplst";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_writer[] = "writer";
static const char __pyx_k_Counter[] = "Counter";
static const char __pyx_k_I_first[] = "I_first";
static const char __pyx_k_all_len[] = "all_len";
static const char __pyx_k_example[] = "example";
static const char __pyx_k_feature[] = "feature";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_product[] = "product";
static const char __pyx_k_tag_set[] = "tag_set";
static const char __pyx_k_unigram[] = "unigram";
static const char __pyx_k_wordMax[] = "wordMax";
static const char __pyx_k_wordMin[] = "wordMin";
static const char __pyx_k_wordary[] = "wordary";
static const char __pyx_k_B_single[] = "B_single";
static const char __pyx_k_c_writer[] = "c_writer";
static const char __pyx_k_encoding[] = "encoding";
static const char __pyx_k_examples[] = "examples";
static const char __pyx_k_f_writer[] = "f_writer";
static const char __pyx_k_features[] = "features";
static const char __pyx_k_iterable[] = "iterable";
static const char __pyx_k_keywords[] = "keywords";
static const char __pyx_k_length_2[] = "length = {} : {}";
static const char __pyx_k_modelDir[] = "modelDir";
static const char __pyx_k_protocol[] = "protocol";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_specials[] = "specials";
static const char __pyx_k_t_writer[] = "t_writer";
static const char __pyx_k_tags_idx[] = "tags_idx";
static const char __pyx_k_word_max[] = "word_max";
static const char __pyx_k_word_min[] = "word_min";
static const char __pyx_k_character[] = "character";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_extractor[] = "extractor";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_maketrans[] = "maketrans";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_model_dir[] = "model_dir";
static const char __pyx_k_prelst_ex[] = "prelst_ex";
static const char __pyx_k_prelst_in[] = "prelst_in";
static const char __pyx_k_readlines[] = "readlines";
static const char __pyx_k_text_file[] = "text_file";
static const char __pyx_k_translate[] = "translate";
static const char __pyx_k_0123456789[] = "0123456789.\345\207\240\344\272\214\344\270\211\345\233\233\344\272\224\345\205\255\344\270\203\345\205\253\344\271\235\345\215\201\345\215\203\344\270\207\344\272\277\345\205\206\351\233\266\357\274\221\357\274\222\357\274\223\357\274\224\357\274\225\357\274\226\357\274\227\357\274\230\357\274\231\357\274\220\357\274\205";
static const char __pyx_k_conll_file[] = "conll_file";
static const char __pyx_k_postlst_ex[] = "postlst_ex";
static const char __pyx_k_postlst_in[] = "postlst_in";
static const char __pyx_k_tag_to_idx[] = "tag_to_idx";
static const char __pyx_k_train_file[] = "train_file";
static const char __pyx_k_word_range[] = "word_range";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_featureTrim[] = "featureTrim";
static const char __pyx_k_feature_idx[] = "feature_idx";
static const char __pyx_k_feature_set[] = "feature_set";
static const char __pyx_k_most_common[] = "most_common";
static const char __pyx_k_prepre_char[] = "prepre_char";
static const char __pyx_k_wordFeature[] = "wordFeature";
static const char __pyx_k_word_length[] = "word_length";
static const char __pyx_k_feature_file[] = "feature_file";
static const char __pyx_k_feature_freq[] = "feature_freq";
static const char __pyx_k_feature_path[] = "feature_path";
static const char __pyx_k_features_idx[] = "features_idx";
static const char __pyx_k_features_pkl[] = "features.pkl";
static const char __pyx_k_tagIndex_txt[] = "tagIndex.txt";
static const char __pyx_k_tag_idx_file[] = "tag_idx_file";
static const char __pyx_k_features_json[] = "features.json";
static const char __pyx_k_node_features[] = "node_features";
static const char __pyx_k_numLetterNorm[] = "numLetterNorm";
static const char __pyx_k_pkuseg_config[] = "pkuseg.config";
static const char __pyx_k_delimInFeature[] = "delimInFeature";
static const char __pyx_k_feature_to_idx[] = "feature_to_idx";
static const char __pyx_k_keyword_rename[] = "keyword_rename";
static const char __pyx_k_normalize_text[] = "normalize_text";
static const char __pyx_k_bigram_word_txt[] = "bigram_word.txt";
static const char __pyx_k_max_word_length[] = "max_word_length";
static const char __pyx_k_FeatureExtractor[] = "FeatureExtractor";
static const char __pyx_k_HIGHEST_PROTOCOL[] = "HIGHEST_PROTOCOL";
static const char __pyx_k_featureIndex_txt[] = "featureIndex.txt";
static const char __pyx_k_feature_idx_file[] = "feature_idx_file";
static const char __pyx_k_unigram_word_txt[] = "unigram_word.txt";
static const char __pyx_k_word_length_info[] = "word_length_info";
static const char __pyx_k_conll_line_format[] = "conll_line_format";
static const char __pyx_k_feature_base_name[] = "feature_base_name";
static const char __pyx_k_get_node_features[] = "get_node_features";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_FeatureExtractor_load[] = "FeatureExtractor.load";
static const char __pyx_k_FeatureExtractor_save[] = "FeatureExtractor.save";
static const char __pyx_k_get_node_features_idx[] = "__get_node_features_idx";
static const char __pyx_k_FeatureExtractor_build[] = "FeatureExtractor.build";
static const char __pyx_k_FeatureExtractor___init[] = "FeatureExtractor.__init__";
static const char __pyx_k_get_node_features_idx_2[] = "get_node_features_idx";
static const char __pyx_k_keywords_translate_table[] = "keywords_translate_table";
static const char __pyx_k_pkuseg_feature_extractor[] = "pkuseg.feature_extractor";
static const char __pyx_k_num_letter_normalize_char[] = "_num_letter_normalize_char";
static const char __pyx_k_INFO_features_json_is_saved[] = "INFO: features.json is saved";
static const char __pyx_k_pkuseg_feature_extractor_pyx[] = "pkuseg\\feature_extractor.pyx";
static const char __pyx_k_FeatureExtractor_keyword_rename[] = "FeatureExtractor.keyword_rename";
static const char __pyx_k_FeatureExtractor_normalize_text[] = "FeatureExtractor.normalize_text";
static const char __pyx_k_FeatureExtractor__num_letter_nor[] = "FeatureExtractor._num_letter_normalize_char";
static const char __pyx_k_FeatureExtractor_build_locals_ge[] = "FeatureExtractor.build.<locals>.genexpr";
static const char __pyx_k_FeatureExtractor_convert_feature[] = "FeatureExtractor.convert_feature_file_to_idx_file";
static const char __pyx_k_FeatureExtractor_convert_text_fi[] = "FeatureExtractor.convert_text_file_to_feature_file";
static const char __pyx_k_FeatureExtractor_get_node_featur[] = "FeatureExtractor.get_node_features_idx";
static const char __pyx_k_FeatureExtractor_load_locals_gen[] = "FeatureExtractor.load.<locals>.genexpr";
static const char __pyx_k_WARNING_features_json_does_not_e[] = "WARNING: features.json does not exist, try loading using old format";
static const char __pyx_k_WARNING_features_pkl_does_not_ex[] = "WARNING: features.pkl does not exist, try loading features.json";
static const char __pyx_k_convert_feature_file_to_idx_file[] = "convert_feature_file_to_idx_file";
static const char __pyx_k_convert_text_file_to_feature_fil[] = "convert_text_file_to_feature_file";
static const char __pyx_k_FeatureExtractor_get_node_featur_2[] = "FeatureExtractor.get_node_features";
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_kp_u_0;
static PyObject *__pyx_kp_u_0123456789;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_u_B;
static PyObject *__pyx_n_s_B_single;
static PyObject *__pyx_n_u_B_single;
static PyObject *__pyx_n_s_Counter;
static PyObject *__pyx_n_s_FeatureExtractor;
static PyObject *__pyx_n_s_FeatureExtractor___init;
static PyObject *__pyx_n_s_FeatureExtractor__num_letter_nor;
static PyObject *__pyx_n_s_FeatureExtractor_build;
static PyObject *__pyx_n_s_FeatureExtractor_build_locals_ge;
static PyObject *__pyx_n_s_FeatureExtractor_convert_feature;
static PyObject *__pyx_n_s_FeatureExtractor_convert_text_fi;
static PyObject *__pyx_n_s_FeatureExtractor_get_node_featur;
static PyObject *__pyx_n_s_FeatureExtractor_get_node_featur_2;
static PyObject *__pyx_n_s_FeatureExtractor_keyword_rename;
static PyObject *__pyx_n_s_FeatureExtractor_load;
static PyObject *__pyx_n_s_FeatureExtractor_load_locals_gen;
static PyObject *__pyx_n_s_FeatureExtractor_normalize_text;
static PyObject *__pyx_n_s_FeatureExtractor_save;
static PyObject *__pyx_n_s_HIGHEST_PROTOCOL;
static PyObject *__pyx_n_s_I;
static PyObject *__pyx_n_u_I;
static PyObject *__pyx_kp_u_INFO_features_json_is_saved;
static PyObject *__pyx_n_s_I_end;
static PyObject *__pyx_n_u_I_end;
static PyObject *__pyx_n_s_I_first;
static PyObject *__pyx_n_u_I_first;
static PyObject *__pyx_kp_u_Letter;
static PyObject *__pyx_kp_u_Num;
static PyObject *__pyx_kp_u_WARNING_features_json_does_not_e;
static PyObject *__pyx_kp_u_WARNING_features_pkl_does_not_ex;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_kp_u__11;
static PyObject *__pyx_kp_u__12;
static PyObject *__pyx_kp_u__13;
static PyObject *__pyx_kp_u__14;
static PyObject *__pyx_kp_u__16;
static PyObject *__pyx_kp_u__19;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_kp_u__24;
static PyObject *__pyx_kp_u__25;
static PyObject *__pyx_kp_u__26;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_n_s__35;
static PyObject *__pyx_kp_u__5;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_kp_u__9;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_all_len;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_bigram;
static PyObject *__pyx_n_u_bigram;
static PyObject *__pyx_kp_u_bigram_word_txt;
static PyObject *__pyx_n_s_build;
static PyObject *__pyx_kp_u_c;
static PyObject *__pyx_kp_u_c1;
static PyObject *__pyx_kp_u_c2;
static PyObject *__pyx_kp_u_c_1;
static PyObject *__pyx_kp_u_c_1c;
static PyObject *__pyx_kp_u_c_2;
static PyObject *__pyx_kp_u_c_2c_1;
static PyObject *__pyx_n_s_c_3;
static PyObject *__pyx_n_s_c_writer;
static PyObject *__pyx_kp_u_cc1;
static PyObject *__pyx_n_s_character;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cls;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_config;
static PyObject *__pyx_kp_u_conll;
static PyObject *__pyx_n_s_conll_file;
static PyObject *__pyx_n_s_conll_line_format;
static PyObject *__pyx_n_s_convert_feature_file_to_idx_file;
static PyObject *__pyx_n_s_convert_text_file_to_feature_fil;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_delimInFeature;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dump;
static PyObject *__pyx_n_s_encoding;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_example;
static PyObject *__pyx_n_s_examples;
static PyObject *__pyx_n_s_exists;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_extractor;
static PyObject *__pyx_n_s_f_writer;
static PyObject *__pyx_kp_u_feat;
static PyObject *__pyx_n_s_feat_2;
static PyObject *__pyx_n_s_feature;
static PyObject *__pyx_kp_u_featureIndex_txt;
static PyObject *__pyx_n_s_featureTrim;
static PyObject *__pyx_n_s_feature_base_name;
static PyObject *__pyx_n_s_feature_file;
static PyObject *__pyx_n_s_feature_freq;
static PyObject *__pyx_n_s_feature_idx;
static PyObject *__pyx_n_s_feature_idx_file;
static PyObject *__pyx_n_s_feature_path;
static PyObject *__pyx_n_s_feature_set;
static PyObject *__pyx_n_s_feature_to_idx;
static PyObject *__pyx_n_u_feature_to_idx;
static PyObject *__pyx_n_s_features;
static PyObject *__pyx_n_s_features_idx;
static PyObject *__pyx_kp_u_features_json;
static PyObject *__pyx_kp_u_features_pkl;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_flist;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_node_features;
static PyObject *__pyx_n_s_get_node_features_idx;
static PyObject *__pyx_n_s_get_node_features_idx_2;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_iterable;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_json;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_keyword_rename;
static PyObject *__pyx_n_s_keywords;
static PyObject *__pyx_n_s_keywords_translate_table;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_len;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_kp_u_length_2;
static PyObject *__pyx_n_s_letter;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_lines;
static PyObject *__pyx_n_s_load;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_maketrans;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_max_word_length;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_modelDir;
static PyObject *__pyx_n_s_model_dir;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_most_common;
static PyObject *__pyx_n_s_nLabel;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_next_c;
static PyObject *__pyx_kp_u_noWord;
static PyObject *__pyx_n_s_node_features;
static PyObject *__pyx_n_s_nodes;
static PyObject *__pyx_n_s_normalize_text;
static PyObject *__pyx_n_s_num;
static PyObject *__pyx_n_s_numLetterNorm;
static PyObject *__pyx_n_s_num_letter_normalize_char;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pkuseg_config;
static PyObject *__pyx_n_s_pkuseg_feature_extractor;
static PyObject *__pyx_kp_s_pkuseg_feature_extractor_pyx;
static PyObject *__pyx_n_s_post;
static PyObject *__pyx_n_s_postlst_ex;
static PyObject *__pyx_n_s_postlst_in;
static PyObject *__pyx_n_s_pre;
static PyObject *__pyx_n_s_prelst_ex;
static PyObject *__pyx_n_s_prelst_in;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_prepre_char;
static PyObject *__pyx_n_s_prev_c;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_product;
static PyObject *__pyx_n_s_protocol;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_u_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_u_rb;
static PyObject *__pyx_n_s_reader;
static PyObject *__pyx_n_s_readlines;
static PyObject *__pyx_n_s_save;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_specials;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_splits;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_stderr;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_suf;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_t_writer;
static PyObject *__pyx_n_s_tag;
static PyObject *__pyx_kp_u_tagIndex_txt;
static PyObject *__pyx_n_s_tag_idx_file;
static PyObject *__pyx_n_s_tag_set;
static PyObject *__pyx_n_s_tag_to_idx;
static PyObject *__pyx_n_u_tag_to_idx;
static PyObject *__pyx_n_s_tags;
static PyObject *__pyx_n_s_tags_idx;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_text_file;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tmp;
static PyObject *__pyx_n_s_tmplst;
static PyObject *__pyx_n_s_tot;
static PyObject *__pyx_n_s_train_file;
static PyObject *__pyx_n_s_translate;
static PyObject *__pyx_n_s_unigram;
static PyObject *__pyx_n_u_unigram;
static PyObject *__pyx_kp_u_unigram_word_txt;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_u_utf8;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_u_w;
static PyObject *__pyx_kp_u_w1;
static PyObject *__pyx_kp_u_w_1;
static PyObject *__pyx_n_u_wb;
static PyObject *__pyx_n_s_word;
static PyObject *__pyx_n_s_wordFeature;
static PyObject *__pyx_n_s_wordMax;
static PyObject *__pyx_n_s_wordMin;
static PyObject *__pyx_n_s_word_length;
static PyObject *__pyx_n_s_word_length_info;
static PyObject *__pyx_n_s_word_max;
static PyObject *__pyx_n_s_word_min;
static PyObject *__pyx_n_s_word_range;
static PyObject *__pyx_n_s_wordary;
static PyObject *__pyx_n_s_words;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_writer;
static PyObject *__pyx_kp_u_ww_l;
static PyObject *__pyx_kp_u_ww_r;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_get_slice_str(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_iterable, int __pyx_v_start, int __pyx_v_length, int __pyx_v_all_len); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_2__get_node_features_idx(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_config, int __pyx_v_idx, PyObject *__pyx_v_nodes, PyObject *__pyx_v_feature_to_idx, PyObject *__pyx_v_unigram); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_keyword_rename(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_2_num_letter_normalize_char(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_character); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_4normalize_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_7__init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_5build_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_5build_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_5build_6genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_9build(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_train_file); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_11get_node_features_idx(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_idx, PyObject *__pyx_v_nodes); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_13get_node_features(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_idx, PyObject *__pyx_v_wordary); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_15convert_feature_file_to_idx_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_feature_file, PyObject *__pyx_v_feature_idx_file, PyObject *__pyx_v_tag_idx_file); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_17convert_text_file_to_feature_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_text_file, PyObject *__pyx_v_conll_file, PyObject *__pyx_v_feature_file); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_19save(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_model_dir); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_4load_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_21load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_model_dir); /* proto */
static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_1_build(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_5_load(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PySet_Type_update = {0, &__pyx_n_s_update, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyUnicode_Type_format = {0, &__pyx_n_s_format, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_slice__15;
static PyObject *__pyx_slice__20;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__51;
/* Late includes */

/* "pkuseg/feature_extractor.pyx":17
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef get_slice_str(iterable, int start, int length, int all_len):             # <<<<<<<<<<<<<<
 *     if start < 0 or start >= all_len:
 *         return ""
 */

static PyObject *__pyx_pw_6pkuseg_17feature_extractor_1get_slice_str(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6pkuseg_17feature_extractor_get_slice_str(PyObject *__pyx_v_iterable, int __pyx_v_start, int __pyx_v_length, int __pyx_v_all_len, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_str", 0);

  /* "pkuseg/feature_extractor.pyx":18
 * @cython.wraparound(False)
 * cpdef get_slice_str(iterable, int start, int length, int all_len):
 *     if start < 0 or start >= all_len:             # <<<<<<<<<<<<<<
 *         return ""
 *     if start + length >= all_len + 1:
 */
  __pyx_t_2 = ((__pyx_v_start < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_start >= __pyx_v_all_len) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pkuseg/feature_extractor.pyx":19
 * cpdef get_slice_str(iterable, int start, int length, int all_len):
 *     if start < 0 or start >= all_len:
 *         return ""             # <<<<<<<<<<<<<<
 *     if start + length >= all_len + 1:
 *         return ""
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_u_);
    __pyx_r = __pyx_kp_u_;
    goto __pyx_L0;

    /* "pkuseg/feature_extractor.pyx":18
 * @cython.wraparound(False)
 * cpdef get_slice_str(iterable, int start, int length, int all_len):
 *     if start < 0 or start >= all_len:             # <<<<<<<<<<<<<<
 *         return ""
 *     if start + length >= all_len + 1:
 */
  }

  /* "pkuseg/feature_extractor.pyx":20
 *     if start < 0 or start >= all_len:
 *         return ""
 *     if start + length >= all_len + 1:             # <<<<<<<<<<<<<<
 *         return ""
 *     return "".join(iterable[start : start + length])
 */
  __pyx_t_1 = (((__pyx_v_start + __pyx_v_length) >= (__pyx_v_all_len + 1)) != 0);
  if (__pyx_t_1) {

    /* "pkuseg/feature_extractor.pyx":21
 *         return ""
 *     if start + length >= all_len + 1:
 *         return ""             # <<<<<<<<<<<<<<
 *     return "".join(iterable[start : start + length])
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_u_);
    __pyx_r = __pyx_kp_u_;
    goto __pyx_L0;

    /* "pkuseg/feature_extractor.pyx":20
 *     if start < 0 or start >= all_len:
 *         return ""
 *     if start + length >= all_len + 1:             # <<<<<<<<<<<<<<
 *         return ""
 *     return "".join(iterable[start : start + length])
 */
  }

  /* "pkuseg/feature_extractor.pyx":22
 *     if start + length >= all_len + 1:
 *         return ""
 *     return "".join(iterable[start : start + length])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_iterable, __pyx_v_start, (__pyx_v_start + __pyx_v_length), NULL, NULL, NULL, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Join(__pyx_kp_u_, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pkuseg/feature_extractor.pyx":17
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef get_slice_str(iterable, int start, int length, int all_len):             # <<<<<<<<<<<<<<
 *     if start < 0 or start >= all_len:
 *         return ""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pkuseg.feature_extractor.get_slice_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_1get_slice_str(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_1get_slice_str(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iterable = 0;
  int __pyx_v_start;
  int __pyx_v_length;
  int __pyx_v_all_len;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_slice_str (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iterable,&__pyx_n_s_start,&__pyx_n_s_length,&__pyx_n_s_all_len,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_iterable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_slice_str", 1, 4, 4, 1); __PYX_ERR(0, 17, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_slice_str", 1, 4, 4, 2); __PYX_ERR(0, 17, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_len)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_slice_str", 1, 4, 4, 3); __PYX_ERR(0, 17, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_slice_str") < 0)) __PYX_ERR(0, 17, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_iterable = values[0];
    __pyx_v_start = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_start == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 17, __pyx_L3_error)
    __pyx_v_length = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 17, __pyx_L3_error)
    __pyx_v_all_len = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_all_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 17, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_slice_str", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 17, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.get_slice_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_get_slice_str(__pyx_self, __pyx_v_iterable, __pyx_v_start, __pyx_v_length, __pyx_v_all_len);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_get_slice_str(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_iterable, int __pyx_v_start, int __pyx_v_length, int __pyx_v_all_len) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_str", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pkuseg_17feature_extractor_get_slice_str(__pyx_v_iterable, __pyx_v_start, __pyx_v_length, __pyx_v_all_len, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pkuseg.feature_extractor.get_slice_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":29
 * @cython.wraparound(False)
 * @cython.nonecheck(False)
 * def __get_node_features_idx(object config not None, int idx, list nodes not None, dict feature_to_idx not None, set unigram not None):             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_3__get_node_features_idx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_3__get_node_features_idx = {"__get_node_features_idx", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_3__get_node_features_idx, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_3__get_node_features_idx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_config = 0;
  int __pyx_v_idx;
  PyObject *__pyx_v_nodes = 0;
  PyObject *__pyx_v_feature_to_idx = 0;
  PyObject *__pyx_v_unigram = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_node_features_idx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_config,&__pyx_n_s_idx,&__pyx_n_s_nodes,&__pyx_n_s_feature_to_idx,&__pyx_n_s_unigram,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_config)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__get_node_features_idx", 1, 5, 5, 1); __PYX_ERR(0, 29, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nodes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__get_node_features_idx", 1, 5, 5, 2); __PYX_ERR(0, 29, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feature_to_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__get_node_features_idx", 1, 5, 5, 3); __PYX_ERR(0, 29, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_unigram)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__get_node_features_idx", 1, 5, 5, 4); __PYX_ERR(0, 29, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__get_node_features_idx") < 0)) __PYX_ERR(0, 29, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_config = values[0];
    __pyx_v_idx = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 29, __pyx_L3_error)
    __pyx_v_nodes = ((PyObject*)values[2]);
    __pyx_v_feature_to_idx = ((PyObject*)values[3]);
    __pyx_v_unigram = ((PyObject*)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__get_node_features_idx", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 29, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.__get_node_features_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(((PyObject *)__pyx_v_config) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "config"); __PYX_ERR(0, 29, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nodes), (&PyList_Type), 0, "nodes", 1))) __PYX_ERR(0, 29, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_feature_to_idx), (&PyDict_Type), 0, "feature_to_idx", 1))) __PYX_ERR(0, 29, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_unigram), (&PySet_Type), 0, "unigram", 1))) __PYX_ERR(0, 29, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_2__get_node_features_idx(__pyx_self, __pyx_v_config, __pyx_v_idx, __pyx_v_nodes, __pyx_v_feature_to_idx, __pyx_v_unigram);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_2__get_node_features_idx(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_config, int __pyx_v_idx, PyObject *__pyx_v_nodes, PyObject *__pyx_v_feature_to_idx, PyObject *__pyx_v_unigram) {
  PyObject *__pyx_v_flist = 0;
  Py_ssize_t __pyx_v_i;
  int __pyx_v_length;
  int __pyx_v_word_max;
  int __pyx_v_word_min;
  CYTHON_UNUSED int __pyx_v_word_range;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_feat = NULL;
  PyObject *__pyx_v_feature = NULL;
  PyObject *__pyx_v_prev_c = NULL;
  PyObject *__pyx_v_next_c = NULL;
  PyObject *__pyx_v_prepre_char = NULL;
  PyObject *__pyx_v_prelst_in = NULL;
  long __pyx_v_l;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_v_postlst_in = NULL;
  PyObject *__pyx_v_prelst_ex = NULL;
  PyObject *__pyx_v_postlst_ex = NULL;
  PyObject *__pyx_v_pre = NULL;
  PyObject *__pyx_v_post = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_node_features_idx", 0);

  /* "pkuseg/feature_extractor.pyx":32
 * 
 *     cdef:
 *         list flist = []             # <<<<<<<<<<<<<<
 *         Py_ssize_t i = idx
 *         int length = len(nodes)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_flist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":33
 *     cdef:
 *         list flist = []
 *         Py_ssize_t i = idx             # <<<<<<<<<<<<<<
 *         int length = len(nodes)
 *         int word_max = config.wordMax
 */
  __pyx_v_i = __pyx_v_idx;

  /* "pkuseg/feature_extractor.pyx":34
 *         list flist = []
 *         Py_ssize_t i = idx
 *         int length = len(nodes)             # <<<<<<<<<<<<<<
 *         int word_max = config.wordMax
 *         int word_min = config.wordMin
 */
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_nodes); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 34, __pyx_L1_error)
  __pyx_v_length = __pyx_t_2;

  /* "pkuseg/feature_extractor.pyx":35
 *         Py_ssize_t i = idx
 *         int length = len(nodes)
 *         int word_max = config.wordMax             # <<<<<<<<<<<<<<
 *         int word_min = config.wordMin
 *         int word_range = word_max - word_min + 1
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_config, __pyx_n_s_wordMax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_word_max = __pyx_t_3;

  /* "pkuseg/feature_extractor.pyx":36
 *         int length = len(nodes)
 *         int word_max = config.wordMax
 *         int word_min = config.wordMin             # <<<<<<<<<<<<<<
 *         int word_range = word_max - word_min + 1
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_config, __pyx_n_s_wordMin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_word_min = __pyx_t_3;

  /* "pkuseg/feature_extractor.pyx":37
 *         int word_max = config.wordMax
 *         int word_min = config.wordMin
 *         int word_range = word_max - word_min + 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_word_range = ((__pyx_v_word_max - __pyx_v_word_min) + 1);

  /* "pkuseg/feature_extractor.pyx":40
 * 
 * 
 *     c = nodes[i]             # <<<<<<<<<<<<<<
 * 
 *     # $$ starts feature
 */
  __pyx_t_1 = PyList_GET_ITEM(__pyx_v_nodes, __pyx_v_i);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_c = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":43
 * 
 *     # $$ starts feature
 *     flist.append(0)             # <<<<<<<<<<<<<<
 * 
 *     # 8 unigram/bgiram feature
 */
  __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_int_0); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 43, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":46
 * 
 *     # 8 unigram/bgiram feature
 *     feat  = 'c.' + c             # <<<<<<<<<<<<<<
 *     if feat in feature_to_idx:
 *         feature = feature_to_idx[feat]
 */
  __pyx_t_1 = PyNumber_Add(__pyx_kp_u_c, __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_feat = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":47
 *     # 8 unigram/bgiram feature
 *     feat  = 'c.' + c
 *     if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *         feature = feature_to_idx[feat]
 *         flist.append(feature)
 */
  __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "pkuseg/feature_extractor.pyx":48
 *     feat  = 'c.' + c
 *     if feat in feature_to_idx:
 *         feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *         flist.append(feature)
 * 
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_feature = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":49
 *     if feat in feature_to_idx:
 *         feature = feature_to_idx[feat]
 *         flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 49, __pyx_L1_error)

    /* "pkuseg/feature_extractor.pyx":47
 *     # 8 unigram/bgiram feature
 *     feat  = 'c.' + c
 *     if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *         feature = feature_to_idx[feat]
 *         flist.append(feature)
 */
  }

  /* "pkuseg/feature_extractor.pyx":52
 * 
 * 
 *     if i > 0:             # <<<<<<<<<<<<<<
 *         prev_c = nodes[i-1]
 *         feat = 'c-1.' + prev_c
 */
  __pyx_t_6 = ((__pyx_v_i > 0) != 0);
  if (__pyx_t_6) {

    /* "pkuseg/feature_extractor.pyx":53
 * 
 *     if i > 0:
 *         prev_c = nodes[i-1]             # <<<<<<<<<<<<<<
 *         feat = 'c-1.' + prev_c
 *         if feat in feature_to_idx:
 */
    __pyx_t_2 = (__pyx_v_i - 1);
    __pyx_t_1 = PyList_GET_ITEM(__pyx_v_nodes, __pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_prev_c = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":54
 *     if i > 0:
 *         prev_c = nodes[i-1]
 *         feat = 'c-1.' + prev_c             # <<<<<<<<<<<<<<
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_c_1, __pyx_v_prev_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_feat, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":55
 *         prev_c = nodes[i-1]
 *         feat = 'c-1.' + prev_c
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 55, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pkuseg/feature_extractor.pyx":56
 *         feat = 'c-1.' + prev_c
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *             flist.append(feature)
 * 
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pkuseg/feature_extractor.pyx":57
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 *         feat = 'c-1c.' + prev_c + '.' + c
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 57, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":55
 *         prev_c = nodes[i-1]
 *         feat = 'c-1.' + prev_c
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    }

    /* "pkuseg/feature_extractor.pyx":59
 *             flist.append(feature)
 * 
 *         feat = 'c-1c.' + prev_c + '.' + c             # <<<<<<<<<<<<<<
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_c_1c, __pyx_v_prev_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_kp_u__2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_7, __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_feat, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":60
 * 
 *         feat = 'c-1c.' + prev_c + '.' + c
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 60, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pkuseg/feature_extractor.pyx":61
 *         feat = 'c-1c.' + prev_c + '.' + c
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *             flist.append(feature)
 * 
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pkuseg/feature_extractor.pyx":62
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 *     if i + 1 < length:
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 62, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":60
 * 
 *         feat = 'c-1c.' + prev_c + '.' + c
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    }

    /* "pkuseg/feature_extractor.pyx":52
 * 
 * 
 *     if i > 0:             # <<<<<<<<<<<<<<
 *         prev_c = nodes[i-1]
 *         feat = 'c-1.' + prev_c
 */
  }

  /* "pkuseg/feature_extractor.pyx":64
 *             flist.append(feature)
 * 
 *     if i + 1 < length:             # <<<<<<<<<<<<<<
 *         next_c = nodes[i+1]
 * 
 */
  __pyx_t_6 = (((__pyx_v_i + 1) < __pyx_v_length) != 0);
  if (__pyx_t_6) {

    /* "pkuseg/feature_extractor.pyx":65
 * 
 *     if i + 1 < length:
 *         next_c = nodes[i+1]             # <<<<<<<<<<<<<<
 * 
 *         feat = 'c1.' + next_c
 */
    __pyx_t_2 = (__pyx_v_i + 1);
    __pyx_t_1 = PyList_GET_ITEM(__pyx_v_nodes, __pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_next_c = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":67
 *         next_c = nodes[i+1]
 * 
 *         feat = 'c1.' + next_c             # <<<<<<<<<<<<<<
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_c1, __pyx_v_next_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_feat, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":68
 * 
 *         feat = 'c1.' + next_c
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 68, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pkuseg/feature_extractor.pyx":69
 *         feat = 'c1.' + next_c
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *             flist.append(feature)
 * 
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pkuseg/feature_extractor.pyx":70
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 *         feat = 'cc1.' + c + '.' + next_c
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 70, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":68
 * 
 *         feat = 'c1.' + next_c
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    }

    /* "pkuseg/feature_extractor.pyx":72
 *             flist.append(feature)
 * 
 *         feat = 'cc1.' + c + '.' + next_c             # <<<<<<<<<<<<<<
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_cc1, __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_kp_u__2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_7, __pyx_v_next_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_feat, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":73
 * 
 *         feat = 'cc1.' + c + '.' + next_c
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 73, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pkuseg/feature_extractor.pyx":74
 *         feat = 'cc1.' + c + '.' + next_c
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *             flist.append(feature)
 * 
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pkuseg/feature_extractor.pyx":75
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 75, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":73
 * 
 *         feat = 'cc1.' + c + '.' + next_c
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    }

    /* "pkuseg/feature_extractor.pyx":64
 *             flist.append(feature)
 * 
 *     if i + 1 < length:             # <<<<<<<<<<<<<<
 *         next_c = nodes[i+1]
 * 
 */
  }

  /* "pkuseg/feature_extractor.pyx":78
 * 
 * 
 *     if i > 1:             # <<<<<<<<<<<<<<
 *         prepre_char = nodes[i-2]
 *         feat = 'c-2.' + prepre_char
 */
  __pyx_t_6 = ((__pyx_v_i > 1) != 0);
  if (__pyx_t_6) {

    /* "pkuseg/feature_extractor.pyx":79
 * 
 *     if i > 1:
 *         prepre_char = nodes[i-2]             # <<<<<<<<<<<<<<
 *         feat = 'c-2.' + prepre_char
 *         if feat in feature_to_idx:
 */
    __pyx_t_2 = (__pyx_v_i - 2);
    __pyx_t_1 = PyList_GET_ITEM(__pyx_v_nodes, __pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_prepre_char = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":80
 *     if i > 1:
 *         prepre_char = nodes[i-2]
 *         feat = 'c-2.' + prepre_char             # <<<<<<<<<<<<<<
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_c_2, __pyx_v_prepre_char); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_feat, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":81
 *         prepre_char = nodes[i-2]
 *         feat = 'c-2.' + prepre_char
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 81, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pkuseg/feature_extractor.pyx":82
 *         feat = 'c-2.' + prepre_char
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *             flist.append(feature)
 * 
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pkuseg/feature_extractor.pyx":83
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 *         feat = 'c-2c-1.' + prepre_char + '.' + nodes[i-1]
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 83, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":81
 *         prepre_char = nodes[i-2]
 *         feat = 'c-2.' + prepre_char
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    }

    /* "pkuseg/feature_extractor.pyx":85
 *             flist.append(feature)
 * 
 *         feat = 'c-2c-1.' + prepre_char + '.' + nodes[i-1]             # <<<<<<<<<<<<<<
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_c_2c_1, __pyx_v_prepre_char); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_kp_u__2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = (__pyx_v_i - 1);
    __pyx_t_1 = PyNumber_Add(__pyx_t_7, PyList_GET_ITEM(__pyx_v_nodes, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_feat, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":86
 * 
 *         feat = 'c-2c-1.' + prepre_char + '.' + nodes[i-1]
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 86, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pkuseg/feature_extractor.pyx":87
 *         feat = 'c-2c-1.' + prepre_char + '.' + nodes[i-1]
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *             flist.append(feature)
 * 
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pkuseg/feature_extractor.pyx":88
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 88, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":86
 * 
 *         feat = 'c-2c-1.' + prepre_char + '.' + nodes[i-1]
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    }

    /* "pkuseg/feature_extractor.pyx":78
 * 
 * 
 *     if i > 1:             # <<<<<<<<<<<<<<
 *         prepre_char = nodes[i-2]
 *         feat = 'c-2.' + prepre_char
 */
  }

  /* "pkuseg/feature_extractor.pyx":92
 * 
 * 
 *     if i + 2 < length:             # <<<<<<<<<<<<<<
 *         feat = 'c2.' + nodes[i+2]
 *         if feat in feature_to_idx:
 */
  __pyx_t_6 = (((__pyx_v_i + 2) < __pyx_v_length) != 0);
  if (__pyx_t_6) {

    /* "pkuseg/feature_extractor.pyx":93
 * 
 *     if i + 2 < length:
 *         feat = 'c2.' + nodes[i+2]             # <<<<<<<<<<<<<<
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 */
    __pyx_t_2 = (__pyx_v_i + 2);
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_c2, PyList_GET_ITEM(__pyx_v_nodes, __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_feat, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":94
 *     if i + 2 < length:
 *         feat = 'c2.' + nodes[i+2]
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pkuseg/feature_extractor.pyx":95
 *         feat = 'c2.' + nodes[i+2]
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *             flist.append(feature)
 * 
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pkuseg/feature_extractor.pyx":96
 *         if feat in feature_to_idx:
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 96, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":94
 *     if i + 2 < length:
 *         feat = 'c2.' + nodes[i+2]
 *         if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *             feature = feature_to_idx[feat]
 *             flist.append(feature)
 */
    }

    /* "pkuseg/feature_extractor.pyx":92
 * 
 * 
 *     if i + 2 < length:             # <<<<<<<<<<<<<<
 *         feat = 'c2.' + nodes[i+2]
 *         if feat in feature_to_idx:
 */
  }

  /* "pkuseg/feature_extractor.pyx":100
 * 
 *     # no num/letter based features
 *     if not config.wordFeature:             # <<<<<<<<<<<<<<
 *         return flist
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_config, __pyx_n_s_wordFeature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = ((!__pyx_t_5) != 0);
  if (__pyx_t_6) {

    /* "pkuseg/feature_extractor.pyx":101
 *     # no num/letter based features
 *     if not config.wordFeature:
 *         return flist             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_flist);
    __pyx_r = __pyx_v_flist;
    goto __pyx_L0;

    /* "pkuseg/feature_extractor.pyx":100
 * 
 *     # no num/letter based features
 *     if not config.wordFeature:             # <<<<<<<<<<<<<<
 *         return flist
 * 
 */
  }

  /* "pkuseg/feature_extractor.pyx":107
 *     # the character starts or ends a word
 * 
 *     prelst_in = []             # <<<<<<<<<<<<<<
 *     for l in range(word_max, word_min - 1, -1):
 *         # length 6 ... 2 (default)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_prelst_in = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":108
 * 
 *     prelst_in = []
 *     for l in range(word_max, word_min - 1, -1):             # <<<<<<<<<<<<<<
 *         # length 6 ... 2 (default)
 *         # "prefix including current c" wordary[n-l+1, n]
 */
  __pyx_t_8 = (__pyx_v_word_min - 1);
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = __pyx_v_word_max; __pyx_t_10 > __pyx_t_9; __pyx_t_10-=1) {
    __pyx_v_l = __pyx_t_10;

    /* "pkuseg/feature_extractor.pyx":112
 *         # "prefix including current c" wordary[n-l+1, n]
 *         # current character ends word
 *         tmp = get_slice_str(nodes, i - l + 1, l, length)             # <<<<<<<<<<<<<<
 *         if tmp in unigram:
 *             feat = 'w-1.' + tmp
 */
    __pyx_t_1 = __pyx_f_6pkuseg_17feature_extractor_get_slice_str(__pyx_v_nodes, ((__pyx_v_i - __pyx_v_l) + 1), __pyx_v_l, __pyx_v_length, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":113
 *         # current character ends word
 *         tmp = get_slice_str(nodes, i - l + 1, l, length)
 *         if tmp in unigram:             # <<<<<<<<<<<<<<
 *             feat = 'w-1.' + tmp
 *             if feat in feature_to_idx:
 */
    __pyx_t_6 = (__Pyx_PySet_ContainsTF(__pyx_v_tmp, __pyx_v_unigram, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 113, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pkuseg/feature_extractor.pyx":114
 *         tmp = get_slice_str(nodes, i - l + 1, l, length)
 *         if tmp in unigram:
 *             feat = 'w-1.' + tmp             # <<<<<<<<<<<<<<
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]
 */
      __pyx_t_1 = PyNumber_Add(__pyx_kp_u_w_1, __pyx_v_tmp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_feat, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pkuseg/feature_extractor.pyx":115
 *         if tmp in unigram:
 *             feat = 'w-1.' + tmp
 *             if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)
 */
      __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 115, __pyx_L1_error)
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {

        /* "pkuseg/feature_extractor.pyx":116
 *             feat = 'w-1.' + tmp
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *                 flist.append(feature)
 * 
 */
        __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "pkuseg/feature_extractor.pyx":117
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 *             prelst_in.append(tmp)
 */
        __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 117, __pyx_L1_error)

        /* "pkuseg/feature_extractor.pyx":115
 *         if tmp in unigram:
 *             feat = 'w-1.' + tmp
 *             if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)
 */
      }

      /* "pkuseg/feature_extractor.pyx":119
 *                 flist.append(feature)
 * 
 *             prelst_in.append(tmp)             # <<<<<<<<<<<<<<
 *         else:
 *             prelst_in.append("**noWord")
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_prelst_in, __pyx_v_tmp); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 119, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":113
 *         # current character ends word
 *         tmp = get_slice_str(nodes, i - l + 1, l, length)
 *         if tmp in unigram:             # <<<<<<<<<<<<<<
 *             feat = 'w-1.' + tmp
 *             if feat in feature_to_idx:
 */
      goto __pyx_L18;
    }

    /* "pkuseg/feature_extractor.pyx":121
 *             prelst_in.append(tmp)
 *         else:
 *             prelst_in.append("**noWord")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_prelst_in, __pyx_kp_u_noWord); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 121, __pyx_L1_error)
    }
    __pyx_L18:;
  }

  /* "pkuseg/feature_extractor.pyx":125
 * 
 * 
 *     postlst_in = []             # <<<<<<<<<<<<<<
 *     for l in range(word_max, word_min - 1, -1):
 *         # "suffix" wordary[n, n+l-1]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_postlst_in = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":126
 * 
 *     postlst_in = []
 *     for l in range(word_max, word_min - 1, -1):             # <<<<<<<<<<<<<<
 *         # "suffix" wordary[n, n+l-1]
 *         # current character starts word
 */
  __pyx_t_8 = (__pyx_v_word_min - 1);
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = __pyx_v_word_max; __pyx_t_10 > __pyx_t_9; __pyx_t_10-=1) {
    __pyx_v_l = __pyx_t_10;

    /* "pkuseg/feature_extractor.pyx":129
 *         # "suffix" wordary[n, n+l-1]
 *         # current character starts word
 *         tmp = get_slice_str(nodes, i, l, length)             # <<<<<<<<<<<<<<
 *         if tmp in unigram:
 *             feat = 'w1.' + tmp
 */
    __pyx_t_1 = __pyx_f_6pkuseg_17feature_extractor_get_slice_str(__pyx_v_nodes, __pyx_v_i, __pyx_v_l, __pyx_v_length, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":130
 *         # current character starts word
 *         tmp = get_slice_str(nodes, i, l, length)
 *         if tmp in unigram:             # <<<<<<<<<<<<<<
 *             feat = 'w1.' + tmp
 *             if feat in feature_to_idx:
 */
    __pyx_t_6 = (__Pyx_PySet_ContainsTF(__pyx_v_tmp, __pyx_v_unigram, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 130, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pkuseg/feature_extractor.pyx":131
 *         tmp = get_slice_str(nodes, i, l, length)
 *         if tmp in unigram:
 *             feat = 'w1.' + tmp             # <<<<<<<<<<<<<<
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]
 */
      __pyx_t_1 = PyNumber_Add(__pyx_kp_u_w1, __pyx_v_tmp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_feat, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pkuseg/feature_extractor.pyx":132
 *         if tmp in unigram:
 *             feat = 'w1.' + tmp
 *             if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)
 */
      __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 132, __pyx_L1_error)
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {

        /* "pkuseg/feature_extractor.pyx":133
 *             feat = 'w1.' + tmp
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *                 flist.append(feature)
 * 
 */
        __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "pkuseg/feature_extractor.pyx":134
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 *             postlst_in.append(tmp)
 */
        __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 134, __pyx_L1_error)

        /* "pkuseg/feature_extractor.pyx":132
 *         if tmp in unigram:
 *             feat = 'w1.' + tmp
 *             if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)
 */
      }

      /* "pkuseg/feature_extractor.pyx":136
 *                 flist.append(feature)
 * 
 *             postlst_in.append(tmp)             # <<<<<<<<<<<<<<
 *         else:
 *             postlst_in.append("**noWord")
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_postlst_in, __pyx_v_tmp); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 136, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":130
 *         # current character starts word
 *         tmp = get_slice_str(nodes, i, l, length)
 *         if tmp in unigram:             # <<<<<<<<<<<<<<
 *             feat = 'w1.' + tmp
 *             if feat in feature_to_idx:
 */
      goto __pyx_L22;
    }

    /* "pkuseg/feature_extractor.pyx":138
 *             postlst_in.append(tmp)
 *         else:
 *             postlst_in.append("**noWord")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_postlst_in, __pyx_kp_u_noWord); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 138, __pyx_L1_error)
    }
    __pyx_L22:;
  }

  /* "pkuseg/feature_extractor.pyx":142
 * 
 *     # these are not in feature list
 *     prelst_ex = []             # <<<<<<<<<<<<<<
 *     for l in range(word_max, word_min - 1, -1):
 *         # "prefix excluding current c" wordary[n-l, n-1]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_prelst_ex = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":143
 *     # these are not in feature list
 *     prelst_ex = []
 *     for l in range(word_max, word_min - 1, -1):             # <<<<<<<<<<<<<<
 *         # "prefix excluding current c" wordary[n-l, n-1]
 *         tmp = get_slice_str(nodes, i - l, l, length)
 */
  __pyx_t_8 = (__pyx_v_word_min - 1);
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = __pyx_v_word_max; __pyx_t_10 > __pyx_t_9; __pyx_t_10-=1) {
    __pyx_v_l = __pyx_t_10;

    /* "pkuseg/feature_extractor.pyx":145
 *     for l in range(word_max, word_min - 1, -1):
 *         # "prefix excluding current c" wordary[n-l, n-1]
 *         tmp = get_slice_str(nodes, i - l, l, length)             # <<<<<<<<<<<<<<
 *         if tmp in unigram:
 *             prelst_ex.append(tmp)
 */
    __pyx_t_1 = __pyx_f_6pkuseg_17feature_extractor_get_slice_str(__pyx_v_nodes, (__pyx_v_i - __pyx_v_l), __pyx_v_l, __pyx_v_length, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":146
 *         # "prefix excluding current c" wordary[n-l, n-1]
 *         tmp = get_slice_str(nodes, i - l, l, length)
 *         if tmp in unigram:             # <<<<<<<<<<<<<<
 *             prelst_ex.append(tmp)
 *         else:
 */
    __pyx_t_6 = (__Pyx_PySet_ContainsTF(__pyx_v_tmp, __pyx_v_unigram, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 146, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pkuseg/feature_extractor.pyx":147
 *         tmp = get_slice_str(nodes, i - l, l, length)
 *         if tmp in unigram:
 *             prelst_ex.append(tmp)             # <<<<<<<<<<<<<<
 *         else:
 *             prelst_ex.append("**noWord")
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_prelst_ex, __pyx_v_tmp); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 147, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":146
 *         # "prefix excluding current c" wordary[n-l, n-1]
 *         tmp = get_slice_str(nodes, i - l, l, length)
 *         if tmp in unigram:             # <<<<<<<<<<<<<<
 *             prelst_ex.append(tmp)
 *         else:
 */
      goto __pyx_L26;
    }

    /* "pkuseg/feature_extractor.pyx":149
 *             prelst_ex.append(tmp)
 *         else:
 *             prelst_ex.append("**noWord")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_prelst_ex, __pyx_kp_u_noWord); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 149, __pyx_L1_error)
    }
    __pyx_L26:;
  }

  /* "pkuseg/feature_extractor.pyx":152
 * 
 * 
 *     postlst_ex = []             # <<<<<<<<<<<<<<
 *     for l in range(word_max, word_min - 1, -1):
 *         # "suffix excluding current c" wordary[n+1, n+l]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_postlst_ex = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":153
 * 
 *     postlst_ex = []
 *     for l in range(word_max, word_min - 1, -1):             # <<<<<<<<<<<<<<
 *         # "suffix excluding current c" wordary[n+1, n+l]
 *         tmp = get_slice_str(nodes, i + 1, l, length)
 */
  __pyx_t_8 = (__pyx_v_word_min - 1);
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = __pyx_v_word_max; __pyx_t_10 > __pyx_t_9; __pyx_t_10-=1) {
    __pyx_v_l = __pyx_t_10;

    /* "pkuseg/feature_extractor.pyx":155
 *     for l in range(word_max, word_min - 1, -1):
 *         # "suffix excluding current c" wordary[n+1, n+l]
 *         tmp = get_slice_str(nodes, i + 1, l, length)             # <<<<<<<<<<<<<<
 *         if tmp in unigram:
 *             postlst_ex.append(tmp)
 */
    __pyx_t_1 = __pyx_f_6pkuseg_17feature_extractor_get_slice_str(__pyx_v_nodes, (__pyx_v_i + 1), __pyx_v_l, __pyx_v_length, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":156
 *         # "suffix excluding current c" wordary[n+1, n+l]
 *         tmp = get_slice_str(nodes, i + 1, l, length)
 *         if tmp in unigram:             # <<<<<<<<<<<<<<
 *             postlst_ex.append(tmp)
 *         else:
 */
    __pyx_t_5 = (__Pyx_PySet_ContainsTF(__pyx_v_tmp, __pyx_v_unigram, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 156, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pkuseg/feature_extractor.pyx":157
 *         tmp = get_slice_str(nodes, i + 1, l, length)
 *         if tmp in unigram:
 *             postlst_ex.append(tmp)             # <<<<<<<<<<<<<<
 *         else:
 *             postlst_ex.append("**noWord")
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_postlst_ex, __pyx_v_tmp); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 157, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":156
 *         # "suffix excluding current c" wordary[n+1, n+l]
 *         tmp = get_slice_str(nodes, i + 1, l, length)
 *         if tmp in unigram:             # <<<<<<<<<<<<<<
 *             postlst_ex.append(tmp)
 *         else:
 */
      goto __pyx_L29;
    }

    /* "pkuseg/feature_extractor.pyx":159
 *             postlst_ex.append(tmp)
 *         else:
 *             postlst_ex.append("**noWord")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_postlst_ex, __pyx_kp_u_noWord); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 159, __pyx_L1_error)
    }
    __pyx_L29:;
  }

  /* "pkuseg/feature_extractor.pyx":165
 *     # 2*(wordMax-wordMin+1)^2 (default: 2*(6-2+1)^2=50)
 * 
 *     for pre in prelst_ex:             # <<<<<<<<<<<<<<
 *         for post in postlst_in:
 *             feat = 'ww.l.' + pre + '*' + post
 */
  __pyx_t_1 = __pyx_v_prelst_ex; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 165, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_pre, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pkuseg/feature_extractor.pyx":166
 * 
 *     for pre in prelst_ex:
 *         for post in postlst_in:             # <<<<<<<<<<<<<<
 *             feat = 'ww.l.' + pre + '*' + post
 *             if feat in feature_to_idx:
 */
    __pyx_t_7 = __pyx_v_postlst_in; __Pyx_INCREF(__pyx_t_7); __pyx_t_11 = 0;
    for (;;) {
      if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_7)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_12 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_11); __Pyx_INCREF(__pyx_t_12); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 166, __pyx_L1_error)
      #else
      __pyx_t_12 = PySequence_ITEM(__pyx_t_7, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_post, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "pkuseg/feature_extractor.pyx":167
 *     for pre in prelst_ex:
 *         for post in postlst_in:
 *             feat = 'ww.l.' + pre + '*' + post             # <<<<<<<<<<<<<<
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]
 */
      __pyx_t_12 = PyNumber_Add(__pyx_kp_u_ww_l, __pyx_v_pre); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyNumber_Add(__pyx_t_12, __pyx_kp_u__3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyNumber_Add(__pyx_t_13, __pyx_v_post); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF_SET(__pyx_v_feat, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "pkuseg/feature_extractor.pyx":168
 *         for post in postlst_in:
 *             feat = 'ww.l.' + pre + '*' + post
 *             if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)
 */
      __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 168, __pyx_L1_error)
      __pyx_t_5 = (__pyx_t_6 != 0);
      if (__pyx_t_5) {

        /* "pkuseg/feature_extractor.pyx":169
 *             feat = 'ww.l.' + pre + '*' + post
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *                 flist.append(feature)
 * 
 */
        __pyx_t_12 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_12);
        __pyx_t_12 = 0;

        /* "pkuseg/feature_extractor.pyx":170
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 170, __pyx_L1_error)

        /* "pkuseg/feature_extractor.pyx":168
 *         for post in postlst_in:
 *             feat = 'ww.l.' + pre + '*' + post
 *             if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)
 */
      }

      /* "pkuseg/feature_extractor.pyx":166
 * 
 *     for pre in prelst_ex:
 *         for post in postlst_in:             # <<<<<<<<<<<<<<
 *             feat = 'ww.l.' + pre + '*' + post
 *             if feat in feature_to_idx:
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pkuseg/feature_extractor.pyx":165
 *     # 2*(wordMax-wordMin+1)^2 (default: 2*(6-2+1)^2=50)
 * 
 *     for pre in prelst_ex:             # <<<<<<<<<<<<<<
 *         for post in postlst_in:
 *             feat = 'ww.l.' + pre + '*' + post
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":173
 * 
 * 
 *     for pre in prelst_in:             # <<<<<<<<<<<<<<
 *         for post in postlst_ex:
 *             feat = 'ww.r.' + pre + '*' + post
 */
  __pyx_t_1 = __pyx_v_prelst_in; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 173, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_pre, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pkuseg/feature_extractor.pyx":174
 * 
 *     for pre in prelst_in:
 *         for post in postlst_ex:             # <<<<<<<<<<<<<<
 *             feat = 'ww.r.' + pre + '*' + post
 *             if feat in feature_to_idx:
 */
    __pyx_t_7 = __pyx_v_postlst_ex; __Pyx_INCREF(__pyx_t_7); __pyx_t_11 = 0;
    for (;;) {
      if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_7)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_12 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_11); __Pyx_INCREF(__pyx_t_12); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 174, __pyx_L1_error)
      #else
      __pyx_t_12 = PySequence_ITEM(__pyx_t_7, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_post, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "pkuseg/feature_extractor.pyx":175
 *     for pre in prelst_in:
 *         for post in postlst_ex:
 *             feat = 'ww.r.' + pre + '*' + post             # <<<<<<<<<<<<<<
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]
 */
      __pyx_t_12 = PyNumber_Add(__pyx_kp_u_ww_r, __pyx_v_pre); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyNumber_Add(__pyx_t_12, __pyx_kp_u__3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyNumber_Add(__pyx_t_13, __pyx_v_post); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF_SET(__pyx_v_feat, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "pkuseg/feature_extractor.pyx":176
 *         for post in postlst_ex:
 *             feat = 'ww.r.' + pre + '*' + post
 *             if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)
 */
      __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_feat, __pyx_v_feature_to_idx, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {

        /* "pkuseg/feature_extractor.pyx":177
 *             feat = 'ww.r.' + pre + '*' + post
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *                 flist.append(feature)
 * 
 */
        __pyx_t_12 = __Pyx_PyDict_GetItem(__pyx_v_feature_to_idx, __pyx_v_feat); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_12);
        __pyx_t_12 = 0;

        /* "pkuseg/feature_extractor.pyx":178
 *             if feat in feature_to_idx:
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_v_feature); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 178, __pyx_L1_error)

        /* "pkuseg/feature_extractor.pyx":176
 *         for post in postlst_ex:
 *             feat = 'ww.r.' + pre + '*' + post
 *             if feat in feature_to_idx:             # <<<<<<<<<<<<<<
 *                 feature = feature_to_idx[feat]
 *                 flist.append(feature)
 */
      }

      /* "pkuseg/feature_extractor.pyx":174
 * 
 *     for pre in prelst_in:
 *         for post in postlst_ex:             # <<<<<<<<<<<<<<
 *             feat = 'ww.r.' + pre + '*' + post
 *             if feat in feature_to_idx:
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pkuseg/feature_extractor.pyx":173
 * 
 * 
 *     for pre in prelst_in:             # <<<<<<<<<<<<<<
 *         for post in postlst_ex:
 *             feat = 'ww.r.' + pre + '*' + post
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":181
 * 
 * 
 *     return flist             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_flist);
  __pyx_r = __pyx_v_flist;
  goto __pyx_L0;

  /* "pkuseg/feature_extractor.pyx":29
 * @cython.wraparound(False)
 * @cython.nonecheck(False)
 * def __get_node_features_idx(object config not None, int idx, list nodes not None, dict feature_to_idx not None, set unigram not None):             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pkuseg.feature_extractor.__get_node_features_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_flist);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_feat);
  __Pyx_XDECREF(__pyx_v_feature);
  __Pyx_XDECREF(__pyx_v_prev_c);
  __Pyx_XDECREF(__pyx_v_next_c);
  __Pyx_XDECREF(__pyx_v_prepre_char);
  __Pyx_XDECREF(__pyx_v_prelst_in);
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XDECREF(__pyx_v_postlst_in);
  __Pyx_XDECREF(__pyx_v_prelst_ex);
  __Pyx_XDECREF(__pyx_v_postlst_ex);
  __Pyx_XDECREF(__pyx_v_pre);
  __Pyx_XDECREF(__pyx_v_post);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":196
 * 
 *     @classmethod
 *     def keyword_rename(cls, text):             # <<<<<<<<<<<<<<
 *         return text.translate(cls.keywords_translate_table)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_1keyword_rename(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_1keyword_rename = {"keyword_rename", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_1keyword_rename, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_1keyword_rename(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_text = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("keyword_rename (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,&__pyx_n_s_text,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cls)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("keyword_rename", 1, 2, 2, 1); __PYX_ERR(0, 196, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "keyword_rename") < 0)) __PYX_ERR(0, 196, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cls = values[0];
    __pyx_v_text = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("keyword_rename", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 196, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.keyword_rename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_keyword_rename(__pyx_self, __pyx_v_cls, __pyx_v_text);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_keyword_rename(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("keyword_rename", 0);

  /* "pkuseg/feature_extractor.pyx":197
 *     @classmethod
 *     def keyword_rename(cls, text):
 *         return text.translate(cls.keywords_translate_table)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_translate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_keywords_translate_table); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pkuseg/feature_extractor.pyx":196
 * 
 *     @classmethod
 *     def keyword_rename(cls, text):             # <<<<<<<<<<<<<<
 *         return text.translate(cls.keywords_translate_table)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.keyword_rename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":200
 * 
 *     @classmethod
 *     def _num_letter_normalize_char(cls, character):             # <<<<<<<<<<<<<<
 *         if character in cls.num:
 *             return "**Num"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_3_num_letter_normalize_char(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_3_num_letter_normalize_char = {"_num_letter_normalize_char", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_3_num_letter_normalize_char, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_3_num_letter_normalize_char(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_character = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_num_letter_normalize_char (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,&__pyx_n_s_character,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cls)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_character)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_num_letter_normalize_char", 1, 2, 2, 1); __PYX_ERR(0, 200, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_num_letter_normalize_char") < 0)) __PYX_ERR(0, 200, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cls = values[0];
    __pyx_v_character = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_num_letter_normalize_char", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 200, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor._num_letter_normalize_char", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_2_num_letter_normalize_char(__pyx_self, __pyx_v_cls, __pyx_v_character);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_2_num_letter_normalize_char(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_character) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_num_letter_normalize_char", 0);

  /* "pkuseg/feature_extractor.pyx":201
 *     @classmethod
 *     def _num_letter_normalize_char(cls, character):
 *         if character in cls.num:             # <<<<<<<<<<<<<<
 *             return "**Num"
 *         if character in cls.letter:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_character, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pkuseg/feature_extractor.pyx":202
 *     def _num_letter_normalize_char(cls, character):
 *         if character in cls.num:
 *             return "**Num"             # <<<<<<<<<<<<<<
 *         if character in cls.letter:
 *             return "**Letter"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_u_Num);
    __pyx_r = __pyx_kp_u_Num;
    goto __pyx_L0;

    /* "pkuseg/feature_extractor.pyx":201
 *     @classmethod
 *     def _num_letter_normalize_char(cls, character):
 *         if character in cls.num:             # <<<<<<<<<<<<<<
 *             return "**Num"
 *         if character in cls.letter:
 */
  }

  /* "pkuseg/feature_extractor.pyx":203
 *         if character in cls.num:
 *             return "**Num"
 *         if character in cls.letter:             # <<<<<<<<<<<<<<
 *             return "**Letter"
 *         return character
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_letter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_character, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "pkuseg/feature_extractor.pyx":204
 *             return "**Num"
 *         if character in cls.letter:
 *             return "**Letter"             # <<<<<<<<<<<<<<
 *         return character
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_u_Letter);
    __pyx_r = __pyx_kp_u_Letter;
    goto __pyx_L0;

    /* "pkuseg/feature_extractor.pyx":203
 *         if character in cls.num:
 *             return "**Num"
 *         if character in cls.letter:             # <<<<<<<<<<<<<<
 *             return "**Letter"
 *         return character
 */
  }

  /* "pkuseg/feature_extractor.pyx":205
 *         if character in cls.letter:
 *             return "**Letter"
 *         return character             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_character);
  __pyx_r = __pyx_v_character;
  goto __pyx_L0;

  /* "pkuseg/feature_extractor.pyx":200
 * 
 *     @classmethod
 *     def _num_letter_normalize_char(cls, character):             # <<<<<<<<<<<<<<
 *         if character in cls.num:
 *             return "**Num"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor._num_letter_normalize_char", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_6generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pkuseg/feature_extractor.pyx":208
 * 
 *     @classmethod
 *     def normalize_text(cls, text):             # <<<<<<<<<<<<<<
 *         text = cls.keyword_rename(text)
 *         for character in text:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_5normalize_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_5normalize_text = {"normalize_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_5normalize_text, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_5normalize_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_text = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,&__pyx_n_s_text,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cls)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("normalize_text", 1, 2, 2, 1); __PYX_ERR(0, 208, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "normalize_text") < 0)) __PYX_ERR(0, 208, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cls = values[0];
    __pyx_v_text = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normalize_text", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 208, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.normalize_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_4normalize_text(__pyx_self, __pyx_v_cls, __pyx_v_text);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_4normalize_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_text) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalize_text", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text *)__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text(__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 208, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_cls = __pyx_v_cls;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_cls);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_cls);
  __pyx_cur_scope->__pyx_v_text = __pyx_v_text;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_text);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_text);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_6generator, __pyx_codeobj__4, (PyObject *) __pyx_cur_scope, __pyx_n_s_normalize_text, __pyx_n_s_FeatureExtractor_normalize_text, __pyx_n_s_pkuseg_feature_extractor); if (unlikely(!gen)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.normalize_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_6generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text *__pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize_text", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    case 2: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 208, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":209
 *     @classmethod
 *     def normalize_text(cls, text):
 *         text = cls.keyword_rename(text)             # <<<<<<<<<<<<<<
 *         for character in text:
 *             if config.numLetterNorm:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_cls, __pyx_n_s_keyword_rename); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_cur_scope->__pyx_v_text) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_v_text);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_text);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_text, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":210
 *     def normalize_text(cls, text):
 *         text = cls.keyword_rename(text)
 *         for character in text:             # <<<<<<<<<<<<<<
 *             if config.numLetterNorm:
 *                 yield cls._num_letter_normalize_char(character)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_text)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_text)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_text; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 210, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 210, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 210, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 210, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_character);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_character, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pkuseg/feature_extractor.pyx":211
 *         text = cls.keyword_rename(text)
 *         for character in text:
 *             if config.numLetterNorm:             # <<<<<<<<<<<<<<
 *                 yield cls._num_letter_normalize_char(character)
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_numLetterNorm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_6) {

      /* "pkuseg/feature_extractor.pyx":212
 *         for character in text:
 *             if config.numLetterNorm:
 *                 yield cls._num_letter_normalize_char(character)             # <<<<<<<<<<<<<<
 *             else:
 *                 yield character
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_cls, __pyx_n_s_num_letter_normalize_char); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_cur_scope->__pyx_v_character) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_v_character);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 212, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":211
 *         text = cls.keyword_rename(text)
 *         for character in text:
 *             if config.numLetterNorm:             # <<<<<<<<<<<<<<
 *                 yield cls._num_letter_normalize_char(character)
 *             else:
 */
      goto __pyx_L6;
    }

    /* "pkuseg/feature_extractor.pyx":214
 *                 yield cls._num_letter_normalize_char(character)
 *             else:
 *                 yield character             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_character);
      __pyx_r = __pyx_cur_scope->__pyx_v_character;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L8_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 214, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "pkuseg/feature_extractor.pyx":210
 *     def normalize_text(cls, text):
 *         text = cls.keyword_rename(text)
 *         for character in text:             # <<<<<<<<<<<<<<
 *             if config.numLetterNorm:
 *                 yield cls._num_letter_normalize_char(character)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "pkuseg/feature_extractor.pyx":208
 * 
 *     @classmethod
 *     def normalize_text(cls, text):             # <<<<<<<<<<<<<<
 *         text = cls.keyword_rename(text)
 *         for character in text:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("normalize_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":217
 * 
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.unigram = set()  # type: Set[str]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_8__init__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_8__init__ = {"__init__", (PyCFunction)__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_8__init__, METH_O, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_8__init__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_7__init__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_7__init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pkuseg/feature_extractor.pyx":219
 *     def __init__(self):
 * 
 *         self.unigram = set()  # type: Set[str]             # <<<<<<<<<<<<<<
 *         self.bigram = set()  # type: Set[str]
 *         self.feature_to_idx = {}  # type: Dict[str, int]
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_unigram, __pyx_t_1) < 0) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":220
 * 
 *         self.unigram = set()  # type: Set[str]
 *         self.bigram = set()  # type: Set[str]             # <<<<<<<<<<<<<<
 *         self.feature_to_idx = {}  # type: Dict[str, int]
 *         self.tag_to_idx = {}  # type: Dict[str, int]
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_bigram, __pyx_t_1) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":221
 *         self.unigram = set()  # type: Set[str]
 *         self.bigram = set()  # type: Set[str]
 *         self.feature_to_idx = {}  # type: Dict[str, int]             # <<<<<<<<<<<<<<
 *         self.tag_to_idx = {}  # type: Dict[str, int]
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_feature_to_idx, __pyx_t_1) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":222
 *         self.bigram = set()  # type: Set[str]
 *         self.feature_to_idx = {}  # type: Dict[str, int]
 *         self.tag_to_idx = {}  # type: Dict[str, int]             # <<<<<<<<<<<<<<
 * 
 *     def build(self, train_file):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_tag_to_idx, __pyx_t_1) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":217
 * 
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.unigram = set()  # type: Set[str]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":224
 *         self.tag_to_idx = {}  # type: Dict[str, int]
 * 
 *     def build(self, train_file):             # <<<<<<<<<<<<<<
 *         with open(train_file, "r", encoding="utf8") as reader:
 *             lines = reader.readlines()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_10build(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_10build = {"build", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_10build, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_10build(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_train_file = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_train_file,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_train_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("build", 1, 2, 2, 1); __PYX_ERR(0, 224, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "build") < 0)) __PYX_ERR(0, 224, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_train_file = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("build", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 224, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_9build(__pyx_self, __pyx_v_self, __pyx_v_train_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pkuseg/feature_extractor.pyx":245
 * 
 *             word_length_info.update(map(len, words))
 *             specials.update(word for word in words if len(word)>=10)             # <<<<<<<<<<<<<<
 *             self.unigram.update(words)
 * 
 */

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_5build_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr *)__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr(__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 245, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_2generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_FeatureExtractor_build_locals_ge, __pyx_n_s_pkuseg_feature_extractor); if (unlikely(!gen)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.build.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 245, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_words)) { __Pyx_RaiseClosureNameError("words"); __PYX_ERR(0, 245, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_words == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 245, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_words; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 245, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_word);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_word, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = PyObject_Length(__pyx_cur_scope->__pyx_v_word); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 245, __pyx_L1_error)
    __pyx_t_5 = ((__pyx_t_4 >= 10) != 0);
    if (__pyx_t_5) {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_word);
      __pyx_r = __pyx_cur_scope->__pyx_v_word;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 245, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_5generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pkuseg/feature_extractor.pyx":270
 *                 node_features = self.get_node_features(i, example)
 *                 feature_freq.update(
 *                     feature for feature in node_features if feature != "/"             # <<<<<<<<<<<<<<
 *                 )
 * 
 */

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_5build_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr *)__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr(__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 270, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_5generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_FeatureExtractor_build_locals_ge, __pyx_n_s_pkuseg_feature_extractor); if (unlikely(!gen)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.build.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_5generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 270, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_node_features)) { __Pyx_RaiseClosureNameError("node_features"); __PYX_ERR(0, 270, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_node_features)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_node_features)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_node_features; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_node_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 270, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 270, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 270, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 270, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 270, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_feature);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_feature, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_cur_scope->__pyx_v_feature, __pyx_kp_u__5, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 270, __pyx_L1_error)
    if (__pyx_t_5) {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_feature);
      __pyx_r = __pyx_cur_scope->__pyx_v_feature;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 270, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_8generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pkuseg/feature_extractor.pyx":274
 * 
 *         feature_set = (
 *             feature             # <<<<<<<<<<<<<<
 *             for feature, freq in feature_freq.most_common()
 *             if freq > config.featureTrim
 */

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_5build_6genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr *)__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr(__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 274, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_8generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_FeatureExtractor_build_locals_ge, __pyx_n_s_pkuseg_feature_extractor); if (unlikely(!gen)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.build.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_8generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 274, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":275
 *         feature_set = (
 *             feature
 *             for feature, freq in feature_freq.most_common()             # <<<<<<<<<<<<<<
 *             if freq > config.featureTrim
 *         )
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_feature_freq)) { __Pyx_RaiseClosureNameError("feature_freq"); __PYX_ERR(0, 275, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_feature_freq, __pyx_n_s_most_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 275, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 275, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 275, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 275, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 275, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 275, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 275, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_feature);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_feature, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_freq);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_freq, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "pkuseg/feature_extractor.pyx":276
 *             feature
 *             for feature, freq in feature_freq.most_common()
 *             if freq > config.featureTrim             # <<<<<<<<<<<<<<
 *         )
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_config); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_featureTrim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_freq, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {

      /* "pkuseg/feature_extractor.pyx":274
 * 
 *         feature_set = (
 *             feature             # <<<<<<<<<<<<<<
 *             for feature, freq in feature_freq.most_common()
 *             if freq > config.featureTrim
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_feature);
      __pyx_r = __pyx_cur_scope->__pyx_v_feature;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L9_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 274, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":276
 *             feature
 *             for feature, freq in feature_freq.most_common()
 *             if freq > config.featureTrim             # <<<<<<<<<<<<<<
 *         )
 * 
 */
    }

    /* "pkuseg/feature_extractor.pyx":275
 *         feature_set = (
 *             feature
 *             for feature, freq in feature_freq.most_common()             # <<<<<<<<<<<<<<
 *             if freq > config.featureTrim
 *         )
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "pkuseg/feature_extractor.pyx":274
 * 
 *         feature_set = (
 *             feature             # <<<<<<<<<<<<<<
 *             for feature, freq in feature_freq.most_common()
 *             if freq > config.featureTrim
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":224
 *         self.tag_to_idx = {}  # type: Dict[str, int]
 * 
 *     def build(self, train_file):             # <<<<<<<<<<<<<<
 *         with open(train_file, "r", encoding="utf8") as reader:
 *             lines = reader.readlines()
 */

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_9build(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_train_file) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *__pyx_cur_scope;
  PyObject *__pyx_v_reader = NULL;
  PyObject *__pyx_v_lines = NULL;
  PyObject *__pyx_v_examples = NULL;
  PyObject *__pyx_v_word_length_info = NULL;
  PyObject *__pyx_v_specials = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_pre = NULL;
  PyObject *__pyx_v_suf = NULL;
  PyObject *__pyx_v_example = NULL;
  PyObject *__pyx_v_max_word_length = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_v_i = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_feature_set = NULL;
  Py_ssize_t __pyx_v_tot;
  PyObject *__pyx_v_feature = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_B_single = NULL;
  PyObject *__pyx_v_I_first = NULL;
  PyObject *__pyx_v_I = NULL;
  PyObject *__pyx_v_I_end = NULL;
  PyObject *__pyx_v_tag_set = NULL;
  PyObject *__pyx_7genexpr__pyx_v_word = NULL;
  PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_2generator1 = 0;
  PyObject *__pyx_8genexpr2__pyx_v_word = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_character = NULL;
  PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_5generator2 = 0;
  PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_8generator3 = 0;
  PyObject *__pyx_8genexpr5__pyx_v_idx = NULL;
  PyObject *__pyx_8genexpr5__pyx_v_tag = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  PyObject *__pyx_t_17 = NULL;
  PyObject *(*__pyx_t_18)(PyObject *);
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  Py_ssize_t __pyx_t_22;
  int __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("build", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *)__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_1_build(__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_1_build, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 224, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "pkuseg/feature_extractor.pyx":225
 * 
 *     def build(self, train_file):
 *         with open(train_file, "r", encoding="utf8") as reader:             # <<<<<<<<<<<<<<
 *             lines = reader.readlines()
 * 
 */
  /*with:*/ {
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_train_file);
    __Pyx_GIVEREF(__pyx_v_train_file);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_train_file);
    __Pyx_INCREF(__pyx_n_u_r);
    __Pyx_GIVEREF(__pyx_n_u_r);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_r);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {
          __pyx_v_reader = __pyx_t_1;
          __pyx_t_1 = 0;

          /* "pkuseg/feature_extractor.pyx":226
 *     def build(self, train_file):
 *         with open(train_file, "r", encoding="utf8") as reader:
 *             lines = reader.readlines()             # <<<<<<<<<<<<<<
 * 
 *         examples = []  # type: List[List[List[str]]]
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_readlines); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 226, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_lines = __pyx_t_1;
          __pyx_t_1 = 0;

          /* "pkuseg/feature_extractor.pyx":225
 * 
 *     def build(self, train_file):
 *         with open(train_file, "r", encoding="utf8") as reader:             # <<<<<<<<<<<<<<
 *             lines = reader.readlines()
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_3, &__pyx_t_2) < 0) __PYX_ERR(0, 225, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 225, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 225, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_10 < 0) __PYX_ERR(0, 225, __pyx_L9_except_error)
          __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_2);
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_3, __pyx_t_2);
            __pyx_t_1 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; 
            __PYX_ERR(0, 225, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_4) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__6, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 225, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L16;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L1_error;
    __pyx_L16:;
  }

  /* "pkuseg/feature_extractor.pyx":228
 *             lines = reader.readlines()
 * 
 *         examples = []  # type: List[List[List[str]]]             # <<<<<<<<<<<<<<
 * 
 *         # first pass to collect unigram and bigram and tag info
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_examples = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":231
 * 
 *         # first pass to collect unigram and bigram and tag info
 *         word_length_info = Counter()             # <<<<<<<<<<<<<<
 *         specials = set()
 *         for line in lines:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Counter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_word_length_info = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":232
 *         # first pass to collect unigram and bigram and tag info
 *         word_length_info = Counter()
 *         specials = set()             # <<<<<<<<<<<<<<
 *         for line in lines:
 *             line = line.strip("\n\r")  # .replace("\t", " ")
 */
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_specials = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":233
 *         word_length_info = Counter()
 *         specials = set()
 *         for line in lines:             # <<<<<<<<<<<<<<
 *             line = line.strip("\n\r")  # .replace("\t", " ")
 *             if not line:
 */
  if (unlikely(!__pyx_v_lines)) { __Pyx_RaiseUnboundLocalError("lines"); __PYX_ERR(0, 233, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_v_lines)) || PyTuple_CheckExact(__pyx_v_lines)) {
    __pyx_t_2 = __pyx_v_lines; __Pyx_INCREF(__pyx_t_2); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_lines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 233, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 233, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 233, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 233, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 233, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_13(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 233, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":234
 *         specials = set()
 *         for line in lines:
 *             line = line.strip("\n\r")  # .replace("\t", " ")             # <<<<<<<<<<<<<<
 *             if not line:
 *                 continue
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_u__7) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u__7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":235
 *         for line in lines:
 *             line = line.strip("\n\r")  # .replace("\t", " ")
 *             if not line:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_line); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 235, __pyx_L1_error)
    __pyx_t_10 = ((!__pyx_t_11) != 0);
    if (__pyx_t_10) {

      /* "pkuseg/feature_extractor.pyx":236
 *             line = line.strip("\n\r")  # .replace("\t", " ")
 *             if not line:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             line = self.keyword_rename(line)
 */
      goto __pyx_L17_continue;

      /* "pkuseg/feature_extractor.pyx":235
 *         for line in lines:
 *             line = line.strip("\n\r")  # .replace("\t", " ")
 *             if not line:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "pkuseg/feature_extractor.pyx":238
 *                 continue
 * 
 *             line = self.keyword_rename(line)             # <<<<<<<<<<<<<<
 * 
 *             # str.split() without sep sees consecutive whiltespaces as one separator
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_keyword_rename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v_line) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_line);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":242
 *             # str.split() without sep sees consecutive whiltespaces as one separator
 *             # e.g., '\ra \tb \r\n'.split() = ['a', 'b']
 *             words = [word for word in line.split()]             # <<<<<<<<<<<<<<
 * 
 *             word_length_info.update(map(len, words))
 */
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L22_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 242, __pyx_L22_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L22_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_15 = 0;
        __pyx_t_16 = NULL;
      } else {
        __pyx_t_15 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 242, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_16 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 242, __pyx_L22_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_16)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 242, __pyx_L22_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 242, __pyx_L22_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_16(__pyx_t_5);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 242, __pyx_L22_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_word, __pyx_t_1);
        __pyx_t_1 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_7genexpr__pyx_v_word))) __PYX_ERR(0, 242, __pyx_L22_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_word); __pyx_7genexpr__pyx_v_word = 0;
      goto __pyx_L25_exit_scope;
      __pyx_L22_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_word); __pyx_7genexpr__pyx_v_word = 0;
      goto __pyx_L1_error;
      __pyx_L25_exit_scope:;
    } /* exit inner scope */
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_words);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_words, ((PyObject*)__pyx_t_3));
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":244
 *             words = [word for word in line.split()]
 * 
 *             word_length_info.update(map(len, words))             # <<<<<<<<<<<<<<
 *             specials.update(word for word in words if len(word)>=10)
 *             self.unigram.update(words)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_word_length_info, __pyx_n_s_update); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_GetBuiltinName(__pyx_n_s_len); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_words);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_words);
    PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_cur_scope->__pyx_v_words);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_14, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":245
 * 
 *             word_length_info.update(map(len, words))
 *             specials.update(word for word in words if len(word)>=10)             # <<<<<<<<<<<<<<
 *             self.unigram.update(words)
 * 
 */
    __pyx_t_3 = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_5build_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_v_specials, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":246
 *             word_length_info.update(map(len, words))
 *             specials.update(word for word in words if len(word)>=10)
 *             self.unigram.update(words)             # <<<<<<<<<<<<<<
 * 
 *             for pre, suf in zip(words[:-1], words[1:]):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_unigram); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_update); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_cur_scope->__pyx_v_words) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_cur_scope->__pyx_v_words);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":248
 *             self.unigram.update(words)
 * 
 *             for pre, suf in zip(words[:-1], words[1:]):             # <<<<<<<<<<<<<<
 *                 self.bigram.add("{}*{}".format(pre, suf))
 * 
 */
    __pyx_t_5 = __Pyx_PyList_GetSlice(__pyx_cur_scope->__pyx_v_words, 0, -1L); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyList_GetSlice(__pyx_cur_scope->__pyx_v_words, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_15 = 0;
      __pyx_t_16 = NULL;
    } else {
      __pyx_t_15 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_16 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 248, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_16)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 248, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 248, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_16(__pyx_t_3);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 248, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 248, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_14);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_17 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_18 = Py_TYPE(__pyx_t_17)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_18(__pyx_t_17); if (unlikely(!__pyx_t_5)) goto __pyx_L28_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_14 = __pyx_t_18(__pyx_t_17); if (unlikely(!__pyx_t_14)) goto __pyx_L28_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_14);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_17), 2) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
        __pyx_t_18 = NULL;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        goto __pyx_L29_unpacking_done;
        __pyx_L28_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_18 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 248, __pyx_L1_error)
        __pyx_L29_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_pre, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_suf, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "pkuseg/feature_extractor.pyx":249
 * 
 *             for pre, suf in zip(words[:-1], words[1:]):
 *                 self.bigram.add("{}*{}".format(pre, suf))             # <<<<<<<<<<<<<<
 * 
 *             example = [
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bigram); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u__8, __pyx_n_s_format); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_19 = NULL;
      __pyx_t_20 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
        __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_17);
        if (likely(__pyx_t_19)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_19);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_17, function);
          __pyx_t_20 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_17)) {
        PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_v_pre, __pyx_v_suf};
        __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 249, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_GOTREF(__pyx_t_14);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
        PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_v_pre, __pyx_v_suf};
        __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 249, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_GOTREF(__pyx_t_14);
      } else
      #endif
      {
        __pyx_t_21 = PyTuple_New(2+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 249, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        if (__pyx_t_19) {
          __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
        }
        __Pyx_INCREF(__pyx_v_pre);
        __Pyx_GIVEREF(__pyx_v_pre);
        PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_v_pre);
        __Pyx_INCREF(__pyx_v_suf);
        __Pyx_GIVEREF(__pyx_v_suf);
        PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_v_suf);
        __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_21, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 249, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      }
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_17, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pkuseg/feature_extractor.pyx":248
 *             self.unigram.update(words)
 * 
 *             for pre, suf in zip(words[:-1], words[1:]):             # <<<<<<<<<<<<<<
 *                 self.bigram.add("{}*{}".format(pre, suf))
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":251
 *                 self.bigram.add("{}*{}".format(pre, suf))
 * 
 *             example = [             # <<<<<<<<<<<<<<
 *                 self._num_letter_normalize_char(character)
 *                 for word in words
 */
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L32_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "pkuseg/feature_extractor.pyx":253
 *             example = [
 *                 self._num_letter_normalize_char(character)
 *                 for word in words             # <<<<<<<<<<<<<<
 *                 for character in word
 *             ]
 */
      __pyx_t_1 = __pyx_cur_scope->__pyx_v_words; __Pyx_INCREF(__pyx_t_1); __pyx_t_15 = 0;
      for (;;) {
        if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_15); __Pyx_INCREF(__pyx_t_5); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 253, __pyx_L32_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 253, __pyx_L32_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_word, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "pkuseg/feature_extractor.pyx":254
 *                 self._num_letter_normalize_char(character)
 *                 for word in words
 *                 for character in word             # <<<<<<<<<<<<<<
 *             ]
 *             examples.append(example)
 */
        if (likely(PyList_CheckExact(__pyx_8genexpr2__pyx_v_word)) || PyTuple_CheckExact(__pyx_8genexpr2__pyx_v_word)) {
          __pyx_t_5 = __pyx_8genexpr2__pyx_v_word; __Pyx_INCREF(__pyx_t_5); __pyx_t_22 = 0;
          __pyx_t_16 = NULL;
        } else {
          __pyx_t_22 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_8genexpr2__pyx_v_word); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 254, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_16 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 254, __pyx_L32_error)
        }
        for (;;) {
          if (likely(!__pyx_t_16)) {
            if (likely(PyList_CheckExact(__pyx_t_5))) {
              if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_14 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_22); __Pyx_INCREF(__pyx_t_14); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 254, __pyx_L32_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_5, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 254, __pyx_L32_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            } else {
              if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_22); __Pyx_INCREF(__pyx_t_14); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 254, __pyx_L32_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_5, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 254, __pyx_L32_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            }
          } else {
            __pyx_t_14 = __pyx_t_16(__pyx_t_5);
            if (unlikely(!__pyx_t_14)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 254, __pyx_L32_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_14);
          }
          __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_character, __pyx_t_14);
          __pyx_t_14 = 0;

          /* "pkuseg/feature_extractor.pyx":252
 * 
 *             example = [
 *                 self._num_letter_normalize_char(character)             # <<<<<<<<<<<<<<
 *                 for word in words
 *                 for character in word
 */
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_num_letter_normalize_char); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 252, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_21 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_21)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_21);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
            }
          }
          __pyx_t_14 = (__pyx_t_21) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_21, __pyx_8genexpr2__pyx_v_character) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_8genexpr2__pyx_v_character);
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 252, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_14))) __PYX_ERR(0, 251, __pyx_L32_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "pkuseg/feature_extractor.pyx":254
 *                 self._num_letter_normalize_char(character)
 *                 for word in words
 *                 for character in word             # <<<<<<<<<<<<<<
 *             ]
 *             examples.append(example)
 */
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "pkuseg/feature_extractor.pyx":253
 *             example = [
 *                 self._num_letter_normalize_char(character)
 *                 for word in words             # <<<<<<<<<<<<<<
 *                 for character in word
 *             ]
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_character); __pyx_8genexpr2__pyx_v_character = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_word); __pyx_8genexpr2__pyx_v_word = 0;
      goto __pyx_L37_exit_scope;
      __pyx_L32_error:;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_character); __pyx_8genexpr2__pyx_v_character = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_word); __pyx_8genexpr2__pyx_v_word = 0;
      goto __pyx_L1_error;
      __pyx_L37_exit_scope:;
    } /* exit inner scope */
    __Pyx_XDECREF_SET(__pyx_v_example, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":256
 *                 for character in word
 *             ]
 *             examples.append(example)             # <<<<<<<<<<<<<<
 * 
 *         max_word_length = max(word_length_info.keys())
 */
    __pyx_t_23 = __Pyx_PyList_Append(__pyx_v_examples, __pyx_v_example); if (unlikely(__pyx_t_23 == ((int)-1))) __PYX_ERR(0, 256, __pyx_L1_error)

    /* "pkuseg/feature_extractor.pyx":233
 *         word_length_info = Counter()
 *         specials = set()
 *         for line in lines:             # <<<<<<<<<<<<<<
 *             line = line.strip("\n\r")  # .replace("\t", " ")
 *             if not line:
 */
    __pyx_L17_continue:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":258
 *             examples.append(example)
 * 
 *         max_word_length = max(word_length_info.keys())             # <<<<<<<<<<<<<<
 *         for length in range(1, max_word_length + 1):
 *             print("length = {} : {}".format(length, word_length_info[length]))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_word_length_info, __pyx_n_s_keys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_max_word_length = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pkuseg/feature_extractor.pyx":259
 * 
 *         max_word_length = max(word_length_info.keys())
 *         for length in range(1, max_word_length + 1):             # <<<<<<<<<<<<<<
 *             print("length = {} : {}".format(length, word_length_info[length]))
 *         # print('special words: {}'.format(', '.join(specials)))
 */
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_max_word_length, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 259, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_13(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 259, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":260
 *         max_word_length = max(word_length_info.keys())
 *         for length in range(1, max_word_length + 1):
 *             print("length = {} : {}".format(length, word_length_info[length]))             # <<<<<<<<<<<<<<
 *         # print('special words: {}'.format(', '.join(specials)))
 *         # second pass to get features
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_length_2, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_word_length_info, __pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = NULL;
    __pyx_t_20 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_20 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_v_length, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_v_length, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_17 = PyTuple_New(2+__pyx_t_20); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      if (__pyx_t_14) {
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_14); __pyx_t_14 = NULL;
      }
      __Pyx_INCREF(__pyx_v_length);
      __Pyx_GIVEREF(__pyx_v_length);
      PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_20, __pyx_v_length);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_20, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":259
 * 
 *         max_word_length = max(word_length_info.keys())
 *         for length in range(1, max_word_length + 1):             # <<<<<<<<<<<<<<
 *             print("length = {} : {}".format(length, word_length_info[length]))
 *         # print('special words: {}'.format(', '.join(specials)))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":264
 *         # second pass to get features
 * 
 *         feature_freq = Counter()             # <<<<<<<<<<<<<<
 * 
 *         for example in examples:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_feature_freq = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":266
 *         feature_freq = Counter()
 * 
 *         for example in examples:             # <<<<<<<<<<<<<<
 *             for i, _ in enumerate(example):
 *                 node_features = self.get_node_features(i, example)
 */
  __pyx_t_2 = __pyx_v_examples; __Pyx_INCREF(__pyx_t_2); __pyx_t_12 = 0;
  for (;;) {
    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 266, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_example, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":267
 * 
 *         for example in examples:
 *             for i, _ in enumerate(example):             # <<<<<<<<<<<<<<
 *                 node_features = self.get_node_features(i, example)
 *                 feature_freq.update(
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_1 = __pyx_int_0;
    if (likely(PyList_CheckExact(__pyx_v_example)) || PyTuple_CheckExact(__pyx_v_example)) {
      __pyx_t_3 = __pyx_v_example; __Pyx_INCREF(__pyx_t_3); __pyx_t_15 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_15 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_example); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 267, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_17 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_15); __Pyx_INCREF(__pyx_t_17); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
          #else
          __pyx_t_17 = PySequence_ITEM(__pyx_t_3, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 267, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          #endif
        } else {
          if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_17 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_15); __Pyx_INCREF(__pyx_t_17); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
          #else
          __pyx_t_17 = PySequence_ITEM(__pyx_t_3, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 267, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          #endif
        }
      } else {
        __pyx_t_17 = __pyx_t_13(__pyx_t_3);
        if (unlikely(!__pyx_t_17)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 267, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_17);
      }
      __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_17);
      __pyx_t_17 = 0;
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
      __pyx_t_17 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_1);
      __pyx_t_1 = __pyx_t_17;
      __pyx_t_17 = 0;

      /* "pkuseg/feature_extractor.pyx":268
 *         for example in examples:
 *             for i, _ in enumerate(example):
 *                 node_features = self.get_node_features(i, example)             # <<<<<<<<<<<<<<
 *                 feature_freq.update(
 *                     feature for feature in node_features if feature != "/"
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_node_features); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = NULL;
      __pyx_t_20 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_20 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_v_i, __pyx_v_example};
        __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 268, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_17);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_v_i, __pyx_v_example};
        __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 268, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_17);
      } else
      #endif
      {
        __pyx_t_21 = PyTuple_New(2+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 268, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        if (__pyx_t_14) {
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_14); __pyx_t_14 = NULL;
        }
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_v_i);
        __Pyx_INCREF(__pyx_v_example);
        __Pyx_GIVEREF(__pyx_v_example);
        PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_v_example);
        __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_21, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 268, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_node_features);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_node_features, __pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_17);
      __pyx_t_17 = 0;

      /* "pkuseg/feature_extractor.pyx":269
 *             for i, _ in enumerate(example):
 *                 node_features = self.get_node_features(i, example)
 *                 feature_freq.update(             # <<<<<<<<<<<<<<
 *                     feature for feature in node_features if feature != "/"
 *                 )
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_feature_freq, __pyx_n_s_update); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "pkuseg/feature_extractor.pyx":270
 *                 node_features = self.get_node_features(i, example)
 *                 feature_freq.update(
 *                     feature for feature in node_features if feature != "/"             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
      __pyx_t_21 = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_5build_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_14 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_17 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_14, __pyx_t_21) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_21);
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

      /* "pkuseg/feature_extractor.pyx":267
 * 
 *         for example in examples:
 *             for i, _ in enumerate(example):             # <<<<<<<<<<<<<<
 *                 node_features = self.get_node_features(i, example)
 *                 feature_freq.update(
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":266
 *         feature_freq = Counter()
 * 
 *         for example in examples:             # <<<<<<<<<<<<<<
 *             for i, _ in enumerate(example):
 *                 node_features = self.get_node_features(i, example)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":274
 * 
 *         feature_set = (
 *             feature             # <<<<<<<<<<<<<<
 *             for feature, freq in feature_freq.most_common()
 *             if freq > config.featureTrim
 */
  __pyx_t_2 = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_5build_6genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_feature_set = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":279
 *         )
 * 
 *         tot = len(self.feature_to_idx)             # <<<<<<<<<<<<<<
 *         for feature in feature_set:
 *             if not feature in self.feature_to_idx:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feature_to_idx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_12 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_tot = __pyx_t_12;

  /* "pkuseg/feature_extractor.pyx":280
 * 
 *         tot = len(self.feature_to_idx)
 *         for feature in feature_set:             # <<<<<<<<<<<<<<
 *             if not feature in self.feature_to_idx:
 *                 self.feature_to_idx[feature] = tot
 */
  if (likely(PyList_CheckExact(__pyx_v_feature_set)) || PyTuple_CheckExact(__pyx_v_feature_set)) {
    __pyx_t_2 = __pyx_v_feature_set; __Pyx_INCREF(__pyx_t_2); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_feature_set); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 280, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 280, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 280, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_13(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 280, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pkuseg/feature_extractor.pyx":281
 *         tot = len(self.feature_to_idx)
 *         for feature in feature_set:
 *             if not feature in self.feature_to_idx:             # <<<<<<<<<<<<<<
 *                 self.feature_to_idx[feature] = tot
 *                 tot += 1
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feature_to_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_v_feature, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "pkuseg/feature_extractor.pyx":282
 *         for feature in feature_set:
 *             if not feature in self.feature_to_idx:
 *                 self.feature_to_idx[feature] = tot             # <<<<<<<<<<<<<<
 *                 tot += 1
 *         # self.feature_to_idx = {
 */
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_tot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feature_to_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(PyObject_SetItem(__pyx_t_3, __pyx_v_feature, __pyx_t_1) < 0)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pkuseg/feature_extractor.pyx":283
 *             if not feature in self.feature_to_idx:
 *                 self.feature_to_idx[feature] = tot
 *                 tot += 1             # <<<<<<<<<<<<<<
 *         # self.feature_to_idx = {
 *         #     feature: idx for idx, feature in enumerate(feature_set)
 */
      __pyx_v_tot = (__pyx_v_tot + 1);

      /* "pkuseg/feature_extractor.pyx":281
 *         tot = len(self.feature_to_idx)
 *         for feature in feature_set:
 *             if not feature in self.feature_to_idx:             # <<<<<<<<<<<<<<
 *                 self.feature_to_idx[feature] = tot
 *                 tot += 1
 */
    }

    /* "pkuseg/feature_extractor.pyx":280
 * 
 *         tot = len(self.feature_to_idx)
 *         for feature in feature_set:             # <<<<<<<<<<<<<<
 *             if not feature in self.feature_to_idx:
 *                 self.feature_to_idx[feature] = tot
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":288
 *         # }
 * 
 *         if config.nLabel == 2:             # <<<<<<<<<<<<<<
 *             B = B_single = "B"
 *             I_first = I = I_end = "I"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_nLabel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_11) {

    /* "pkuseg/feature_extractor.pyx":289
 * 
 *         if config.nLabel == 2:
 *             B = B_single = "B"             # <<<<<<<<<<<<<<
 *             I_first = I = I_end = "I"
 *         elif config.nLabel == 3:
 */
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B = __pyx_n_u_B;
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B_single = __pyx_n_u_B;

    /* "pkuseg/feature_extractor.pyx":290
 *         if config.nLabel == 2:
 *             B = B_single = "B"
 *             I_first = I = I_end = "I"             # <<<<<<<<<<<<<<
 *         elif config.nLabel == 3:
 *             B = B_single = "B"
 */
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I_first = __pyx_n_u_I;
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I = __pyx_n_u_I;
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I_end = __pyx_n_u_I;

    /* "pkuseg/feature_extractor.pyx":288
 *         # }
 * 
 *         if config.nLabel == 2:             # <<<<<<<<<<<<<<
 *             B = B_single = "B"
 *             I_first = I = I_end = "I"
 */
    goto __pyx_L47;
  }

  /* "pkuseg/feature_extractor.pyx":291
 *             B = B_single = "B"
 *             I_first = I = I_end = "I"
 *         elif config.nLabel == 3:             # <<<<<<<<<<<<<<
 *             B = B_single = "B"
 *             I_first = I = "I"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_nLabel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_11) {

    /* "pkuseg/feature_extractor.pyx":292
 *             I_first = I = I_end = "I"
 *         elif config.nLabel == 3:
 *             B = B_single = "B"             # <<<<<<<<<<<<<<
 *             I_first = I = "I"
 *             I_end = "I_end"
 */
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B = __pyx_n_u_B;
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B_single = __pyx_n_u_B;

    /* "pkuseg/feature_extractor.pyx":293
 *         elif config.nLabel == 3:
 *             B = B_single = "B"
 *             I_first = I = "I"             # <<<<<<<<<<<<<<
 *             I_end = "I_end"
 *         elif config.nLabel == 4:
 */
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I_first = __pyx_n_u_I;
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I = __pyx_n_u_I;

    /* "pkuseg/feature_extractor.pyx":294
 *             B = B_single = "B"
 *             I_first = I = "I"
 *             I_end = "I_end"             # <<<<<<<<<<<<<<
 *         elif config.nLabel == 4:
 *             B = "B"
 */
    __Pyx_INCREF(__pyx_n_u_I_end);
    __pyx_v_I_end = __pyx_n_u_I_end;

    /* "pkuseg/feature_extractor.pyx":291
 *             B = B_single = "B"
 *             I_first = I = I_end = "I"
 *         elif config.nLabel == 3:             # <<<<<<<<<<<<<<
 *             B = B_single = "B"
 *             I_first = I = "I"
 */
    goto __pyx_L47;
  }

  /* "pkuseg/feature_extractor.pyx":295
 *             I_first = I = "I"
 *             I_end = "I_end"
 *         elif config.nLabel == 4:             # <<<<<<<<<<<<<<
 *             B = "B"
 *             B_single = "B_single"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_nLabel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_11) {

    /* "pkuseg/feature_extractor.pyx":296
 *             I_end = "I_end"
 *         elif config.nLabel == 4:
 *             B = "B"             # <<<<<<<<<<<<<<
 *             B_single = "B_single"
 *             I_first = I = "I"
 */
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B = __pyx_n_u_B;

    /* "pkuseg/feature_extractor.pyx":297
 *         elif config.nLabel == 4:
 *             B = "B"
 *             B_single = "B_single"             # <<<<<<<<<<<<<<
 *             I_first = I = "I"
 *             I_end = "I_end"
 */
    __Pyx_INCREF(__pyx_n_u_B_single);
    __pyx_v_B_single = __pyx_n_u_B_single;

    /* "pkuseg/feature_extractor.pyx":298
 *             B = "B"
 *             B_single = "B_single"
 *             I_first = I = "I"             # <<<<<<<<<<<<<<
 *             I_end = "I_end"
 *         elif config.nLabel == 5:
 */
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I_first = __pyx_n_u_I;
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I = __pyx_n_u_I;

    /* "pkuseg/feature_extractor.pyx":299
 *             B_single = "B_single"
 *             I_first = I = "I"
 *             I_end = "I_end"             # <<<<<<<<<<<<<<
 *         elif config.nLabel == 5:
 *             B = "B"
 */
    __Pyx_INCREF(__pyx_n_u_I_end);
    __pyx_v_I_end = __pyx_n_u_I_end;

    /* "pkuseg/feature_extractor.pyx":295
 *             I_first = I = "I"
 *             I_end = "I_end"
 *         elif config.nLabel == 4:             # <<<<<<<<<<<<<<
 *             B = "B"
 *             B_single = "B_single"
 */
    goto __pyx_L47;
  }

  /* "pkuseg/feature_extractor.pyx":300
 *             I_first = I = "I"
 *             I_end = "I_end"
 *         elif config.nLabel == 5:             # <<<<<<<<<<<<<<
 *             B = "B"
 *             B_single = "B_single"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_nLabel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_5, 5, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_11) {

    /* "pkuseg/feature_extractor.pyx":301
 *             I_end = "I_end"
 *         elif config.nLabel == 5:
 *             B = "B"             # <<<<<<<<<<<<<<
 *             B_single = "B_single"
 *             I_first = "I_first"
 */
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B = __pyx_n_u_B;

    /* "pkuseg/feature_extractor.pyx":302
 *         elif config.nLabel == 5:
 *             B = "B"
 *             B_single = "B_single"             # <<<<<<<<<<<<<<
 *             I_first = "I_first"
 *             I = "I"
 */
    __Pyx_INCREF(__pyx_n_u_B_single);
    __pyx_v_B_single = __pyx_n_u_B_single;

    /* "pkuseg/feature_extractor.pyx":303
 *             B = "B"
 *             B_single = "B_single"
 *             I_first = "I_first"             # <<<<<<<<<<<<<<
 *             I = "I"
 *             I_end = "I_end"
 */
    __Pyx_INCREF(__pyx_n_u_I_first);
    __pyx_v_I_first = __pyx_n_u_I_first;

    /* "pkuseg/feature_extractor.pyx":304
 *             B_single = "B_single"
 *             I_first = "I_first"
 *             I = "I"             # <<<<<<<<<<<<<<
 *             I_end = "I_end"
 * 
 */
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I = __pyx_n_u_I;

    /* "pkuseg/feature_extractor.pyx":305
 *             I_first = "I_first"
 *             I = "I"
 *             I_end = "I_end"             # <<<<<<<<<<<<<<
 * 
 *         tag_set = {B, B_single, I_first, I, I_end}
 */
    __Pyx_INCREF(__pyx_n_u_I_end);
    __pyx_v_I_end = __pyx_n_u_I_end;

    /* "pkuseg/feature_extractor.pyx":300
 *             I_first = I = "I"
 *             I_end = "I_end"
 *         elif config.nLabel == 5:             # <<<<<<<<<<<<<<
 *             B = "B"
 *             B_single = "B_single"
 */
  }
  __pyx_L47:;

  /* "pkuseg/feature_extractor.pyx":307
 *             I_end = "I_end"
 * 
 *         tag_set = {B, B_single, I_first, I, I_end}             # <<<<<<<<<<<<<<
 *         self.tag_to_idx = {tag: idx for idx, tag in enumerate(sorted(tag_set))}
 * 
 */
  if (unlikely(!__pyx_v_B)) { __Pyx_RaiseUnboundLocalError("B"); __PYX_ERR(0, 307, __pyx_L1_error) }
  if (unlikely(!__pyx_v_B_single)) { __Pyx_RaiseUnboundLocalError("B_single"); __PYX_ERR(0, 307, __pyx_L1_error) }
  if (unlikely(!__pyx_v_I_first)) { __Pyx_RaiseUnboundLocalError("I_first"); __PYX_ERR(0, 307, __pyx_L1_error) }
  if (unlikely(!__pyx_v_I)) { __Pyx_RaiseUnboundLocalError("I"); __PYX_ERR(0, 307, __pyx_L1_error) }
  if (unlikely(!__pyx_v_I_end)) { __Pyx_RaiseUnboundLocalError("I_end"); __PYX_ERR(0, 307, __pyx_L1_error) }
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PySet_Add(__pyx_t_2, __pyx_v_B) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_v_B_single) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_v_I_first) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_v_I) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_v_I_end) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  __pyx_v_tag_set = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":308
 * 
 *         tag_set = {B, B_single, I_first, I, I_end}
 *         self.tag_to_idx = {tag: idx for idx, tag in enumerate(sorted(tag_set))}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  { /* enter inner scope */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L50_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_1 = __pyx_int_0;
    __pyx_t_17 = PySequence_List(__pyx_v_tag_set); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 308, __pyx_L50_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_3 = ((PyObject*)__pyx_t_17);
    __pyx_t_17 = 0;
    __pyx_t_23 = PyList_Sort(__pyx_t_3); if (unlikely(__pyx_t_23 == ((int)-1))) __PYX_ERR(0, 308, __pyx_L50_error)
    __pyx_t_17 = __pyx_t_3; __Pyx_INCREF(__pyx_t_17); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_17)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 308, __pyx_L50_error)
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_17, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L50_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_tag, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_idx, __pyx_t_1);
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L50_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1);
      __pyx_t_1 = __pyx_t_3;
      __pyx_t_3 = 0;
      if (unlikely(PyDict_SetItem(__pyx_t_2, (PyObject*)__pyx_8genexpr5__pyx_v_tag, (PyObject*)__pyx_8genexpr5__pyx_v_idx))) __PYX_ERR(0, 308, __pyx_L50_error)
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_idx); __pyx_8genexpr5__pyx_v_idx = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_tag); __pyx_8genexpr5__pyx_v_tag = 0;
    goto __pyx_L53_exit_scope;
    __pyx_L50_error:;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_idx); __pyx_8genexpr5__pyx_v_idx = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_tag); __pyx_8genexpr5__pyx_v_tag = 0;
    goto __pyx_L1_error;
    __pyx_L53_exit_scope:;
  } /* exit inner scope */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_tag_to_idx, __pyx_t_2) < 0) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":224
 *         self.tag_to_idx = {}  # type: Dict[str, int]
 * 
 *     def build(self, train_file):             # <<<<<<<<<<<<<<
 *         with open(train_file, "r", encoding="utf8") as reader:
 *             lines = reader.readlines()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_reader);
  __Pyx_XDECREF(__pyx_v_lines);
  __Pyx_XDECREF(__pyx_v_examples);
  __Pyx_XDECREF(__pyx_v_word_length_info);
  __Pyx_XDECREF(__pyx_v_specials);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_pre);
  __Pyx_XDECREF(__pyx_v_suf);
  __Pyx_XDECREF(__pyx_v_example);
  __Pyx_XDECREF(__pyx_v_max_word_length);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_feature_set);
  __Pyx_XDECREF(__pyx_v_feature);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_B_single);
  __Pyx_XDECREF(__pyx_v_I_first);
  __Pyx_XDECREF(__pyx_v_I);
  __Pyx_XDECREF(__pyx_v_I_end);
  __Pyx_XDECREF(__pyx_v_tag_set);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_word);
  __Pyx_XDECREF(__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_2generator1);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_word);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_character);
  __Pyx_XDECREF(__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_5generator2);
  __Pyx_XDECREF(__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_5build_8generator3);
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_idx);
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_tag);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":312
 * 
 * 
 *     def get_node_features_idx(self, idx, nodes):             # <<<<<<<<<<<<<<
 *         return __get_node_features_idx(config, idx, nodes, self.feature_to_idx, self.unigram)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_12get_node_features_idx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_12get_node_features_idx = {"get_node_features_idx", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_12get_node_features_idx, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_12get_node_features_idx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_idx = 0;
  PyObject *__pyx_v_nodes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node_features_idx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_idx,&__pyx_n_s_nodes,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_node_features_idx", 1, 3, 3, 1); __PYX_ERR(0, 312, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nodes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_node_features_idx", 1, 3, 3, 2); __PYX_ERR(0, 312, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_node_features_idx") < 0)) __PYX_ERR(0, 312, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_idx = values[1];
    __pyx_v_nodes = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_node_features_idx", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 312, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.get_node_features_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_11get_node_features_idx(__pyx_self, __pyx_v_self, __pyx_v_idx, __pyx_v_nodes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_11get_node_features_idx(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_idx, PyObject *__pyx_v_nodes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_node_features_idx", 0);

  /* "pkuseg/feature_extractor.pyx":313
 * 
 *     def get_node_features_idx(self, idx, nodes):
 *         return __get_node_features_idx(config, idx, nodes, self.feature_to_idx, self.unigram)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_node_features_idx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_config); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feature_to_idx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_unigram); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_6, __pyx_t_3, __pyx_v_idx, __pyx_v_nodes, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 5+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_6, __pyx_t_3, __pyx_v_idx, __pyx_v_nodes, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 5+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(5+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_idx);
    __Pyx_GIVEREF(__pyx_v_idx);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_idx);
    __Pyx_INCREF(__pyx_v_nodes);
    __Pyx_GIVEREF(__pyx_v_nodes);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_v_nodes);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_7, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 4+__pyx_t_7, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pkuseg/feature_extractor.pyx":312
 * 
 * 
 *     def get_node_features_idx(self, idx, nodes):             # <<<<<<<<<<<<<<
 *         return __get_node_features_idx(config, idx, nodes, self.feature_to_idx, self.unigram)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.get_node_features_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":316
 * 
 * 
 *     def get_node_features(self, idx, wordary):             # <<<<<<<<<<<<<<
 *         cdef int length = len(wordary)
 *         w = wordary[idx]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_14get_node_features(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_14get_node_features = {"get_node_features", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_14get_node_features, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_14get_node_features(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_idx = 0;
  PyObject *__pyx_v_wordary = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node_features (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_idx,&__pyx_n_s_wordary,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_node_features", 1, 3, 3, 1); __PYX_ERR(0, 316, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wordary)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_node_features", 1, 3, 3, 2); __PYX_ERR(0, 316, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_node_features") < 0)) __PYX_ERR(0, 316, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_idx = values[1];
    __pyx_v_wordary = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_node_features", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 316, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.get_node_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_13get_node_features(__pyx_self, __pyx_v_self, __pyx_v_idx, __pyx_v_wordary);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_13get_node_features(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_idx, PyObject *__pyx_v_wordary) {
  int __pyx_v_length;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_v_flist = NULL;
  PyObject *__pyx_v_tmplst = NULL;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_v_prelst_in = NULL;
  PyObject *__pyx_v_postlst_in = NULL;
  PyObject *__pyx_v_prelst_ex = NULL;
  PyObject *__pyx_v_postlst_ex = NULL;
  PyObject *__pyx_v_pre = NULL;
  PyObject *__pyx_v_post = NULL;
  PyObject *__pyx_v_bigram = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_node_features", 0);

  /* "pkuseg/feature_extractor.pyx":317
 * 
 *     def get_node_features(self, idx, wordary):
 *         cdef int length = len(wordary)             # <<<<<<<<<<<<<<
 *         w = wordary[idx]
 *         flist = []
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_wordary); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_v_length = __pyx_t_1;

  /* "pkuseg/feature_extractor.pyx":318
 *     def get_node_features(self, idx, wordary):
 *         cdef int length = len(wordary)
 *         w = wordary[idx]             # <<<<<<<<<<<<<<
 *         flist = []
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_wordary, __pyx_v_idx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_w = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":319
 *         cdef int length = len(wordary)
 *         w = wordary[idx]
 *         flist = []             # <<<<<<<<<<<<<<
 * 
 *         # 1 start feature
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_flist = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":322
 * 
 *         # 1 start feature
 *         flist.append("$$")             # <<<<<<<<<<<<<<
 * 
 *         # 8 unigram/bgiram feature
 */
  __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__9); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 322, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":325
 * 
 *         # 8 unigram/bgiram feature
 *         flist.append("c." + w)             # <<<<<<<<<<<<<<
 *         if idx > 0:
 *             flist.append("c-1." + wordary[idx - 1])
 */
  __pyx_t_2 = PyNumber_Add(__pyx_kp_u_c, __pyx_v_w); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":326
 *         # 8 unigram/bgiram feature
 *         flist.append("c." + w)
 *         if idx > 0:             # <<<<<<<<<<<<<<
 *             flist.append("c-1." + wordary[idx - 1])
 *         else:
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_idx, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 326, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pkuseg/feature_extractor.pyx":327
 *         flist.append("c." + w)
 *         if idx > 0:
 *             flist.append("c-1." + wordary[idx - 1])             # <<<<<<<<<<<<<<
 *         else:
 *             flist.append("/")
 */
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_idx, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_wordary, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_u_c_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pkuseg/feature_extractor.pyx":326
 *         # 8 unigram/bgiram feature
 *         flist.append("c." + w)
 *         if idx > 0:             # <<<<<<<<<<<<<<
 *             flist.append("c-1." + wordary[idx - 1])
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pkuseg/feature_extractor.pyx":329
 *             flist.append("c-1." + wordary[idx - 1])
 *         else:
 *             flist.append("/")             # <<<<<<<<<<<<<<
 *         if idx < len(wordary) - 1:
 *             flist.append("c1." + wordary[idx + 1])
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 329, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pkuseg/feature_extractor.pyx":330
 *         else:
 *             flist.append("/")
 *         if idx < len(wordary) - 1:             # <<<<<<<<<<<<<<
 *             flist.append("c1." + wordary[idx + 1])
 *         else:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_wordary); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 330, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_1 - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_idx, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_4) {

    /* "pkuseg/feature_extractor.pyx":331
 *             flist.append("/")
 *         if idx < len(wordary) - 1:
 *             flist.append("c1." + wordary[idx + 1])             # <<<<<<<<<<<<<<
 *         else:
 *             flist.append("/")
 */
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_idx, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_wordary, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_kp_u_c1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":330
 *         else:
 *             flist.append("/")
 *         if idx < len(wordary) - 1:             # <<<<<<<<<<<<<<
 *             flist.append("c1." + wordary[idx + 1])
 *         else:
 */
    goto __pyx_L4;
  }

  /* "pkuseg/feature_extractor.pyx":333
 *             flist.append("c1." + wordary[idx + 1])
 *         else:
 *             flist.append("/")             # <<<<<<<<<<<<<<
 *         if idx > 1:
 *             flist.append("c-2." + wordary[idx - 2])
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 333, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "pkuseg/feature_extractor.pyx":334
 *         else:
 *             flist.append("/")
 *         if idx > 1:             # <<<<<<<<<<<<<<
 *             flist.append("c-2." + wordary[idx - 2])
 *         else:
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_idx, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 334, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_4) {

    /* "pkuseg/feature_extractor.pyx":335
 *             flist.append("/")
 *         if idx > 1:
 *             flist.append("c-2." + wordary[idx - 2])             # <<<<<<<<<<<<<<
 *         else:
 *             flist.append("/")
 */
    __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_v_idx, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_wordary, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_kp_u_c_2, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":334
 *         else:
 *             flist.append("/")
 *         if idx > 1:             # <<<<<<<<<<<<<<
 *             flist.append("c-2." + wordary[idx - 2])
 *         else:
 */
    goto __pyx_L5;
  }

  /* "pkuseg/feature_extractor.pyx":337
 *             flist.append("c-2." + wordary[idx - 2])
 *         else:
 *             flist.append("/")             # <<<<<<<<<<<<<<
 *         if idx < len(wordary) - 2:
 *             flist.append("c2." + wordary[idx + 2])
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 337, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "pkuseg/feature_extractor.pyx":338
 *         else:
 *             flist.append("/")
 *         if idx < len(wordary) - 2:             # <<<<<<<<<<<<<<
 *             flist.append("c2." + wordary[idx + 2])
 *         else:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_wordary); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t((__pyx_t_1 - 2)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_idx, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pkuseg/feature_extractor.pyx":339
 *             flist.append("/")
 *         if idx < len(wordary) - 2:
 *             flist.append("c2." + wordary[idx + 2])             # <<<<<<<<<<<<<<
 *         else:
 *             flist.append("/")
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_idx, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_wordary, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_u_c2, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pkuseg/feature_extractor.pyx":338
 *         else:
 *             flist.append("/")
 *         if idx < len(wordary) - 2:             # <<<<<<<<<<<<<<
 *             flist.append("c2." + wordary[idx + 2])
 *         else:
 */
    goto __pyx_L6;
  }

  /* "pkuseg/feature_extractor.pyx":341
 *             flist.append("c2." + wordary[idx + 2])
 *         else:
 *             flist.append("/")             # <<<<<<<<<<<<<<
 *         if idx > 0:
 *             flist.append("c-1c." + wordary[idx - 1] + config.delimInFeature + w)
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 341, __pyx_L1_error)
  }
  __pyx_L6:;

  /* "pkuseg/feature_extractor.pyx":342
 *         else:
 *             flist.append("/")
 *         if idx > 0:             # <<<<<<<<<<<<<<
 *             flist.append("c-1c." + wordary[idx - 1] + config.delimInFeature + w)
 *         else:
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_idx, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pkuseg/feature_extractor.pyx":343
 *             flist.append("/")
 *         if idx > 0:
 *             flist.append("c-1c." + wordary[idx - 1] + config.delimInFeature + w)             # <<<<<<<<<<<<<<
 *         else:
 *             flist.append("/")
 */
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_idx, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_wordary, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_u_c_1c, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_config); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_delimInFeature); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_v_w); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_6); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pkuseg/feature_extractor.pyx":342
 *         else:
 *             flist.append("/")
 *         if idx > 0:             # <<<<<<<<<<<<<<
 *             flist.append("c-1c." + wordary[idx - 1] + config.delimInFeature + w)
 *         else:
 */
    goto __pyx_L7;
  }

  /* "pkuseg/feature_extractor.pyx":345
 *             flist.append("c-1c." + wordary[idx - 1] + config.delimInFeature + w)
 *         else:
 *             flist.append("/")             # <<<<<<<<<<<<<<
 *         if idx < len(wordary) - 1:
 *             flist.append("cc1." + w + config.delimInFeature + wordary[idx + 1])
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 345, __pyx_L1_error)
  }
  __pyx_L7:;

  /* "pkuseg/feature_extractor.pyx":346
 *         else:
 *             flist.append("/")
 *         if idx < len(wordary) - 1:             # <<<<<<<<<<<<<<
 *             flist.append("cc1." + w + config.delimInFeature + wordary[idx + 1])
 *         else:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_wordary); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_1 - 1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_idx, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_4) {

    /* "pkuseg/feature_extractor.pyx":347
 *             flist.append("/")
 *         if idx < len(wordary) - 1:
 *             flist.append("cc1." + w + config.delimInFeature + wordary[idx + 1])             # <<<<<<<<<<<<<<
 *         else:
 *             flist.append("/")
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_u_cc1, __pyx_v_w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_config); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_delimInFeature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_idx, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_wordary, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pkuseg/feature_extractor.pyx":346
 *         else:
 *             flist.append("/")
 *         if idx < len(wordary) - 1:             # <<<<<<<<<<<<<<
 *             flist.append("cc1." + w + config.delimInFeature + wordary[idx + 1])
 *         else:
 */
    goto __pyx_L8;
  }

  /* "pkuseg/feature_extractor.pyx":349
 *             flist.append("cc1." + w + config.delimInFeature + wordary[idx + 1])
 *         else:
 *             flist.append("/")             # <<<<<<<<<<<<<<
 *         if idx > 1:
 *             flist.append(
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 349, __pyx_L1_error)
  }
  __pyx_L8:;

  /* "pkuseg/feature_extractor.pyx":350
 *         else:
 *             flist.append("/")
 *         if idx > 1:             # <<<<<<<<<<<<<<
 *             flist.append(
 *                 "c-2c-1."
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_idx, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pkuseg/feature_extractor.pyx":353
 *             flist.append(
 *                 "c-2c-1."
 *                 + wordary[idx - 2]             # <<<<<<<<<<<<<<
 *                 + config.delimInFeature
 *                 + wordary[idx - 1]
 */
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_idx, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_wordary, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_u_c_2c_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":354
 *                 "c-2c-1."
 *                 + wordary[idx - 2]
 *                 + config.delimInFeature             # <<<<<<<<<<<<<<
 *                 + wordary[idx - 1]
 *             )
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_config); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_delimInFeature); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pkuseg/feature_extractor.pyx":355
 *                 + wordary[idx - 2]
 *                 + config.delimInFeature
 *                 + wordary[idx - 1]             # <<<<<<<<<<<<<<
 *             )
 *         else:
 */
    __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_v_idx, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_wordary, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pkuseg/feature_extractor.pyx":351
 *             flist.append("/")
 *         if idx > 1:
 *             flist.append(             # <<<<<<<<<<<<<<
 *                 "c-2c-1."
 *                 + wordary[idx - 2]
 */
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_6); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pkuseg/feature_extractor.pyx":350
 *         else:
 *             flist.append("/")
 *         if idx > 1:             # <<<<<<<<<<<<<<
 *             flist.append(
 *                 "c-2c-1."
 */
    goto __pyx_L9;
  }

  /* "pkuseg/feature_extractor.pyx":358
 *             )
 *         else:
 *             flist.append("/")             # <<<<<<<<<<<<<<
 * 
 *         # no num/letter based features
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 358, __pyx_L1_error)
  }
  __pyx_L9:;

  /* "pkuseg/feature_extractor.pyx":361
 * 
 *         # no num/letter based features
 *         if not config.wordFeature:             # <<<<<<<<<<<<<<
 *             return flist
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_config); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_wordFeature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = ((!__pyx_t_4) != 0);
  if (__pyx_t_7) {

    /* "pkuseg/feature_extractor.pyx":362
 *         # no num/letter based features
 *         if not config.wordFeature:
 *             return flist             # <<<<<<<<<<<<<<
 * 
 *         # 2 * (wordMax-wordMin+1) word features (default: 2*(6-2+1)=10 )
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_flist);
    __pyx_r = __pyx_v_flist;
    goto __pyx_L0;

    /* "pkuseg/feature_extractor.pyx":361
 * 
 *         # no num/letter based features
 *         if not config.wordFeature:             # <<<<<<<<<<<<<<
 *             return flist
 * 
 */
  }

  /* "pkuseg/feature_extractor.pyx":366
 *         # 2 * (wordMax-wordMin+1) word features (default: 2*(6-2+1)=10 )
 *         # the character starts or ends a word
 *         tmplst = []             # <<<<<<<<<<<<<<
 *         for l in range(config.wordMax, config.wordMin - 1, -1):
 *             # length 6 ... 2 (default)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_tmplst = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":367
 *         # the character starts or ends a word
 *         tmplst = []
 *         for l in range(config.wordMax, config.wordMin - 1, -1):             # <<<<<<<<<<<<<<
 *             # length 6 ... 2 (default)
 *             # "prefix including current c" wordary[n-l+1, n]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_wordMax); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_wordMin); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_int_neg_1);
  __pyx_t_6 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 367, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 367, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 367, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 367, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pkuseg/feature_extractor.pyx":371
 *             # "prefix including current c" wordary[n-l+1, n]
 *             # current character ends word
 *             tmp = get_slice_str(wordary, idx - l + 1, l, length)             # <<<<<<<<<<<<<<
 *             if tmp != "":
 *                 if tmp in self.unigram:
 */
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_idx, __pyx_v_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_l); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_6pkuseg_17feature_extractor_get_slice_str(__pyx_v_wordary, __pyx_t_9, __pyx_t_10, __pyx_v_length, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pkuseg/feature_extractor.pyx":372
 *             # current character ends word
 *             tmp = get_slice_str(wordary, idx - l + 1, l, length)
 *             if tmp != "":             # <<<<<<<<<<<<<<
 *                 if tmp in self.unigram:
 *                     flist.append("w-1." + tmp)
 */
    __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_tmp, __pyx_kp_u_, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 372, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "pkuseg/feature_extractor.pyx":373
 *             tmp = get_slice_str(wordary, idx - l + 1, l, length)
 *             if tmp != "":
 *                 if tmp in self.unigram:             # <<<<<<<<<<<<<<
 *                     flist.append("w-1." + tmp)
 *                     tmplst.append(tmp)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_unigram); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_tmp, __pyx_t_6, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 373, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_4 = (__pyx_t_7 != 0);
      if (__pyx_t_4) {

        /* "pkuseg/feature_extractor.pyx":374
 *             if tmp != "":
 *                 if tmp in self.unigram:
 *                     flist.append("w-1." + tmp)             # <<<<<<<<<<<<<<
 *                     tmplst.append(tmp)
 *                 else:
 */
        __pyx_t_6 = PyNumber_Add(__pyx_kp_u_w_1, __pyx_v_tmp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 374, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_6); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 374, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pkuseg/feature_extractor.pyx":375
 *                 if tmp in self.unigram:
 *                     flist.append("w-1." + tmp)
 *                     tmplst.append(tmp)             # <<<<<<<<<<<<<<
 *                 else:
 *                     flist.append("/")
 */
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_v_tmp); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 375, __pyx_L1_error)

        /* "pkuseg/feature_extractor.pyx":373
 *             tmp = get_slice_str(wordary, idx - l + 1, l, length)
 *             if tmp != "":
 *                 if tmp in self.unigram:             # <<<<<<<<<<<<<<
 *                     flist.append("w-1." + tmp)
 *                     tmplst.append(tmp)
 */
        goto __pyx_L14;
      }

      /* "pkuseg/feature_extractor.pyx":377
 *                     tmplst.append(tmp)
 *                 else:
 *                     flist.append("/")             # <<<<<<<<<<<<<<
 *                     tmplst.append("**noWord")
 *             else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 377, __pyx_L1_error)

        /* "pkuseg/feature_extractor.pyx":378
 *                 else:
 *                     flist.append("/")
 *                     tmplst.append("**noWord")             # <<<<<<<<<<<<<<
 *             else:
 *                 flist.append("/")
 */
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_kp_u_noWord); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 378, __pyx_L1_error)
      }
      __pyx_L14:;

      /* "pkuseg/feature_extractor.pyx":372
 *             # current character ends word
 *             tmp = get_slice_str(wordary, idx - l + 1, l, length)
 *             if tmp != "":             # <<<<<<<<<<<<<<
 *                 if tmp in self.unigram:
 *                     flist.append("w-1." + tmp)
 */
      goto __pyx_L13;
    }

    /* "pkuseg/feature_extractor.pyx":380
 *                     tmplst.append("**noWord")
 *             else:
 *                 flist.append("/")             # <<<<<<<<<<<<<<
 *                 tmplst.append("**noWord")
 *         prelst_in = tmplst
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 380, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":381
 *             else:
 *                 flist.append("/")
 *                 tmplst.append("**noWord")             # <<<<<<<<<<<<<<
 *         prelst_in = tmplst
 * 
 */
      __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_kp_u_noWord); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 381, __pyx_L1_error)
    }
    __pyx_L13:;

    /* "pkuseg/feature_extractor.pyx":367
 *         # the character starts or ends a word
 *         tmplst = []
 *         for l in range(config.wordMax, config.wordMin - 1, -1):             # <<<<<<<<<<<<<<
 *             # length 6 ... 2 (default)
 *             # "prefix including current c" wordary[n-l+1, n]
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pkuseg/feature_extractor.pyx":382
 *                 flist.append("/")
 *                 tmplst.append("**noWord")
 *         prelst_in = tmplst             # <<<<<<<<<<<<<<
 * 
 *         tmplst = []
 */
  __Pyx_INCREF(__pyx_v_tmplst);
  __pyx_v_prelst_in = __pyx_v_tmplst;

  /* "pkuseg/feature_extractor.pyx":384
 *         prelst_in = tmplst
 * 
 *         tmplst = []             # <<<<<<<<<<<<<<
 *         for l in range(config.wordMax, config.wordMin - 1, -1):
 *             # "suffix" wordary[n, n+l-1]
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF_SET(__pyx_v_tmplst, ((PyObject*)__pyx_t_5));
  __pyx_t_5 = 0;

  /* "pkuseg/feature_extractor.pyx":385
 * 
 *         tmplst = []
 *         for l in range(config.wordMax, config.wordMin - 1, -1):             # <<<<<<<<<<<<<<
 *             # "suffix" wordary[n, n+l-1]
 *             # current character starts word
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_config); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_wordMax); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_config); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_wordMin); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_neg_1);
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 385, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 385, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 385, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 385, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 385, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_8(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 385, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":388
 *             # "suffix" wordary[n, n+l-1]
 *             # current character starts word
 *             tmp = get_slice_str(wordary, idx, l, length)             # <<<<<<<<<<<<<<
 *             if tmp != "":
 *                 if tmp in self.unigram:
 */
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_idx); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 388, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_l); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 388, __pyx_L1_error)
    __pyx_t_5 = __pyx_f_6pkuseg_17feature_extractor_get_slice_str(__pyx_v_wordary, __pyx_t_10, __pyx_t_9, __pyx_v_length, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":389
 *             # current character starts word
 *             tmp = get_slice_str(wordary, idx, l, length)
 *             if tmp != "":             # <<<<<<<<<<<<<<
 *                 if tmp in self.unigram:
 *                     flist.append("w1." + tmp)
 */
    __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_tmp, __pyx_kp_u_, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 389, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "pkuseg/feature_extractor.pyx":390
 *             tmp = get_slice_str(wordary, idx, l, length)
 *             if tmp != "":
 *                 if tmp in self.unigram:             # <<<<<<<<<<<<<<
 *                     flist.append("w1." + tmp)
 *                     tmplst.append(tmp)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_unigram); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_tmp, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 390, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = (__pyx_t_4 != 0);
      if (__pyx_t_7) {

        /* "pkuseg/feature_extractor.pyx":391
 *             if tmp != "":
 *                 if tmp in self.unigram:
 *                     flist.append("w1." + tmp)             # <<<<<<<<<<<<<<
 *                     tmplst.append(tmp)
 *                 else:
 */
        __pyx_t_5 = PyNumber_Add(__pyx_kp_u_w1, __pyx_v_tmp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 391, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 391, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "pkuseg/feature_extractor.pyx":392
 *                 if tmp in self.unigram:
 *                     flist.append("w1." + tmp)
 *                     tmplst.append(tmp)             # <<<<<<<<<<<<<<
 *                 else:
 *                     flist.append("/")
 */
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_v_tmp); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 392, __pyx_L1_error)

        /* "pkuseg/feature_extractor.pyx":390
 *             tmp = get_slice_str(wordary, idx, l, length)
 *             if tmp != "":
 *                 if tmp in self.unigram:             # <<<<<<<<<<<<<<
 *                     flist.append("w1." + tmp)
 *                     tmplst.append(tmp)
 */
        goto __pyx_L18;
      }

      /* "pkuseg/feature_extractor.pyx":394
 *                     tmplst.append(tmp)
 *                 else:
 *                     flist.append("/")             # <<<<<<<<<<<<<<
 *                     tmplst.append("**noWord")
 *             else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 394, __pyx_L1_error)

        /* "pkuseg/feature_extractor.pyx":395
 *                 else:
 *                     flist.append("/")
 *                     tmplst.append("**noWord")             # <<<<<<<<<<<<<<
 *             else:
 *                 flist.append("/")
 */
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_kp_u_noWord); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 395, __pyx_L1_error)
      }
      __pyx_L18:;

      /* "pkuseg/feature_extractor.pyx":389
 *             # current character starts word
 *             tmp = get_slice_str(wordary, idx, l, length)
 *             if tmp != "":             # <<<<<<<<<<<<<<
 *                 if tmp in self.unigram:
 *                     flist.append("w1." + tmp)
 */
      goto __pyx_L17;
    }

    /* "pkuseg/feature_extractor.pyx":397
 *                     tmplst.append("**noWord")
 *             else:
 *                 flist.append("/")             # <<<<<<<<<<<<<<
 *                 tmplst.append("**noWord")
 *         postlst_in = tmplst
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 397, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":398
 *             else:
 *                 flist.append("/")
 *                 tmplst.append("**noWord")             # <<<<<<<<<<<<<<
 *         postlst_in = tmplst
 * 
 */
      __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_kp_u_noWord); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 398, __pyx_L1_error)
    }
    __pyx_L17:;

    /* "pkuseg/feature_extractor.pyx":385
 * 
 *         tmplst = []
 *         for l in range(config.wordMax, config.wordMin - 1, -1):             # <<<<<<<<<<<<<<
 *             # "suffix" wordary[n, n+l-1]
 *             # current character starts word
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":399
 *                 flist.append("/")
 *                 tmplst.append("**noWord")
 *         postlst_in = tmplst             # <<<<<<<<<<<<<<
 * 
 *         # these are not in feature list
 */
  __Pyx_INCREF(__pyx_v_tmplst);
  __pyx_v_postlst_in = __pyx_v_tmplst;

  /* "pkuseg/feature_extractor.pyx":402
 * 
 *         # these are not in feature list
 *         tmplst = []             # <<<<<<<<<<<<<<
 *         for l in range(config.wordMax, config.wordMin - 1, -1):
 *             # "prefix excluding current c" wordary[n-l, n-1]
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_tmplst, ((PyObject*)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":403
 *         # these are not in feature list
 *         tmplst = []
 *         for l in range(config.wordMax, config.wordMin - 1, -1):             # <<<<<<<<<<<<<<
 *             # "prefix excluding current c" wordary[n-l, n-1]
 *             tmp = get_slice_str(wordary, idx - l, l, length)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_wordMax); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_wordMin); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_int_neg_1);
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_6 = __pyx_t_2; __Pyx_INCREF(__pyx_t_6); __pyx_t_1 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 403, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 403, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 403, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_6);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 403, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pkuseg/feature_extractor.pyx":405
 *         for l in range(config.wordMax, config.wordMin - 1, -1):
 *             # "prefix excluding current c" wordary[n-l, n-1]
 *             tmp = get_slice_str(wordary, idx - l, l, length)             # <<<<<<<<<<<<<<
 *             if tmp != "":
 *                 if tmp in self.unigram:
 */
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_idx, __pyx_v_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_l); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_6pkuseg_17feature_extractor_get_slice_str(__pyx_v_wordary, __pyx_t_9, __pyx_t_10, __pyx_v_length, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pkuseg/feature_extractor.pyx":406
 *             # "prefix excluding current c" wordary[n-l, n-1]
 *             tmp = get_slice_str(wordary, idx - l, l, length)
 *             if tmp != "":             # <<<<<<<<<<<<<<
 *                 if tmp in self.unigram:
 *                     tmplst.append(tmp)
 */
    __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_tmp, __pyx_kp_u_, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 406, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "pkuseg/feature_extractor.pyx":407
 *             tmp = get_slice_str(wordary, idx - l, l, length)
 *             if tmp != "":
 *                 if tmp in self.unigram:             # <<<<<<<<<<<<<<
 *                     tmplst.append(tmp)
 *                 else:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_unigram); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_tmp, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = (__pyx_t_7 != 0);
      if (__pyx_t_4) {

        /* "pkuseg/feature_extractor.pyx":408
 *             if tmp != "":
 *                 if tmp in self.unigram:
 *                     tmplst.append(tmp)             # <<<<<<<<<<<<<<
 *                 else:
 *                     tmplst.append("**noWord")
 */
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_v_tmp); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 408, __pyx_L1_error)

        /* "pkuseg/feature_extractor.pyx":407
 *             tmp = get_slice_str(wordary, idx - l, l, length)
 *             if tmp != "":
 *                 if tmp in self.unigram:             # <<<<<<<<<<<<<<
 *                     tmplst.append(tmp)
 *                 else:
 */
        goto __pyx_L22;
      }

      /* "pkuseg/feature_extractor.pyx":410
 *                     tmplst.append(tmp)
 *                 else:
 *                     tmplst.append("**noWord")             # <<<<<<<<<<<<<<
 *             else:
 *                 tmplst.append("**noWord")
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_kp_u_noWord); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 410, __pyx_L1_error)
      }
      __pyx_L22:;

      /* "pkuseg/feature_extractor.pyx":406
 *             # "prefix excluding current c" wordary[n-l, n-1]
 *             tmp = get_slice_str(wordary, idx - l, l, length)
 *             if tmp != "":             # <<<<<<<<<<<<<<
 *                 if tmp in self.unigram:
 *                     tmplst.append(tmp)
 */
      goto __pyx_L21;
    }

    /* "pkuseg/feature_extractor.pyx":412
 *                     tmplst.append("**noWord")
 *             else:
 *                 tmplst.append("**noWord")             # <<<<<<<<<<<<<<
 *         prelst_ex = tmplst
 * 
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_kp_u_noWord); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 412, __pyx_L1_error)
    }
    __pyx_L21:;

    /* "pkuseg/feature_extractor.pyx":403
 *         # these are not in feature list
 *         tmplst = []
 *         for l in range(config.wordMax, config.wordMin - 1, -1):             # <<<<<<<<<<<<<<
 *             # "prefix excluding current c" wordary[n-l, n-1]
 *             tmp = get_slice_str(wordary, idx - l, l, length)
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pkuseg/feature_extractor.pyx":413
 *             else:
 *                 tmplst.append("**noWord")
 *         prelst_ex = tmplst             # <<<<<<<<<<<<<<
 * 
 *         tmplst = []
 */
  __Pyx_INCREF(__pyx_v_tmplst);
  __pyx_v_prelst_ex = __pyx_v_tmplst;

  /* "pkuseg/feature_extractor.pyx":415
 *         prelst_ex = tmplst
 * 
 *         tmplst = []             # <<<<<<<<<<<<<<
 *         for l in range(config.wordMax, config.wordMin - 1, -1):
 *             # "suffix excluding current c" wordary[n+1, n+l]
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF_SET(__pyx_v_tmplst, ((PyObject*)__pyx_t_6));
  __pyx_t_6 = 0;

  /* "pkuseg/feature_extractor.pyx":416
 * 
 *         tmplst = []
 *         for l in range(config.wordMax, config.wordMin - 1, -1):             # <<<<<<<<<<<<<<
 *             # "suffix excluding current c" wordary[n+1, n+l]
 *             tmp = get_slice_str(wordary, idx + 1, l, length)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_config); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_wordMax); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_config); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_wordMin); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_int_neg_1);
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 416, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 416, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 416, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 416, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pkuseg/feature_extractor.pyx":418
 *         for l in range(config.wordMax, config.wordMin - 1, -1):
 *             # "suffix excluding current c" wordary[n+1, n+l]
 *             tmp = get_slice_str(wordary, idx + 1, l, length)             # <<<<<<<<<<<<<<
 *             if tmp != "":
 *                 if tmp in self.unigram:
 */
    __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_idx, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_l); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_6pkuseg_17feature_extractor_get_slice_str(__pyx_v_wordary, __pyx_t_10, __pyx_t_9, __pyx_v_length, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pkuseg/feature_extractor.pyx":419
 *             # "suffix excluding current c" wordary[n+1, n+l]
 *             tmp = get_slice_str(wordary, idx + 1, l, length)
 *             if tmp != "":             # <<<<<<<<<<<<<<
 *                 if tmp in self.unigram:
 *                     tmplst.append(tmp)
 */
    __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_tmp, __pyx_kp_u_, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 419, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "pkuseg/feature_extractor.pyx":420
 *             tmp = get_slice_str(wordary, idx + 1, l, length)
 *             if tmp != "":
 *                 if tmp in self.unigram:             # <<<<<<<<<<<<<<
 *                     tmplst.append(tmp)
 *                 else:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_unigram); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_tmp, __pyx_t_6, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = (__pyx_t_4 != 0);
      if (__pyx_t_7) {

        /* "pkuseg/feature_extractor.pyx":421
 *             if tmp != "":
 *                 if tmp in self.unigram:
 *                     tmplst.append(tmp)             # <<<<<<<<<<<<<<
 *                 else:
 *                     tmplst.append("**noWord")
 */
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_v_tmp); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 421, __pyx_L1_error)

        /* "pkuseg/feature_extractor.pyx":420
 *             tmp = get_slice_str(wordary, idx + 1, l, length)
 *             if tmp != "":
 *                 if tmp in self.unigram:             # <<<<<<<<<<<<<<
 *                     tmplst.append(tmp)
 *                 else:
 */
        goto __pyx_L26;
      }

      /* "pkuseg/feature_extractor.pyx":423
 *                     tmplst.append(tmp)
 *                 else:
 *                     tmplst.append("**noWord")             # <<<<<<<<<<<<<<
 *             else:
 *                 tmplst.append("**noWord")
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_kp_u_noWord); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 423, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "pkuseg/feature_extractor.pyx":419
 *             # "suffix excluding current c" wordary[n+1, n+l]
 *             tmp = get_slice_str(wordary, idx + 1, l, length)
 *             if tmp != "":             # <<<<<<<<<<<<<<
 *                 if tmp in self.unigram:
 *                     tmplst.append(tmp)
 */
      goto __pyx_L25;
    }

    /* "pkuseg/feature_extractor.pyx":425
 *                     tmplst.append("**noWord")
 *             else:
 *                 tmplst.append("**noWord")             # <<<<<<<<<<<<<<
 *         postlst_ex = tmplst
 * 
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_tmplst, __pyx_kp_u_noWord); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 425, __pyx_L1_error)
    }
    __pyx_L25:;

    /* "pkuseg/feature_extractor.pyx":416
 * 
 *         tmplst = []
 *         for l in range(config.wordMax, config.wordMin - 1, -1):             # <<<<<<<<<<<<<<
 *             # "suffix excluding current c" wordary[n+1, n+l]
 *             tmp = get_slice_str(wordary, idx + 1, l, length)
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pkuseg/feature_extractor.pyx":426
 *             else:
 *                 tmplst.append("**noWord")
 *         postlst_ex = tmplst             # <<<<<<<<<<<<<<
 * 
 *         # this character is in the middle of a word
 */
  __Pyx_INCREF(__pyx_v_tmplst);
  __pyx_v_postlst_ex = __pyx_v_tmplst;

  /* "pkuseg/feature_extractor.pyx":431
 *         # 2*(wordMax-wordMin+1)^2 (default: 2*(6-2+1)^2=50)
 * 
 *         for pre in prelst_ex:             # <<<<<<<<<<<<<<
 *             for post in postlst_in:
 *                 bigram = pre + "*" + post
 */
  __pyx_t_5 = __pyx_v_prelst_ex; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 431, __pyx_L1_error)
    #else
    __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_pre, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pkuseg/feature_extractor.pyx":432
 * 
 *         for pre in prelst_ex:
 *             for post in postlst_in:             # <<<<<<<<<<<<<<
 *                 bigram = pre + "*" + post
 *                 if bigram in self.bigram:
 */
    __pyx_t_6 = __pyx_v_postlst_in; __Pyx_INCREF(__pyx_t_6); __pyx_t_11 = 0;
    for (;;) {
      if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_11); __Pyx_INCREF(__pyx_t_2); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 432, __pyx_L1_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_post, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pkuseg/feature_extractor.pyx":433
 *         for pre in prelst_ex:
 *             for post in postlst_in:
 *                 bigram = pre + "*" + post             # <<<<<<<<<<<<<<
 *                 if bigram in self.bigram:
 *                     flist.append("ww.l." + bigram)
 */
      __pyx_t_2 = PyNumber_Add(__pyx_v_pre, __pyx_kp_u__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = PyNumber_Add(__pyx_t_2, __pyx_v_post); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_bigram, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "pkuseg/feature_extractor.pyx":434
 *             for post in postlst_in:
 *                 bigram = pre + "*" + post
 *                 if bigram in self.bigram:             # <<<<<<<<<<<<<<
 *                     flist.append("ww.l." + bigram)
 *                 else:
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bigram); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_bigram, __pyx_t_12, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_4 = (__pyx_t_7 != 0);
      if (__pyx_t_4) {

        /* "pkuseg/feature_extractor.pyx":435
 *                 bigram = pre + "*" + post
 *                 if bigram in self.bigram:
 *                     flist.append("ww.l." + bigram)             # <<<<<<<<<<<<<<
 *                 else:
 *                     flist.append("/")
 */
        __pyx_t_12 = PyNumber_Add(__pyx_kp_u_ww_l, __pyx_v_bigram); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 435, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_12); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 435, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "pkuseg/feature_extractor.pyx":434
 *             for post in postlst_in:
 *                 bigram = pre + "*" + post
 *                 if bigram in self.bigram:             # <<<<<<<<<<<<<<
 *                     flist.append("ww.l." + bigram)
 *                 else:
 */
        goto __pyx_L31;
      }

      /* "pkuseg/feature_extractor.pyx":437
 *                     flist.append("ww.l." + bigram)
 *                 else:
 *                     flist.append("/")             # <<<<<<<<<<<<<<
 * 
 *         for pre in prelst_in:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 437, __pyx_L1_error)
      }
      __pyx_L31:;

      /* "pkuseg/feature_extractor.pyx":432
 * 
 *         for pre in prelst_ex:
 *             for post in postlst_in:             # <<<<<<<<<<<<<<
 *                 bigram = pre + "*" + post
 *                 if bigram in self.bigram:
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pkuseg/feature_extractor.pyx":431
 *         # 2*(wordMax-wordMin+1)^2 (default: 2*(6-2+1)^2=50)
 * 
 *         for pre in prelst_ex:             # <<<<<<<<<<<<<<
 *             for post in postlst_in:
 *                 bigram = pre + "*" + post
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pkuseg/feature_extractor.pyx":439
 *                     flist.append("/")
 * 
 *         for pre in prelst_in:             # <<<<<<<<<<<<<<
 *             for post in postlst_ex:
 *                 bigram = pre + "*" + post
 */
  __pyx_t_5 = __pyx_v_prelst_in; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 439, __pyx_L1_error)
    #else
    __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_pre, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pkuseg/feature_extractor.pyx":440
 * 
 *         for pre in prelst_in:
 *             for post in postlst_ex:             # <<<<<<<<<<<<<<
 *                 bigram = pre + "*" + post
 *                 if bigram in self.bigram:
 */
    __pyx_t_6 = __pyx_v_postlst_ex; __Pyx_INCREF(__pyx_t_6); __pyx_t_11 = 0;
    for (;;) {
      if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_12 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_11); __Pyx_INCREF(__pyx_t_12); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 440, __pyx_L1_error)
      #else
      __pyx_t_12 = PySequence_ITEM(__pyx_t_6, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_post, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "pkuseg/feature_extractor.pyx":441
 *         for pre in prelst_in:
 *             for post in postlst_ex:
 *                 bigram = pre + "*" + post             # <<<<<<<<<<<<<<
 *                 if bigram in self.bigram:
 *                     flist.append("ww.r." + bigram)
 */
      __pyx_t_12 = PyNumber_Add(__pyx_v_pre, __pyx_kp_u__3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 441, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_2 = PyNumber_Add(__pyx_t_12, __pyx_v_post); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF_SET(__pyx_v_bigram, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pkuseg/feature_extractor.pyx":442
 *             for post in postlst_ex:
 *                 bigram = pre + "*" + post
 *                 if bigram in self.bigram:             # <<<<<<<<<<<<<<
 *                     flist.append("ww.r." + bigram)
 *                 else:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bigram); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_bigram, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = (__pyx_t_4 != 0);
      if (__pyx_t_7) {

        /* "pkuseg/feature_extractor.pyx":443
 *                 bigram = pre + "*" + post
 *                 if bigram in self.bigram:
 *                     flist.append("ww.r." + bigram)             # <<<<<<<<<<<<<<
 *                 else:
 *                     flist.append("/")
 */
        __pyx_t_2 = PyNumber_Add(__pyx_kp_u_ww_r, __pyx_v_bigram); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 443, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pkuseg/feature_extractor.pyx":442
 *             for post in postlst_ex:
 *                 bigram = pre + "*" + post
 *                 if bigram in self.bigram:             # <<<<<<<<<<<<<<
 *                     flist.append("ww.r." + bigram)
 *                 else:
 */
        goto __pyx_L36;
      }

      /* "pkuseg/feature_extractor.pyx":445
 *                     flist.append("ww.r." + bigram)
 *                 else:
 *                     flist.append("/")             # <<<<<<<<<<<<<<
 * 
 *         return flist
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_flist, __pyx_kp_u__5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 445, __pyx_L1_error)
      }
      __pyx_L36:;

      /* "pkuseg/feature_extractor.pyx":440
 * 
 *         for pre in prelst_in:
 *             for post in postlst_ex:             # <<<<<<<<<<<<<<
 *                 bigram = pre + "*" + post
 *                 if bigram in self.bigram:
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pkuseg/feature_extractor.pyx":439
 *                     flist.append("/")
 * 
 *         for pre in prelst_in:             # <<<<<<<<<<<<<<
 *             for post in postlst_ex:
 *                 bigram = pre + "*" + post
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pkuseg/feature_extractor.pyx":447
 *                     flist.append("/")
 * 
 *         return flist             # <<<<<<<<<<<<<<
 * 
 *     def convert_feature_file_to_idx_file(
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_flist);
  __pyx_r = __pyx_v_flist;
  goto __pyx_L0;

  /* "pkuseg/feature_extractor.pyx":316
 * 
 * 
 *     def get_node_features(self, idx, wordary):             # <<<<<<<<<<<<<<
 *         cdef int length = len(wordary)
 *         w = wordary[idx]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.get_node_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XDECREF(__pyx_v_flist);
  __Pyx_XDECREF(__pyx_v_tmplst);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XDECREF(__pyx_v_prelst_in);
  __Pyx_XDECREF(__pyx_v_postlst_in);
  __Pyx_XDECREF(__pyx_v_prelst_ex);
  __Pyx_XDECREF(__pyx_v_postlst_ex);
  __Pyx_XDECREF(__pyx_v_pre);
  __Pyx_XDECREF(__pyx_v_post);
  __Pyx_XDECREF(__pyx_v_bigram);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":449
 *         return flist
 * 
 *     def convert_feature_file_to_idx_file(             # <<<<<<<<<<<<<<
 *         self, feature_file, feature_idx_file, tag_idx_file
 *     ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_16convert_feature_file_to_idx_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_16convert_feature_file_to_idx_file = {"convert_feature_file_to_idx_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_16convert_feature_file_to_idx_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_16convert_feature_file_to_idx_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_feature_file = 0;
  PyObject *__pyx_v_feature_idx_file = 0;
  PyObject *__pyx_v_tag_idx_file = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convert_feature_file_to_idx_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_feature_file,&__pyx_n_s_feature_idx_file,&__pyx_n_s_tag_idx_file,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feature_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("convert_feature_file_to_idx_file", 1, 4, 4, 1); __PYX_ERR(0, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feature_idx_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("convert_feature_file_to_idx_file", 1, 4, 4, 2); __PYX_ERR(0, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tag_idx_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("convert_feature_file_to_idx_file", 1, 4, 4, 3); __PYX_ERR(0, 449, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "convert_feature_file_to_idx_file") < 0)) __PYX_ERR(0, 449, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_feature_file = values[1];
    __pyx_v_feature_idx_file = values[2];
    __pyx_v_tag_idx_file = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convert_feature_file_to_idx_file", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 449, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.convert_feature_file_to_idx_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_15convert_feature_file_to_idx_file(__pyx_self, __pyx_v_self, __pyx_v_feature_file, __pyx_v_feature_idx_file, __pyx_v_tag_idx_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_15convert_feature_file_to_idx_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_feature_file, PyObject *__pyx_v_feature_idx_file, PyObject *__pyx_v_tag_idx_file) {
  PyObject *__pyx_v_reader = NULL;
  PyObject *__pyx_v_lines = NULL;
  PyObject *__pyx_v_f_writer = NULL;
  PyObject *__pyx_v_t_writer = NULL;
  PyObject *__pyx_v_tags_idx = NULL;
  PyObject *__pyx_v_features_idx = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_feature_idx = NULL;
  PyObject *__pyx_v_splits = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_feat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *(*__pyx_t_18)(PyObject *);
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  int __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_feature_file_to_idx_file", 0);

  /* "pkuseg/feature_extractor.pyx":453
 *     ):
 * 
 *         with open(feature_file, "r", encoding="utf8") as reader:             # <<<<<<<<<<<<<<
 *             lines = reader.readlines()
 * 
 */
  /*with:*/ {
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_feature_file);
    __Pyx_GIVEREF(__pyx_v_feature_file);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_feature_file);
    __Pyx_INCREF(__pyx_n_u_r);
    __Pyx_GIVEREF(__pyx_n_u_r);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_r);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {
          __pyx_v_reader = __pyx_t_1;
          __pyx_t_1 = 0;

          /* "pkuseg/feature_extractor.pyx":454
 * 
 *         with open(feature_file, "r", encoding="utf8") as reader:
 *             lines = reader.readlines()             # <<<<<<<<<<<<<<
 * 
 *         with open(feature_idx_file, "w", encoding="utf8") as f_writer, open(
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_readlines); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_lines = __pyx_t_1;
          __pyx_t_1 = 0;

          /* "pkuseg/feature_extractor.pyx":453
 *     ):
 * 
 *         with open(feature_file, "r", encoding="utf8") as reader:             # <<<<<<<<<<<<<<
 *             lines = reader.readlines()
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.convert_feature_file_to_idx_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_3, &__pyx_t_2) < 0) __PYX_ERR(0, 453, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 453, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 453, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_10 < 0) __PYX_ERR(0, 453, __pyx_L9_except_error)
          __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_2);
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_3, __pyx_t_2);
            __pyx_t_1 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; 
            __PYX_ERR(0, 453, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_4) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__6, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 453, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L16;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L1_error;
    __pyx_L16:;
  }

  /* "pkuseg/feature_extractor.pyx":456
 *             lines = reader.readlines()
 * 
 *         with open(feature_idx_file, "w", encoding="utf8") as f_writer, open(             # <<<<<<<<<<<<<<
 *             tag_idx_file, "w", encoding="utf8"
 *         ) as t_writer:
 */
  /*with:*/ {
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_feature_idx_file);
    __Pyx_GIVEREF(__pyx_v_feature_idx_file);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_feature_idx_file);
    __Pyx_INCREF(__pyx_n_u_w);
    __Pyx_GIVEREF(__pyx_n_u_w);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_w);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 456, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L17_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L17_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_6);
        /*try:*/ {
          __pyx_v_f_writer = __pyx_t_2;
          __pyx_t_2 = 0;
          /*with:*/ {

            /* "pkuseg/feature_extractor.pyx":457
 * 
 *         with open(feature_idx_file, "w", encoding="utf8") as f_writer, open(
 *             tag_idx_file, "w", encoding="utf8"             # <<<<<<<<<<<<<<
 *         ) as t_writer:
 * 
 */
            __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_INCREF(__pyx_v_tag_idx_file);
            __Pyx_GIVEREF(__pyx_v_tag_idx_file);
            PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_tag_idx_file);
            __Pyx_INCREF(__pyx_n_u_w);
            __Pyx_GIVEREF(__pyx_n_u_w);
            PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_w);
            __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 457, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 457, __pyx_L21_error)

            /* "pkuseg/feature_extractor.pyx":456
 *             lines = reader.readlines()
 * 
 *         with open(feature_idx_file, "w", encoding="utf8") as f_writer, open(             # <<<<<<<<<<<<<<
 *             tag_idx_file, "w", encoding="utf8"
 *         ) as t_writer:
 */
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_9 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 456, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L27_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
              }
            }
            __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L27_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __pyx_t_1;
            __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            /*try:*/ {
              {
                __Pyx_PyThreadState_declare
                __Pyx_PyThreadState_assign
                __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
                __Pyx_XGOTREF(__pyx_t_12);
                __Pyx_XGOTREF(__pyx_t_13);
                __Pyx_XGOTREF(__pyx_t_14);
                /*try:*/ {
                  __pyx_v_t_writer = __pyx_t_2;
                  __pyx_t_2 = 0;

                  /* "pkuseg/feature_extractor.pyx":460
 *         ) as t_writer:
 * 
 *             f_writer.write("{}\n\n".format(len(self.feature_to_idx)))             # <<<<<<<<<<<<<<
 *             t_writer.write("{}\n\n".format(len(self.tag_to_idx)))
 * 
 */
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_f_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u__10, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 460, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feature_to_idx); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 460, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_16 = PyObject_Length(__pyx_t_15); if (unlikely(__pyx_t_16 == ((Py_ssize_t)-1))) __PYX_ERR(0, 460, __pyx_L31_error)
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __pyx_t_15 = PyInt_FromSsize_t(__pyx_t_16); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 460, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_17 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
                    if (likely(__pyx_t_17)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                      __Pyx_INCREF(__pyx_t_17);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_5, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_17, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15);
                  __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __pyx_t_5 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_5)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_5);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                  /* "pkuseg/feature_extractor.pyx":461
 * 
 *             f_writer.write("{}\n\n".format(len(self.feature_to_idx)))
 *             t_writer.write("{}\n\n".format(len(self.tag_to_idx)))             # <<<<<<<<<<<<<<
 * 
 *             tags_idx = []  # type: List[str]
 */
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_t_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u__10, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 461, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_tag_to_idx); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 461, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_16 = PyObject_Length(__pyx_t_15); if (unlikely(__pyx_t_16 == ((Py_ssize_t)-1))) __PYX_ERR(0, 461, __pyx_L31_error)
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __pyx_t_15 = PyInt_FromSsize_t(__pyx_t_16); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 461, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_17 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
                    if (likely(__pyx_t_17)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                      __Pyx_INCREF(__pyx_t_17);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_5, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_17, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15);
                  __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __pyx_t_5 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_5)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_5);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                  /* "pkuseg/feature_extractor.pyx":463
 *             t_writer.write("{}\n\n".format(len(self.tag_to_idx)))
 * 
 *             tags_idx = []  # type: List[str]             # <<<<<<<<<<<<<<
 *             features_idx = []  # type: List[List[str]]
 *             for line in lines:
 */
                  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_v_tags_idx = ((PyObject*)__pyx_t_2);
                  __pyx_t_2 = 0;

                  /* "pkuseg/feature_extractor.pyx":464
 * 
 *             tags_idx = []  # type: List[str]
 *             features_idx = []  # type: List[List[str]]             # <<<<<<<<<<<<<<
 *             for line in lines:
 *                 line = line.strip()
 */
                  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_v_features_idx = ((PyObject*)__pyx_t_2);
                  __pyx_t_2 = 0;

                  /* "pkuseg/feature_extractor.pyx":465
 *             tags_idx = []  # type: List[str]
 *             features_idx = []  # type: List[List[str]]
 *             for line in lines:             # <<<<<<<<<<<<<<
 *                 line = line.strip()
 *                 if not line:
 */
                  if (unlikely(!__pyx_v_lines)) { __Pyx_RaiseUnboundLocalError("lines"); __PYX_ERR(0, 465, __pyx_L31_error) }
                  if (likely(PyList_CheckExact(__pyx_v_lines)) || PyTuple_CheckExact(__pyx_v_lines)) {
                    __pyx_t_2 = __pyx_v_lines; __Pyx_INCREF(__pyx_t_2); __pyx_t_16 = 0;
                    __pyx_t_18 = NULL;
                  } else {
                    __pyx_t_16 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_lines); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    __pyx_t_18 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 465, __pyx_L31_error)
                  }
                  for (;;) {
                    if (likely(!__pyx_t_18)) {
                      if (likely(PyList_CheckExact(__pyx_t_2))) {
                        if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_2)) break;
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_16); __Pyx_INCREF(__pyx_t_3); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 465, __pyx_L31_error)
                        #else
                        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L31_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        #endif
                      } else {
                        if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_16); __Pyx_INCREF(__pyx_t_3); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 465, __pyx_L31_error)
                        #else
                        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L31_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        #endif
                      }
                    } else {
                      __pyx_t_3 = __pyx_t_18(__pyx_t_2);
                      if (unlikely(!__pyx_t_3)) {
                        PyObject* exc_type = PyErr_Occurred();
                        if (exc_type) {
                          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                          else __PYX_ERR(0, 465, __pyx_L31_error)
                        }
                        break;
                      }
                      __Pyx_GOTREF(__pyx_t_3);
                    }
                    __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_3);
                    __pyx_t_3 = 0;

                    /* "pkuseg/feature_extractor.pyx":466
 *             features_idx = []  # type: List[List[str]]
 *             for line in lines:
 *                 line = line.strip()             # <<<<<<<<<<<<<<
 *                 if not line:
 *                     # sentence finish
 */
                    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_5 = NULL;
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
                      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
                      if (likely(__pyx_t_5)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                        __Pyx_INCREF(__pyx_t_5);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_1, function);
                      }
                    }
                    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
                    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 466, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_3);
                    __pyx_t_3 = 0;

                    /* "pkuseg/feature_extractor.pyx":467
 *             for line in lines:
 *                 line = line.strip()
 *                 if not line:             # <<<<<<<<<<<<<<
 *                     # sentence finish
 *                     for feature_idx in features_idx:
 */
                    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_line); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 467, __pyx_L31_error)
                    __pyx_t_10 = ((!__pyx_t_11) != 0);
                    if (__pyx_t_10) {

                      /* "pkuseg/feature_extractor.pyx":469
 *                 if not line:
 *                     # sentence finish
 *                     for feature_idx in features_idx:             # <<<<<<<<<<<<<<
 *                         if not feature_idx:
 *                             f_writer.write("0\n")
 */
                      __pyx_t_3 = __pyx_v_features_idx; __Pyx_INCREF(__pyx_t_3); __pyx_t_19 = 0;
                      for (;;) {
                        if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_3)) break;
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_19); __Pyx_INCREF(__pyx_t_1); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 469, __pyx_L31_error)
                        #else
                        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L31_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        #endif
                        __Pyx_XDECREF_SET(__pyx_v_feature_idx, __pyx_t_1);
                        __pyx_t_1 = 0;

                        /* "pkuseg/feature_extractor.pyx":470
 *                     # sentence finish
 *                     for feature_idx in features_idx:
 *                         if not feature_idx:             # <<<<<<<<<<<<<<
 *                             f_writer.write("0\n")
 *                         else:
 */
                        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_feature_idx); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 470, __pyx_L31_error)
                        __pyx_t_11 = ((!__pyx_t_10) != 0);
                        if (__pyx_t_11) {

                          /* "pkuseg/feature_extractor.pyx":471
 *                     for feature_idx in features_idx:
 *                         if not feature_idx:
 *                             f_writer.write("0\n")             # <<<<<<<<<<<<<<
 *                         else:
 *                             f_writer.write(",".join(map(str, feature_idx)))
 */
                          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 471, __pyx_L31_error)
                          __Pyx_GOTREF(__pyx_t_5);
                          __pyx_t_15 = NULL;
                          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
                            if (likely(__pyx_t_15)) {
                              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                              __Pyx_INCREF(__pyx_t_15);
                              __Pyx_INCREF(function);
                              __Pyx_DECREF_SET(__pyx_t_5, function);
                            }
                          }
                          __pyx_t_1 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_15, __pyx_kp_u_0) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_0);
                          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L31_error)
                          __Pyx_GOTREF(__pyx_t_1);
                          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

                          /* "pkuseg/feature_extractor.pyx":470
 *                     # sentence finish
 *                     for feature_idx in features_idx:
 *                         if not feature_idx:             # <<<<<<<<<<<<<<
 *                             f_writer.write("0\n")
 *                         else:
 */
                          goto __pyx_L42;
                        }

                        /* "pkuseg/feature_extractor.pyx":473
 *                             f_writer.write("0\n")
 *                         else:
 *                             f_writer.write(",".join(map(str, feature_idx)))             # <<<<<<<<<<<<<<
 *                             f_writer.write("\n")
 *                     f_writer.write("\n")
 */
                        /*else*/ {
                          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 473, __pyx_L31_error)
                          __Pyx_GOTREF(__pyx_t_5);
                          __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 473, __pyx_L31_error)
                          __Pyx_GOTREF(__pyx_t_15);
                          __Pyx_INCREF(((PyObject *)(&PyUnicode_Type)));
                          __Pyx_GIVEREF(((PyObject *)(&PyUnicode_Type)));
                          PyTuple_SET_ITEM(__pyx_t_15, 0, ((PyObject *)(&PyUnicode_Type)));
                          __Pyx_INCREF(__pyx_v_feature_idx);
                          __Pyx_GIVEREF(__pyx_v_feature_idx);
                          PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_v_feature_idx);
                          __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_15, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 473, __pyx_L31_error)
                          __Pyx_GOTREF(__pyx_t_17);
                          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                          __pyx_t_15 = PyUnicode_Join(__pyx_kp_u__11, __pyx_t_17); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 473, __pyx_L31_error)
                          __Pyx_GOTREF(__pyx_t_15);
                          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                          __pyx_t_17 = NULL;
                          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
                            if (likely(__pyx_t_17)) {
                              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                              __Pyx_INCREF(__pyx_t_17);
                              __Pyx_INCREF(function);
                              __Pyx_DECREF_SET(__pyx_t_5, function);
                            }
                          }
                          __pyx_t_1 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_17, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15);
                          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L31_error)
                          __Pyx_GOTREF(__pyx_t_1);
                          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

                          /* "pkuseg/feature_extractor.pyx":474
 *                         else:
 *                             f_writer.write(",".join(map(str, feature_idx)))
 *                             f_writer.write("\n")             # <<<<<<<<<<<<<<
 *                     f_writer.write("\n")
 * 
 */
                          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_f_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 474, __pyx_L31_error)
                          __Pyx_GOTREF(__pyx_t_5);
                          __pyx_t_15 = NULL;
                          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
                            if (likely(__pyx_t_15)) {
                              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                              __Pyx_INCREF(__pyx_t_15);
                              __Pyx_INCREF(function);
                              __Pyx_DECREF_SET(__pyx_t_5, function);
                            }
                          }
                          __pyx_t_1 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_15, __pyx_kp_u__12) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u__12);
                          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L31_error)
                          __Pyx_GOTREF(__pyx_t_1);
                          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                        }
                        __pyx_L42:;

                        /* "pkuseg/feature_extractor.pyx":469
 *                 if not line:
 *                     # sentence finish
 *                     for feature_idx in features_idx:             # <<<<<<<<<<<<<<
 *                         if not feature_idx:
 *                             f_writer.write("0\n")
 */
                      }
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                      /* "pkuseg/feature_extractor.pyx":475
 *                             f_writer.write(",".join(map(str, feature_idx)))
 *                             f_writer.write("\n")
 *                     f_writer.write("\n")             # <<<<<<<<<<<<<<
 * 
 *                     t_writer.write(",".join(map(str, tags_idx)))
 */
                      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L31_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_5 = NULL;
                      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
                        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
                        if (likely(__pyx_t_5)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                          __Pyx_INCREF(__pyx_t_5);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_1, function);
                        }
                      }
                      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_u__12) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u__12);
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L31_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                      /* "pkuseg/feature_extractor.pyx":477
 *                     f_writer.write("\n")
 * 
 *                     t_writer.write(",".join(map(str, tags_idx)))             # <<<<<<<<<<<<<<
 *                     t_writer.write("\n\n")
 * 
 */
                      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_t_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L31_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L31_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      __Pyx_INCREF(((PyObject *)(&PyUnicode_Type)));
                      __Pyx_GIVEREF(((PyObject *)(&PyUnicode_Type)));
                      PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)(&PyUnicode_Type)));
                      __Pyx_INCREF(__pyx_v_tags_idx);
                      __Pyx_GIVEREF(__pyx_v_tags_idx);
                      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_tags_idx);
                      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_5, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 477, __pyx_L31_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __pyx_t_5 = PyUnicode_Join(__pyx_kp_u__11, __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L31_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                      __pyx_t_15 = NULL;
                      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
                        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_1);
                        if (likely(__pyx_t_15)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                          __Pyx_INCREF(__pyx_t_15);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_1, function);
                        }
                      }
                      __pyx_t_3 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_15, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
                      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L31_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                      /* "pkuseg/feature_extractor.pyx":478
 * 
 *                     t_writer.write(",".join(map(str, tags_idx)))
 *                     t_writer.write("\n\n")             # <<<<<<<<<<<<<<
 * 
 *                     tags_idx = []
 */
                      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_t_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L31_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_5 = NULL;
                      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
                        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
                        if (likely(__pyx_t_5)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                          __Pyx_INCREF(__pyx_t_5);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_1, function);
                        }
                      }
                      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_u__13) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u__13);
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 478, __pyx_L31_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                      /* "pkuseg/feature_extractor.pyx":480
 *                     t_writer.write("\n\n")
 * 
 *                     tags_idx = []             # <<<<<<<<<<<<<<
 *                     features_idx = []
 *                     continue
 */
                      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 480, __pyx_L31_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF_SET(__pyx_v_tags_idx, ((PyObject*)__pyx_t_3));
                      __pyx_t_3 = 0;

                      /* "pkuseg/feature_extractor.pyx":481
 * 
 *                     tags_idx = []
 *                     features_idx = []             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
                      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 481, __pyx_L31_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF_SET(__pyx_v_features_idx, ((PyObject*)__pyx_t_3));
                      __pyx_t_3 = 0;

                      /* "pkuseg/feature_extractor.pyx":482
 *                     tags_idx = []
 *                     features_idx = []
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 splits = line.split(" ")
 */
                      goto __pyx_L37_continue;

                      /* "pkuseg/feature_extractor.pyx":467
 *             for line in lines:
 *                 line = line.strip()
 *                 if not line:             # <<<<<<<<<<<<<<
 *                     # sentence finish
 *                     for feature_idx in features_idx:
 */
                    }

                    /* "pkuseg/feature_extractor.pyx":484
 *                     continue
 * 
 *                 splits = line.split(" ")             # <<<<<<<<<<<<<<
 *                 feature_idx = [
 *                     self.feature_to_idx[feat]
 */
                    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_5 = NULL;
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
                      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
                      if (likely(__pyx_t_5)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                        __Pyx_INCREF(__pyx_t_5);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_1, function);
                      }
                    }
                    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_u__14) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u__14);
                    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_XDECREF_SET(__pyx_v_splits, __pyx_t_3);
                    __pyx_t_3 = 0;

                    /* "pkuseg/feature_extractor.pyx":485
 * 
 *                 splits = line.split(" ")
 *                 feature_idx = [             # <<<<<<<<<<<<<<
 *                     self.feature_to_idx[feat]
 *                     for feat in splits[:-1]
 */
                    { /* enter inner scope */
                      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 485, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_3);

                      /* "pkuseg/feature_extractor.pyx":487
 *                 feature_idx = [
 *                     self.feature_to_idx[feat]
 *                     for feat in splits[:-1]             # <<<<<<<<<<<<<<
 *                     if feat in self.feature_to_idx
 *                 ]
 */
                      __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_splits, 0, -1L, NULL, NULL, &__pyx_slice__15, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
                        __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_19 = 0;
                        __pyx_t_20 = NULL;
                      } else {
                        __pyx_t_19 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L45_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __pyx_t_20 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 487, __pyx_L45_error)
                      }
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      for (;;) {
                        if (likely(!__pyx_t_20)) {
                          if (likely(PyList_CheckExact(__pyx_t_5))) {
                            if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_5)) break;
                            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_1); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 487, __pyx_L45_error)
                            #else
                            __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L45_error)
                            __Pyx_GOTREF(__pyx_t_1);
                            #endif
                          } else {
                            if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_1); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 487, __pyx_L45_error)
                            #else
                            __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L45_error)
                            __Pyx_GOTREF(__pyx_t_1);
                            #endif
                          }
                        } else {
                          __pyx_t_1 = __pyx_t_20(__pyx_t_5);
                          if (unlikely(!__pyx_t_1)) {
                            PyObject* exc_type = PyErr_Occurred();
                            if (exc_type) {
                              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                              else __PYX_ERR(0, 487, __pyx_L45_error)
                            }
                            break;
                          }
                          __Pyx_GOTREF(__pyx_t_1);
                        }
                        __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_feat, __pyx_t_1);
                        __pyx_t_1 = 0;

                        /* "pkuseg/feature_extractor.pyx":488
 *                     self.feature_to_idx[feat]
 *                     for feat in splits[:-1]
 *                     if feat in self.feature_to_idx             # <<<<<<<<<<<<<<
 *                 ]
 *                 features_idx.append(feature_idx)
 */
                        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feature_to_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L45_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_8genexpr6__pyx_v_feat, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 488, __pyx_L45_error)
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                        __pyx_t_10 = (__pyx_t_11 != 0);
                        if (__pyx_t_10) {

                          /* "pkuseg/feature_extractor.pyx":486
 *                 splits = line.split(" ")
 *                 feature_idx = [
 *                     self.feature_to_idx[feat]             # <<<<<<<<<<<<<<
 *                     for feat in splits[:-1]
 *                     if feat in self.feature_to_idx
 */
                          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feature_to_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L45_error)
                          __Pyx_GOTREF(__pyx_t_1);
                          __pyx_t_15 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_8genexpr6__pyx_v_feat); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 486, __pyx_L45_error)
                          __Pyx_GOTREF(__pyx_t_15);
                          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 485, __pyx_L45_error)
                          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                          /* "pkuseg/feature_extractor.pyx":488
 *                     self.feature_to_idx[feat]
 *                     for feat in splits[:-1]
 *                     if feat in self.feature_to_idx             # <<<<<<<<<<<<<<
 *                 ]
 *                 features_idx.append(feature_idx)
 */
                        }

                        /* "pkuseg/feature_extractor.pyx":487
 *                 feature_idx = [
 *                     self.feature_to_idx[feat]
 *                     for feat in splits[:-1]             # <<<<<<<<<<<<<<
 *                     if feat in self.feature_to_idx
 *                 ]
 */
                      }
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_feat); __pyx_8genexpr6__pyx_v_feat = 0;
                      goto __pyx_L49_exit_scope;
                      __pyx_L45_error:;
                      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_feat); __pyx_8genexpr6__pyx_v_feat = 0;
                      goto __pyx_L31_error;
                      __pyx_L49_exit_scope:;
                    } /* exit inner scope */
                    __Pyx_XDECREF_SET(__pyx_v_feature_idx, __pyx_t_3);
                    __pyx_t_3 = 0;

                    /* "pkuseg/feature_extractor.pyx":490
 *                     if feat in self.feature_to_idx
 *                 ]
 *                 features_idx.append(feature_idx)             # <<<<<<<<<<<<<<
 *                 tags_idx.append(self.tag_to_idx[splits[-1]])
 * 
 */
                    __pyx_t_21 = __Pyx_PyList_Append(__pyx_v_features_idx, __pyx_v_feature_idx); if (unlikely(__pyx_t_21 == ((int)-1))) __PYX_ERR(0, 490, __pyx_L31_error)

                    /* "pkuseg/feature_extractor.pyx":491
 *                 ]
 *                 features_idx.append(feature_idx)
 *                 tags_idx.append(self.tag_to_idx[splits[-1]])             # <<<<<<<<<<<<<<
 * 
 *     def convert_text_file_to_feature_file(
 */
                    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_tag_to_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_splits, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 491, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __pyx_t_15 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 491, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __pyx_t_21 = __Pyx_PyList_Append(__pyx_v_tags_idx, __pyx_t_15); if (unlikely(__pyx_t_21 == ((int)-1))) __PYX_ERR(0, 491, __pyx_L31_error)
                    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                    /* "pkuseg/feature_extractor.pyx":465
 *             tags_idx = []  # type: List[str]
 *             features_idx = []  # type: List[List[str]]
 *             for line in lines:             # <<<<<<<<<<<<<<
 *                 line = line.strip()
 *                 if not line:
 */
                    __pyx_L37_continue:;
                  }
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                  /* "pkuseg/feature_extractor.pyx":456
 *             lines = reader.readlines()
 * 
 *         with open(feature_idx_file, "w", encoding="utf8") as f_writer, open(             # <<<<<<<<<<<<<<
 *             tag_idx_file, "w", encoding="utf8"
 *         ) as t_writer:
 */
                }
                __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
                __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                goto __pyx_L36_try_end;
                __pyx_L31_error:;
                __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                /*except:*/ {
                  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.convert_feature_file_to_idx_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_15, &__pyx_t_5) < 0) __PYX_ERR(0, 456, __pyx_L33_except_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_GOTREF(__pyx_t_15);
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_3 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_15, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L33_except_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_3, NULL);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 456, __pyx_L33_except_error)
                  __Pyx_GOTREF(__pyx_t_22);
                  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_22);
                  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                  if (__pyx_t_10 < 0) __PYX_ERR(0, 456, __pyx_L33_except_error)
                  __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);
                  if (__pyx_t_11) {
                    __Pyx_GIVEREF(__pyx_t_2);
                    __Pyx_GIVEREF(__pyx_t_15);
                    __Pyx_XGIVEREF(__pyx_t_5);
                    __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_15, __pyx_t_5);
                    __pyx_t_2 = 0; __pyx_t_15 = 0; __pyx_t_5 = 0; 
                    __PYX_ERR(0, 456, __pyx_L33_except_error)
                  }
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                  goto __pyx_L32_exception_handled;
                }
                __pyx_L33_except_error:;
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_14);
                __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
                goto __pyx_L21_error;
                __pyx_L32_exception_handled:;
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_14);
                __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
                __pyx_L36_try_end:;
              }
            }
            /*finally:*/ {
              /*normal exit:*/{
                if (__pyx_t_9) {
                  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__6, NULL);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 456, __pyx_L21_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                }
                goto __pyx_L30;
              }
              __pyx_L30:;
            }
            goto __pyx_L53;
            __pyx_L27_error:;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L21_error;
            __pyx_L53:;
          }
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L26_try_end;
        __pyx_L21_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.convert_feature_file_to_idx_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_15, &__pyx_t_2) < 0) __PYX_ERR(0, 456, __pyx_L23_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_15, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L23_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 456, __pyx_L23_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_11 < 0) __PYX_ERR(0, 456, __pyx_L23_except_error)
          __pyx_t_10 = ((!(__pyx_t_11 != 0)) != 0);
          if (__pyx_t_10) {
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_2);
            __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_15, __pyx_t_2);
            __pyx_t_5 = 0; __pyx_t_15 = 0; __pyx_t_2 = 0; 
            __PYX_ERR(0, 456, __pyx_L23_except_error)
          }
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L22_exception_handled;
        }
        __pyx_L23_except_error:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_6);
        goto __pyx_L1_error;
        __pyx_L22_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_6);
        __pyx_L26_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_4) {
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__6, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 456, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        goto __pyx_L20;
      }
      __pyx_L20:;
    }
    goto __pyx_L57;
    __pyx_L17_error:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L1_error;
    __pyx_L57:;
  }

  /* "pkuseg/feature_extractor.pyx":449
 *         return flist
 * 
 *     def convert_feature_file_to_idx_file(             # <<<<<<<<<<<<<<
 *         self, feature_file, feature_idx_file, tag_idx_file
 *     ):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.convert_feature_file_to_idx_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_reader);
  __Pyx_XDECREF(__pyx_v_lines);
  __Pyx_XDECREF(__pyx_v_f_writer);
  __Pyx_XDECREF(__pyx_v_t_writer);
  __Pyx_XDECREF(__pyx_v_tags_idx);
  __Pyx_XDECREF(__pyx_v_features_idx);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_feature_idx);
  __Pyx_XDECREF(__pyx_v_splits);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_feat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":493
 *                 tags_idx.append(self.tag_to_idx[splits[-1]])
 * 
 *     def convert_text_file_to_feature_file(             # <<<<<<<<<<<<<<
 *         self, text_file, conll_file=None, feature_file=None
 *     ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_18convert_text_file_to_feature_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_18convert_text_file_to_feature_file = {"convert_text_file_to_feature_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_18convert_text_file_to_feature_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_18convert_text_file_to_feature_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_text_file = 0;
  PyObject *__pyx_v_conll_file = 0;
  PyObject *__pyx_v_feature_file = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convert_text_file_to_feature_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_text_file,&__pyx_n_s_conll_file,&__pyx_n_s_feature_file,0};
    PyObject* values[4] = {0,0,0,0};

    /* "pkuseg/feature_extractor.pyx":494
 * 
 *     def convert_text_file_to_feature_file(
 *         self, text_file, conll_file=None, feature_file=None             # <<<<<<<<<<<<<<
 *     ):
 * 
 */
    values[2] = ((PyObject *)((PyObject *)Py_None));
    values[3] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("convert_text_file_to_feature_file", 0, 2, 4, 1); __PYX_ERR(0, 493, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conll_file);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feature_file);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "convert_text_file_to_feature_file") < 0)) __PYX_ERR(0, 493, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_text_file = values[1];
    __pyx_v_conll_file = values[2];
    __pyx_v_feature_file = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convert_text_file_to_feature_file", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 493, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.convert_text_file_to_feature_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_17convert_text_file_to_feature_file(__pyx_self, __pyx_v_self, __pyx_v_text_file, __pyx_v_conll_file, __pyx_v_feature_file);

  /* "pkuseg/feature_extractor.pyx":493
 *                 tags_idx.append(self.tag_to_idx[splits[-1]])
 * 
 *     def convert_text_file_to_feature_file(             # <<<<<<<<<<<<<<
 *         self, text_file, conll_file=None, feature_file=None
 *     ):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_17convert_text_file_to_feature_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_text_file, PyObject *__pyx_v_conll_file, PyObject *__pyx_v_feature_file) {
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_B_single = NULL;
  PyObject *__pyx_v_I_first = NULL;
  PyObject *__pyx_v_I = NULL;
  PyObject *__pyx_v_I_end = NULL;
  PyObject *__pyx_v_conll_line_format = NULL;
  PyObject *__pyx_v_reader = NULL;
  PyObject *__pyx_v_c_writer = NULL;
  PyObject *__pyx_v_f_writer = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_words = NULL;
  PyObject *__pyx_v_example = NULL;
  PyObject *__pyx_v_tags = NULL;
  PyObject *__pyx_v_word = NULL;
  Py_ssize_t __pyx_v_word_length;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_character = NULL;
  PyObject *__pyx_v_tag = NULL;
  PyObject *__pyx_v_features = NULL;
  PyObject *__pyx_8genexpr7__pyx_v_feature = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  PyObject *__pyx_t_21 = NULL;
  Py_ssize_t __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  Py_ssize_t __pyx_t_24;
  PyObject *(*__pyx_t_25)(PyObject *);
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  int __pyx_t_29;
  int __pyx_t_30;
  PyObject *__pyx_t_31 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_text_file_to_feature_file", 0);
  __Pyx_INCREF(__pyx_v_conll_file);
  __Pyx_INCREF(__pyx_v_feature_file);

  /* "pkuseg/feature_extractor.pyx":497
 *     ):
 * 
 *         if conll_file is None:             # <<<<<<<<<<<<<<
 *             conll_file = "{}.conll{}".format(*os.path.split(text_file))
 *         if feature_file is None:
 */
  __pyx_t_1 = (__pyx_v_conll_file == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pkuseg/feature_extractor.pyx":498
 * 
 *         if conll_file is None:
 *             conll_file = "{}.conll{}".format(*os.path.split(text_file))             # <<<<<<<<<<<<<<
 *         if feature_file is None:
 *             feature_file = "{}.feat{}".format(*os.path.split(text_file))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_conll, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_path); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_text_file) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_text_file);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PySequence_Tuple(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_conll_file, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pkuseg/feature_extractor.pyx":497
 *     ):
 * 
 *         if conll_file is None:             # <<<<<<<<<<<<<<
 *             conll_file = "{}.conll{}".format(*os.path.split(text_file))
 *         if feature_file is None:
 */
  }

  /* "pkuseg/feature_extractor.pyx":499
 *         if conll_file is None:
 *             conll_file = "{}.conll{}".format(*os.path.split(text_file))
 *         if feature_file is None:             # <<<<<<<<<<<<<<
 *             feature_file = "{}.feat{}".format(*os.path.split(text_file))
 * 
 */
  __pyx_t_2 = (__pyx_v_feature_file == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pkuseg/feature_extractor.pyx":500
 *             conll_file = "{}.conll{}".format(*os.path.split(text_file))
 *         if feature_file is None:
 *             feature_file = "{}.feat{}".format(*os.path.split(text_file))             # <<<<<<<<<<<<<<
 * 
 *         if config.nLabel == 2:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_feat, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_v_text_file) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_text_file);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_feature_file, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":499
 *         if conll_file is None:
 *             conll_file = "{}.conll{}".format(*os.path.split(text_file))
 *         if feature_file is None:             # <<<<<<<<<<<<<<
 *             feature_file = "{}.feat{}".format(*os.path.split(text_file))
 * 
 */
  }

  /* "pkuseg/feature_extractor.pyx":502
 *             feature_file = "{}.feat{}".format(*os.path.split(text_file))
 * 
 *         if config.nLabel == 2:             # <<<<<<<<<<<<<<
 *             B = B_single = "B"
 *             I_first = I = I_end = "I"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_config); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_nLabel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "pkuseg/feature_extractor.pyx":503
 * 
 *         if config.nLabel == 2:
 *             B = B_single = "B"             # <<<<<<<<<<<<<<
 *             I_first = I = I_end = "I"
 *         elif config.nLabel == 3:
 */
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B = __pyx_n_u_B;
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B_single = __pyx_n_u_B;

    /* "pkuseg/feature_extractor.pyx":504
 *         if config.nLabel == 2:
 *             B = B_single = "B"
 *             I_first = I = I_end = "I"             # <<<<<<<<<<<<<<
 *         elif config.nLabel == 3:
 *             B = B_single = "B"
 */
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I_first = __pyx_n_u_I;
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I = __pyx_n_u_I;
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I_end = __pyx_n_u_I;

    /* "pkuseg/feature_extractor.pyx":502
 *             feature_file = "{}.feat{}".format(*os.path.split(text_file))
 * 
 *         if config.nLabel == 2:             # <<<<<<<<<<<<<<
 *             B = B_single = "B"
 *             I_first = I = I_end = "I"
 */
    goto __pyx_L5;
  }

  /* "pkuseg/feature_extractor.pyx":505
 *             B = B_single = "B"
 *             I_first = I = I_end = "I"
 *         elif config.nLabel == 3:             # <<<<<<<<<<<<<<
 *             B = B_single = "B"
 *             I_first = I = "I"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_config); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_nLabel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "pkuseg/feature_extractor.pyx":506
 *             I_first = I = I_end = "I"
 *         elif config.nLabel == 3:
 *             B = B_single = "B"             # <<<<<<<<<<<<<<
 *             I_first = I = "I"
 *             I_end = "I_end"
 */
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B = __pyx_n_u_B;
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B_single = __pyx_n_u_B;

    /* "pkuseg/feature_extractor.pyx":507
 *         elif config.nLabel == 3:
 *             B = B_single = "B"
 *             I_first = I = "I"             # <<<<<<<<<<<<<<
 *             I_end = "I_end"
 *         elif config.nLabel == 4:
 */
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I_first = __pyx_n_u_I;
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I = __pyx_n_u_I;

    /* "pkuseg/feature_extractor.pyx":508
 *             B = B_single = "B"
 *             I_first = I = "I"
 *             I_end = "I_end"             # <<<<<<<<<<<<<<
 *         elif config.nLabel == 4:
 *             B = "B"
 */
    __Pyx_INCREF(__pyx_n_u_I_end);
    __pyx_v_I_end = __pyx_n_u_I_end;

    /* "pkuseg/feature_extractor.pyx":505
 *             B = B_single = "B"
 *             I_first = I = I_end = "I"
 *         elif config.nLabel == 3:             # <<<<<<<<<<<<<<
 *             B = B_single = "B"
 *             I_first = I = "I"
 */
    goto __pyx_L5;
  }

  /* "pkuseg/feature_extractor.pyx":509
 *             I_first = I = "I"
 *             I_end = "I_end"
 *         elif config.nLabel == 4:             # <<<<<<<<<<<<<<
 *             B = "B"
 *             B_single = "B_single"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_config); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_nLabel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "pkuseg/feature_extractor.pyx":510
 *             I_end = "I_end"
 *         elif config.nLabel == 4:
 *             B = "B"             # <<<<<<<<<<<<<<
 *             B_single = "B_single"
 *             I_first = I = "I"
 */
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B = __pyx_n_u_B;

    /* "pkuseg/feature_extractor.pyx":511
 *         elif config.nLabel == 4:
 *             B = "B"
 *             B_single = "B_single"             # <<<<<<<<<<<<<<
 *             I_first = I = "I"
 *             I_end = "I_end"
 */
    __Pyx_INCREF(__pyx_n_u_B_single);
    __pyx_v_B_single = __pyx_n_u_B_single;

    /* "pkuseg/feature_extractor.pyx":512
 *             B = "B"
 *             B_single = "B_single"
 *             I_first = I = "I"             # <<<<<<<<<<<<<<
 *             I_end = "I_end"
 *         elif config.nLabel == 5:
 */
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I_first = __pyx_n_u_I;
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I = __pyx_n_u_I;

    /* "pkuseg/feature_extractor.pyx":513
 *             B_single = "B_single"
 *             I_first = I = "I"
 *             I_end = "I_end"             # <<<<<<<<<<<<<<
 *         elif config.nLabel == 5:
 *             B = "B"
 */
    __Pyx_INCREF(__pyx_n_u_I_end);
    __pyx_v_I_end = __pyx_n_u_I_end;

    /* "pkuseg/feature_extractor.pyx":509
 *             I_first = I = "I"
 *             I_end = "I_end"
 *         elif config.nLabel == 4:             # <<<<<<<<<<<<<<
 *             B = "B"
 *             B_single = "B_single"
 */
    goto __pyx_L5;
  }

  /* "pkuseg/feature_extractor.pyx":514
 *             I_first = I = "I"
 *             I_end = "I_end"
 *         elif config.nLabel == 5:             # <<<<<<<<<<<<<<
 *             B = "B"
 *             B_single = "B_single"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_config); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_nLabel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_5, 5, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "pkuseg/feature_extractor.pyx":515
 *             I_end = "I_end"
 *         elif config.nLabel == 5:
 *             B = "B"             # <<<<<<<<<<<<<<
 *             B_single = "B_single"
 *             I_first = "I_first"
 */
    __Pyx_INCREF(__pyx_n_u_B);
    __pyx_v_B = __pyx_n_u_B;

    /* "pkuseg/feature_extractor.pyx":516
 *         elif config.nLabel == 5:
 *             B = "B"
 *             B_single = "B_single"             # <<<<<<<<<<<<<<
 *             I_first = "I_first"
 *             I = "I"
 */
    __Pyx_INCREF(__pyx_n_u_B_single);
    __pyx_v_B_single = __pyx_n_u_B_single;

    /* "pkuseg/feature_extractor.pyx":517
 *             B = "B"
 *             B_single = "B_single"
 *             I_first = "I_first"             # <<<<<<<<<<<<<<
 *             I = "I"
 *             I_end = "I_end"
 */
    __Pyx_INCREF(__pyx_n_u_I_first);
    __pyx_v_I_first = __pyx_n_u_I_first;

    /* "pkuseg/feature_extractor.pyx":518
 *             B_single = "B_single"
 *             I_first = "I_first"
 *             I = "I"             # <<<<<<<<<<<<<<
 *             I_end = "I_end"
 * 
 */
    __Pyx_INCREF(__pyx_n_u_I);
    __pyx_v_I = __pyx_n_u_I;

    /* "pkuseg/feature_extractor.pyx":519
 *             I_first = "I_first"
 *             I = "I"
 *             I_end = "I_end"             # <<<<<<<<<<<<<<
 * 
 *         conll_line_format = "{} {}\n"
 */
    __Pyx_INCREF(__pyx_n_u_I_end);
    __pyx_v_I_end = __pyx_n_u_I_end;

    /* "pkuseg/feature_extractor.pyx":514
 *             I_first = I = "I"
 *             I_end = "I_end"
 *         elif config.nLabel == 5:             # <<<<<<<<<<<<<<
 *             B = "B"
 *             B_single = "B_single"
 */
  }
  __pyx_L5:;

  /* "pkuseg/feature_extractor.pyx":521
 *             I_end = "I_end"
 * 
 *         conll_line_format = "{} {}\n"             # <<<<<<<<<<<<<<
 * 
 *         with open(text_file, "r", encoding="utf8") as reader, open(
 */
  __Pyx_INCREF(__pyx_kp_u__16);
  __pyx_v_conll_line_format = __pyx_kp_u__16;

  /* "pkuseg/feature_extractor.pyx":523
 *         conll_line_format = "{} {}\n"
 * 
 *         with open(text_file, "r", encoding="utf8") as reader, open(             # <<<<<<<<<<<<<<
 *             conll_file, "w", encoding="utf8"
 *         ) as c_writer, open(feature_file, "w", encoding="utf8") as f_writer:
 */
  /*with:*/ {
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_text_file);
    __Pyx_GIVEREF(__pyx_v_text_file);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_text_file);
    __Pyx_INCREF(__pyx_n_u_r);
    __Pyx_GIVEREF(__pyx_n_u_r);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_u_r);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 523, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {
          __pyx_v_reader = __pyx_t_5;
          __pyx_t_5 = 0;
          /*with:*/ {

            /* "pkuseg/feature_extractor.pyx":524
 * 
 *         with open(text_file, "r", encoding="utf8") as reader, open(
 *             conll_file, "w", encoding="utf8"             # <<<<<<<<<<<<<<
 *         ) as c_writer, open(feature_file, "w", encoding="utf8") as f_writer:
 *             for line in reader:
 */
            __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 523, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_v_conll_file);
            __Pyx_GIVEREF(__pyx_v_conll_file);
            PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_conll_file);
            __Pyx_INCREF(__pyx_n_u_w);
            __Pyx_GIVEREF(__pyx_n_u_w);
            PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_u_w);
            __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 524, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 524, __pyx_L10_error)

            /* "pkuseg/feature_extractor.pyx":523
 *         conll_line_format = "{} {}\n"
 * 
 *         with open(text_file, "r", encoding="utf8") as reader, open(             # <<<<<<<<<<<<<<
 *             conll_file, "w", encoding="utf8"
 *         ) as c_writer, open(feature_file, "w", encoding="utf8") as f_writer:
 */
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_11 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 523, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 523, __pyx_L16_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 523, __pyx_L16_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __pyx_t_4;
            __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            /*try:*/ {
              {
                __Pyx_PyThreadState_declare
                __Pyx_PyThreadState_assign
                __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
                __Pyx_XGOTREF(__pyx_t_12);
                __Pyx_XGOTREF(__pyx_t_13);
                __Pyx_XGOTREF(__pyx_t_14);
                /*try:*/ {
                  __pyx_v_c_writer = __pyx_t_5;
                  __pyx_t_5 = 0;

                  /* "pkuseg/feature_extractor.pyx":525
 *         with open(text_file, "r", encoding="utf8") as reader, open(
 *             conll_file, "w", encoding="utf8"
 *         ) as c_writer, open(feature_file, "w", encoding="utf8") as f_writer:             # <<<<<<<<<<<<<<
 *             for line in reader:
 *                 line = line.strip()
 */
                  /*with:*/ {
                    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 525, __pyx_L20_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_INCREF(__pyx_v_feature_file);
                    __Pyx_GIVEREF(__pyx_v_feature_file);
                    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_feature_file);
                    __Pyx_INCREF(__pyx_n_u_w);
                    __Pyx_GIVEREF(__pyx_n_u_w);
                    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_u_w);
                    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L20_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 525, __pyx_L20_error)
                    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L20_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_t_15 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 525, __pyx_L20_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 525, __pyx_L26_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __pyx_t_6 = NULL;
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
                      if (likely(__pyx_t_6)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                        __Pyx_INCREF(__pyx_t_6);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_5, function);
                      }
                    }
                    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
                    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L26_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __pyx_t_5 = __pyx_t_3;
                    __pyx_t_3 = 0;
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    /*try:*/ {
                      {
                        __Pyx_PyThreadState_declare
                        __Pyx_PyThreadState_assign
                        __Pyx_ExceptionSave(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
                        __Pyx_XGOTREF(__pyx_t_16);
                        __Pyx_XGOTREF(__pyx_t_17);
                        __Pyx_XGOTREF(__pyx_t_18);
                        /*try:*/ {
                          __pyx_v_f_writer = __pyx_t_5;
                          __pyx_t_5 = 0;

                          /* "pkuseg/feature_extractor.pyx":526
 *             conll_file, "w", encoding="utf8"
 *         ) as c_writer, open(feature_file, "w", encoding="utf8") as f_writer:
 *             for line in reader:             # <<<<<<<<<<<<<<
 *                 line = line.strip()
 *                 if not line:
 */
                          if (likely(PyList_CheckExact(__pyx_v_reader)) || PyTuple_CheckExact(__pyx_v_reader)) {
                            __pyx_t_5 = __pyx_v_reader; __Pyx_INCREF(__pyx_t_5); __pyx_t_19 = 0;
                            __pyx_t_20 = NULL;
                          } else {
                            __pyx_t_19 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_reader); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 526, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_5);
                            __pyx_t_20 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 526, __pyx_L30_error)
                          }
                          for (;;) {
                            if (likely(!__pyx_t_20)) {
                              if (likely(PyList_CheckExact(__pyx_t_5))) {
                                if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_5)) break;
                                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_4); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 526, __pyx_L30_error)
                                #else
                                __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_4);
                                #endif
                              } else {
                                if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_4); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 526, __pyx_L30_error)
                                #else
                                __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_4);
                                #endif
                              }
                            } else {
                              __pyx_t_4 = __pyx_t_20(__pyx_t_5);
                              if (unlikely(!__pyx_t_4)) {
                                PyObject* exc_type = PyErr_Occurred();
                                if (exc_type) {
                                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                                  else __PYX_ERR(0, 526, __pyx_L30_error)
                                }
                                break;
                              }
                              __Pyx_GOTREF(__pyx_t_4);
                            }
                            __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_4);
                            __pyx_t_4 = 0;

                            /* "pkuseg/feature_extractor.pyx":527
 *         ) as c_writer, open(feature_file, "w", encoding="utf8") as f_writer:
 *             for line in reader:
 *                 line = line.strip()             # <<<<<<<<<<<<<<
 *                 if not line:
 *                     continue
 */
                            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_3);
                            __pyx_t_6 = NULL;
                            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
                              if (likely(__pyx_t_6)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                                __Pyx_INCREF(__pyx_t_6);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_3, function);
                              }
                            }
                            __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 527, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                            __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_4);
                            __pyx_t_4 = 0;

                            /* "pkuseg/feature_extractor.pyx":528
 *             for line in reader:
 *                 line = line.strip()
 *                 if not line:             # <<<<<<<<<<<<<<
 *                     continue
 *                 words = self.keyword_rename(line).split()
 */
                            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_line); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 528, __pyx_L30_error)
                            __pyx_t_2 = ((!__pyx_t_1) != 0);
                            if (__pyx_t_2) {

                              /* "pkuseg/feature_extractor.pyx":529
 *                 line = line.strip()
 *                 if not line:
 *                     continue             # <<<<<<<<<<<<<<
 *                 words = self.keyword_rename(line).split()
 *                 example = []
 */
                              goto __pyx_L36_continue;

                              /* "pkuseg/feature_extractor.pyx":528
 *             for line in reader:
 *                 line = line.strip()
 *                 if not line:             # <<<<<<<<<<<<<<
 *                     continue
 *                 words = self.keyword_rename(line).split()
 */
                            }

                            /* "pkuseg/feature_extractor.pyx":530
 *                 if not line:
 *                     continue
 *                 words = self.keyword_rename(line).split()             # <<<<<<<<<<<<<<
 *                 example = []
 *                 tags = []
 */
                            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_keyword_rename); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 530, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_6);
                            __pyx_t_21 = NULL;
                            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                              __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_6);
                              if (likely(__pyx_t_21)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                                __Pyx_INCREF(__pyx_t_21);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_6, function);
                              }
                            }
                            __pyx_t_3 = (__pyx_t_21) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_21, __pyx_v_line) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_line);
                            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 530, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_3);
                            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 530, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_6);
                            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                            __pyx_t_3 = NULL;
                            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
                              if (likely(__pyx_t_3)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                                __Pyx_INCREF(__pyx_t_3);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_6, function);
                              }
                            }
                            __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
                            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 530, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            __Pyx_XDECREF_SET(__pyx_v_words, __pyx_t_4);
                            __pyx_t_4 = 0;

                            /* "pkuseg/feature_extractor.pyx":531
 *                     continue
 *                 words = self.keyword_rename(line).split()
 *                 example = []             # <<<<<<<<<<<<<<
 *                 tags = []
 *                 for word in words:
 */
                            __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 531, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_XDECREF_SET(__pyx_v_example, ((PyObject*)__pyx_t_4));
                            __pyx_t_4 = 0;

                            /* "pkuseg/feature_extractor.pyx":532
 *                 words = self.keyword_rename(line).split()
 *                 example = []
 *                 tags = []             # <<<<<<<<<<<<<<
 *                 for word in words:
 *                     word_length = len(word)
 */
                            __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 532, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_XDECREF_SET(__pyx_v_tags, ((PyObject*)__pyx_t_4));
                            __pyx_t_4 = 0;

                            /* "pkuseg/feature_extractor.pyx":533
 *                 example = []
 *                 tags = []
 *                 for word in words:             # <<<<<<<<<<<<<<
 *                     word_length = len(word)
 *                     for idx, character in enumerate(word):
 */
                            if (likely(PyList_CheckExact(__pyx_v_words)) || PyTuple_CheckExact(__pyx_v_words)) {
                              __pyx_t_4 = __pyx_v_words; __Pyx_INCREF(__pyx_t_4); __pyx_t_22 = 0;
                              __pyx_t_23 = NULL;
                            } else {
                              __pyx_t_22 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_words); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 533, __pyx_L30_error)
                              __Pyx_GOTREF(__pyx_t_4);
                              __pyx_t_23 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 533, __pyx_L30_error)
                            }
                            for (;;) {
                              if (likely(!__pyx_t_23)) {
                                if (likely(PyList_CheckExact(__pyx_t_4))) {
                                  if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_4)) break;
                                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                  __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_22); __Pyx_INCREF(__pyx_t_6); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 533, __pyx_L30_error)
                                  #else
                                  __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 533, __pyx_L30_error)
                                  __Pyx_GOTREF(__pyx_t_6);
                                  #endif
                                } else {
                                  if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
                                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                  __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_22); __Pyx_INCREF(__pyx_t_6); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 533, __pyx_L30_error)
                                  #else
                                  __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 533, __pyx_L30_error)
                                  __Pyx_GOTREF(__pyx_t_6);
                                  #endif
                                }
                              } else {
                                __pyx_t_6 = __pyx_t_23(__pyx_t_4);
                                if (unlikely(!__pyx_t_6)) {
                                  PyObject* exc_type = PyErr_Occurred();
                                  if (exc_type) {
                                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                                    else __PYX_ERR(0, 533, __pyx_L30_error)
                                  }
                                  break;
                                }
                                __Pyx_GOTREF(__pyx_t_6);
                              }
                              __Pyx_XDECREF_SET(__pyx_v_word, __pyx_t_6);
                              __pyx_t_6 = 0;

                              /* "pkuseg/feature_extractor.pyx":534
 *                 tags = []
 *                 for word in words:
 *                     word_length = len(word)             # <<<<<<<<<<<<<<
 *                     for idx, character in enumerate(word):
 *                         if word_length == 1:
 */
                              __pyx_t_24 = PyObject_Length(__pyx_v_word); if (unlikely(__pyx_t_24 == ((Py_ssize_t)-1))) __PYX_ERR(0, 534, __pyx_L30_error)
                              __pyx_v_word_length = __pyx_t_24;

                              /* "pkuseg/feature_extractor.pyx":535
 *                 for word in words:
 *                     word_length = len(word)
 *                     for idx, character in enumerate(word):             # <<<<<<<<<<<<<<
 *                         if word_length == 1:
 *                             tag = B_single
 */
                              __Pyx_INCREF(__pyx_int_0);
                              __pyx_t_6 = __pyx_int_0;
                              if (likely(PyList_CheckExact(__pyx_v_word)) || PyTuple_CheckExact(__pyx_v_word)) {
                                __pyx_t_3 = __pyx_v_word; __Pyx_INCREF(__pyx_t_3); __pyx_t_24 = 0;
                                __pyx_t_25 = NULL;
                              } else {
                                __pyx_t_24 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_word); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_3);
                                __pyx_t_25 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 535, __pyx_L30_error)
                              }
                              for (;;) {
                                if (likely(!__pyx_t_25)) {
                                  if (likely(PyList_CheckExact(__pyx_t_3))) {
                                    if (__pyx_t_24 >= PyList_GET_SIZE(__pyx_t_3)) break;
                                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                    __pyx_t_21 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_24); __Pyx_INCREF(__pyx_t_21); __pyx_t_24++; if (unlikely(0 < 0)) __PYX_ERR(0, 535, __pyx_L30_error)
                                    #else
                                    __pyx_t_21 = PySequence_ITEM(__pyx_t_3, __pyx_t_24); __pyx_t_24++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 535, __pyx_L30_error)
                                    __Pyx_GOTREF(__pyx_t_21);
                                    #endif
                                  } else {
                                    if (__pyx_t_24 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                    __pyx_t_21 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_24); __Pyx_INCREF(__pyx_t_21); __pyx_t_24++; if (unlikely(0 < 0)) __PYX_ERR(0, 535, __pyx_L30_error)
                                    #else
                                    __pyx_t_21 = PySequence_ITEM(__pyx_t_3, __pyx_t_24); __pyx_t_24++; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 535, __pyx_L30_error)
                                    __Pyx_GOTREF(__pyx_t_21);
                                    #endif
                                  }
                                } else {
                                  __pyx_t_21 = __pyx_t_25(__pyx_t_3);
                                  if (unlikely(!__pyx_t_21)) {
                                    PyObject* exc_type = PyErr_Occurred();
                                    if (exc_type) {
                                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                                      else __PYX_ERR(0, 535, __pyx_L30_error)
                                    }
                                    break;
                                  }
                                  __Pyx_GOTREF(__pyx_t_21);
                                }
                                __Pyx_XDECREF_SET(__pyx_v_character, __pyx_t_21);
                                __pyx_t_21 = 0;
                                __Pyx_INCREF(__pyx_t_6);
                                __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_6);
                                __pyx_t_21 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 535, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_21);
                                __Pyx_DECREF(__pyx_t_6);
                                __pyx_t_6 = __pyx_t_21;
                                __pyx_t_21 = 0;

                                /* "pkuseg/feature_extractor.pyx":536
 *                     word_length = len(word)
 *                     for idx, character in enumerate(word):
 *                         if word_length == 1:             # <<<<<<<<<<<<<<
 *                             tag = B_single
 *                         elif idx == 0:
 */
                                __pyx_t_2 = ((__pyx_v_word_length == 1) != 0);
                                if (__pyx_t_2) {

                                  /* "pkuseg/feature_extractor.pyx":537
 *                     for idx, character in enumerate(word):
 *                         if word_length == 1:
 *                             tag = B_single             # <<<<<<<<<<<<<<
 *                         elif idx == 0:
 *                             tag = B
 */
                                  if (unlikely(!__pyx_v_B_single)) { __Pyx_RaiseUnboundLocalError("B_single"); __PYX_ERR(0, 537, __pyx_L30_error) }
                                  __Pyx_INCREF(__pyx_v_B_single);
                                  __Pyx_XDECREF_SET(__pyx_v_tag, __pyx_v_B_single);

                                  /* "pkuseg/feature_extractor.pyx":536
 *                     word_length = len(word)
 *                     for idx, character in enumerate(word):
 *                         if word_length == 1:             # <<<<<<<<<<<<<<
 *                             tag = B_single
 *                         elif idx == 0:
 */
                                  goto __pyx_L43;
                                }

                                /* "pkuseg/feature_extractor.pyx":538
 *                         if word_length == 1:
 *                             tag = B_single
 *                         elif idx == 0:             # <<<<<<<<<<<<<<
 *                             tag = B
 *                         elif idx == word_length - 1:
 */
                                __pyx_t_21 = __Pyx_PyInt_EqObjC(__pyx_v_idx, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 538, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_21);
                                __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_21); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 538, __pyx_L30_error)
                                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                                if (__pyx_t_2) {

                                  /* "pkuseg/feature_extractor.pyx":539
 *                             tag = B_single
 *                         elif idx == 0:
 *                             tag = B             # <<<<<<<<<<<<<<
 *                         elif idx == word_length - 1:
 *                             tag = I_end
 */
                                  if (unlikely(!__pyx_v_B)) { __Pyx_RaiseUnboundLocalError("B"); __PYX_ERR(0, 539, __pyx_L30_error) }
                                  __Pyx_INCREF(__pyx_v_B);
                                  __Pyx_XDECREF_SET(__pyx_v_tag, __pyx_v_B);

                                  /* "pkuseg/feature_extractor.pyx":538
 *                         if word_length == 1:
 *                             tag = B_single
 *                         elif idx == 0:             # <<<<<<<<<<<<<<
 *                             tag = B
 *                         elif idx == word_length - 1:
 */
                                  goto __pyx_L43;
                                }

                                /* "pkuseg/feature_extractor.pyx":540
 *                         elif idx == 0:
 *                             tag = B
 *                         elif idx == word_length - 1:             # <<<<<<<<<<<<<<
 *                             tag = I_end
 *                         elif idx == 1:
 */
                                __pyx_t_21 = PyInt_FromSsize_t((__pyx_v_word_length - 1)); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 540, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_21);
                                __pyx_t_26 = PyObject_RichCompare(__pyx_v_idx, __pyx_t_21, Py_EQ); __Pyx_XGOTREF(__pyx_t_26); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 540, __pyx_L30_error)
                                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                                __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_26); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 540, __pyx_L30_error)
                                __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                                if (__pyx_t_2) {

                                  /* "pkuseg/feature_extractor.pyx":541
 *                             tag = B
 *                         elif idx == word_length - 1:
 *                             tag = I_end             # <<<<<<<<<<<<<<
 *                         elif idx == 1:
 *                             tag = I_first
 */
                                  if (unlikely(!__pyx_v_I_end)) { __Pyx_RaiseUnboundLocalError("I_end"); __PYX_ERR(0, 541, __pyx_L30_error) }
                                  __Pyx_INCREF(__pyx_v_I_end);
                                  __Pyx_XDECREF_SET(__pyx_v_tag, __pyx_v_I_end);

                                  /* "pkuseg/feature_extractor.pyx":540
 *                         elif idx == 0:
 *                             tag = B
 *                         elif idx == word_length - 1:             # <<<<<<<<<<<<<<
 *                             tag = I_end
 *                         elif idx == 1:
 */
                                  goto __pyx_L43;
                                }

                                /* "pkuseg/feature_extractor.pyx":542
 *                         elif idx == word_length - 1:
 *                             tag = I_end
 *                         elif idx == 1:             # <<<<<<<<<<<<<<
 *                             tag = I_first
 *                         else:
 */
                                __pyx_t_26 = __Pyx_PyInt_EqObjC(__pyx_v_idx, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 542, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_26);
                                __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_26); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 542, __pyx_L30_error)
                                __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                                if (__pyx_t_2) {

                                  /* "pkuseg/feature_extractor.pyx":543
 *                             tag = I_end
 *                         elif idx == 1:
 *                             tag = I_first             # <<<<<<<<<<<<<<
 *                         else:
 *                             tag = I
 */
                                  if (unlikely(!__pyx_v_I_first)) { __Pyx_RaiseUnboundLocalError("I_first"); __PYX_ERR(0, 543, __pyx_L30_error) }
                                  __Pyx_INCREF(__pyx_v_I_first);
                                  __Pyx_XDECREF_SET(__pyx_v_tag, __pyx_v_I_first);

                                  /* "pkuseg/feature_extractor.pyx":542
 *                         elif idx == word_length - 1:
 *                             tag = I_end
 *                         elif idx == 1:             # <<<<<<<<<<<<<<
 *                             tag = I_first
 *                         else:
 */
                                  goto __pyx_L43;
                                }

                                /* "pkuseg/feature_extractor.pyx":545
 *                             tag = I_first
 *                         else:
 *                             tag = I             # <<<<<<<<<<<<<<
 *                         c_writer.write(conll_line_format.format(character, tag))
 * 
 */
                                /*else*/ {
                                  if (unlikely(!__pyx_v_I)) { __Pyx_RaiseUnboundLocalError("I"); __PYX_ERR(0, 545, __pyx_L30_error) }
                                  __Pyx_INCREF(__pyx_v_I);
                                  __Pyx_XDECREF_SET(__pyx_v_tag, __pyx_v_I);
                                }
                                __pyx_L43:;

                                /* "pkuseg/feature_extractor.pyx":546
 *                         else:
 *                             tag = I
 *                         c_writer.write(conll_line_format.format(character, tag))             # <<<<<<<<<<<<<<
 * 
 *                         if config.numLetterNorm:
 */
                                __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_v_c_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 546, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_21);
                                __pyx_t_27 = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyUnicode_Type_format, __pyx_v_conll_line_format, __pyx_v_character, __pyx_v_tag); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 546, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_27);
                                __pyx_t_28 = NULL;
                                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_21))) {
                                  __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_21);
                                  if (likely(__pyx_t_28)) {
                                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
                                    __Pyx_INCREF(__pyx_t_28);
                                    __Pyx_INCREF(function);
                                    __Pyx_DECREF_SET(__pyx_t_21, function);
                                  }
                                }
                                __pyx_t_26 = (__pyx_t_28) ? __Pyx_PyObject_Call2Args(__pyx_t_21, __pyx_t_28, __pyx_t_27) : __Pyx_PyObject_CallOneArg(__pyx_t_21, __pyx_t_27);
                                __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
                                __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                                if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 546, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_26);
                                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                                __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

                                /* "pkuseg/feature_extractor.pyx":548
 *                         c_writer.write(conll_line_format.format(character, tag))
 * 
 *                         if config.numLetterNorm:             # <<<<<<<<<<<<<<
 *                             example.append(
 *                                 self._num_letter_normalize_char(character)
 */
                                __Pyx_GetModuleGlobalName(__pyx_t_26, __pyx_n_s_config); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 548, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_26);
                                __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_26, __pyx_n_s_numLetterNorm); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 548, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_21);
                                __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                                __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_21); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 548, __pyx_L30_error)
                                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                                if (__pyx_t_2) {

                                  /* "pkuseg/feature_extractor.pyx":550
 *                         if config.numLetterNorm:
 *                             example.append(
 *                                 self._num_letter_normalize_char(character)             # <<<<<<<<<<<<<<
 *                             )
 *                         else:
 */
                                  __pyx_t_26 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_num_letter_normalize_char); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 550, __pyx_L30_error)
                                  __Pyx_GOTREF(__pyx_t_26);
                                  __pyx_t_27 = NULL;
                                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_26))) {
                                    __pyx_t_27 = PyMethod_GET_SELF(__pyx_t_26);
                                    if (likely(__pyx_t_27)) {
                                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_26);
                                      __Pyx_INCREF(__pyx_t_27);
                                      __Pyx_INCREF(function);
                                      __Pyx_DECREF_SET(__pyx_t_26, function);
                                    }
                                  }
                                  __pyx_t_21 = (__pyx_t_27) ? __Pyx_PyObject_Call2Args(__pyx_t_26, __pyx_t_27, __pyx_v_character) : __Pyx_PyObject_CallOneArg(__pyx_t_26, __pyx_v_character);
                                  __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
                                  if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 550, __pyx_L30_error)
                                  __Pyx_GOTREF(__pyx_t_21);
                                  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

                                  /* "pkuseg/feature_extractor.pyx":549
 * 
 *                         if config.numLetterNorm:
 *                             example.append(             # <<<<<<<<<<<<<<
 *                                 self._num_letter_normalize_char(character)
 *                             )
 */
                                  __pyx_t_29 = __Pyx_PyList_Append(__pyx_v_example, __pyx_t_21); if (unlikely(__pyx_t_29 == ((int)-1))) __PYX_ERR(0, 549, __pyx_L30_error)
                                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

                                  /* "pkuseg/feature_extractor.pyx":548
 *                         c_writer.write(conll_line_format.format(character, tag))
 * 
 *                         if config.numLetterNorm:             # <<<<<<<<<<<<<<
 *                             example.append(
 *                                 self._num_letter_normalize_char(character)
 */
                                  goto __pyx_L44;
                                }

                                /* "pkuseg/feature_extractor.pyx":553
 *                             )
 *                         else:
 *                             example.append(character)             # <<<<<<<<<<<<<<
 *                         tags.append(tag)
 *                 c_writer.write("\n")
 */
                                /*else*/ {
                                  __pyx_t_29 = __Pyx_PyList_Append(__pyx_v_example, __pyx_v_character); if (unlikely(__pyx_t_29 == ((int)-1))) __PYX_ERR(0, 553, __pyx_L30_error)
                                }
                                __pyx_L44:;

                                /* "pkuseg/feature_extractor.pyx":554
 *                         else:
 *                             example.append(character)
 *                         tags.append(tag)             # <<<<<<<<<<<<<<
 *                 c_writer.write("\n")
 * 
 */
                                __pyx_t_29 = __Pyx_PyList_Append(__pyx_v_tags, __pyx_v_tag); if (unlikely(__pyx_t_29 == ((int)-1))) __PYX_ERR(0, 554, __pyx_L30_error)

                                /* "pkuseg/feature_extractor.pyx":535
 *                 for word in words:
 *                     word_length = len(word)
 *                     for idx, character in enumerate(word):             # <<<<<<<<<<<<<<
 *                         if word_length == 1:
 *                             tag = B_single
 */
                              }
                              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

                              /* "pkuseg/feature_extractor.pyx":533
 *                 example = []
 *                 tags = []
 *                 for word in words:             # <<<<<<<<<<<<<<
 *                     word_length = len(word)
 *                     for idx, character in enumerate(word):
 */
                            }
                            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                            /* "pkuseg/feature_extractor.pyx":555
 *                             example.append(character)
 *                         tags.append(tag)
 *                 c_writer.write("\n")             # <<<<<<<<<<<<<<
 * 
 *                 for idx, tag in enumerate(tags):
 */
                            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_c_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 555, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_6);
                            __pyx_t_3 = NULL;
                            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
                              if (likely(__pyx_t_3)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                                __Pyx_INCREF(__pyx_t_3);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_6, function);
                              }
                            }
                            __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_kp_u__12) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u__12);
                            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 555, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                            /* "pkuseg/feature_extractor.pyx":557
 *                 c_writer.write("\n")
 * 
 *                 for idx, tag in enumerate(tags):             # <<<<<<<<<<<<<<
 *                     features = self.get_node_features(idx, example)
 *                     features = [
 */
                            __Pyx_INCREF(__pyx_int_0);
                            __pyx_t_4 = __pyx_int_0;
                            __pyx_t_6 = __pyx_v_tags; __Pyx_INCREF(__pyx_t_6); __pyx_t_22 = 0;
                            for (;;) {
                              if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_6)) break;
                              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_22); __Pyx_INCREF(__pyx_t_3); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 557, __pyx_L30_error)
                              #else
                              __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L30_error)
                              __Pyx_GOTREF(__pyx_t_3);
                              #endif
                              __Pyx_XDECREF_SET(__pyx_v_tag, __pyx_t_3);
                              __pyx_t_3 = 0;
                              __Pyx_INCREF(__pyx_t_4);
                              __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_4);
                              __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L30_error)
                              __Pyx_GOTREF(__pyx_t_3);
                              __Pyx_DECREF(__pyx_t_4);
                              __pyx_t_4 = __pyx_t_3;
                              __pyx_t_3 = 0;

                              /* "pkuseg/feature_extractor.pyx":558
 * 
 *                 for idx, tag in enumerate(tags):
 *                     features = self.get_node_features(idx, example)             # <<<<<<<<<<<<<<
 *                     features = [
 *                         (feature if feature in self.feature_to_idx else "/")
 */
                              __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get_node_features); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 558, __pyx_L30_error)
                              __Pyx_GOTREF(__pyx_t_21);
                              __pyx_t_26 = NULL;
                              __pyx_t_30 = 0;
                              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_21))) {
                                __pyx_t_26 = PyMethod_GET_SELF(__pyx_t_21);
                                if (likely(__pyx_t_26)) {
                                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
                                  __Pyx_INCREF(__pyx_t_26);
                                  __Pyx_INCREF(function);
                                  __Pyx_DECREF_SET(__pyx_t_21, function);
                                  __pyx_t_30 = 1;
                                }
                              }
                              #if CYTHON_FAST_PYCALL
                              if (PyFunction_Check(__pyx_t_21)) {
                                PyObject *__pyx_temp[3] = {__pyx_t_26, __pyx_v_idx, __pyx_v_example};
                                __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_21, __pyx_temp+1-__pyx_t_30, 2+__pyx_t_30); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L30_error)
                                __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
                                __Pyx_GOTREF(__pyx_t_3);
                              } else
                              #endif
                              #if CYTHON_FAST_PYCCALL
                              if (__Pyx_PyFastCFunction_Check(__pyx_t_21)) {
                                PyObject *__pyx_temp[3] = {__pyx_t_26, __pyx_v_idx, __pyx_v_example};
                                __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_21, __pyx_temp+1-__pyx_t_30, 2+__pyx_t_30); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L30_error)
                                __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
                                __Pyx_GOTREF(__pyx_t_3);
                              } else
                              #endif
                              {
                                __pyx_t_27 = PyTuple_New(2+__pyx_t_30); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 558, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_27);
                                if (__pyx_t_26) {
                                  __Pyx_GIVEREF(__pyx_t_26); PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_26); __pyx_t_26 = NULL;
                                }
                                __Pyx_INCREF(__pyx_v_idx);
                                __Pyx_GIVEREF(__pyx_v_idx);
                                PyTuple_SET_ITEM(__pyx_t_27, 0+__pyx_t_30, __pyx_v_idx);
                                __Pyx_INCREF(__pyx_v_example);
                                __Pyx_GIVEREF(__pyx_v_example);
                                PyTuple_SET_ITEM(__pyx_t_27, 1+__pyx_t_30, __pyx_v_example);
                                __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_t_27, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L30_error)
                                __Pyx_GOTREF(__pyx_t_3);
                                __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                              }
                              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                              __Pyx_XDECREF_SET(__pyx_v_features, __pyx_t_3);
                              __pyx_t_3 = 0;

                              /* "pkuseg/feature_extractor.pyx":559
 *                 for idx, tag in enumerate(tags):
 *                     features = self.get_node_features(idx, example)
 *                     features = [             # <<<<<<<<<<<<<<
 *                         (feature if feature in self.feature_to_idx else "/")
 *                         for feature in features
 */
                              { /* enter inner scope */
                                __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 559, __pyx_L49_error)
                                __Pyx_GOTREF(__pyx_t_3);

                                /* "pkuseg/feature_extractor.pyx":561
 *                     features = [
 *                         (feature if feature in self.feature_to_idx else "/")
 *                         for feature in features             # <<<<<<<<<<<<<<
 *                     ]
 *                     features.append(tag)
 */
                                if (likely(PyList_CheckExact(__pyx_v_features)) || PyTuple_CheckExact(__pyx_v_features)) {
                                  __pyx_t_21 = __pyx_v_features; __Pyx_INCREF(__pyx_t_21); __pyx_t_24 = 0;
                                  __pyx_t_23 = NULL;
                                } else {
                                  __pyx_t_24 = -1; __pyx_t_21 = PyObject_GetIter(__pyx_v_features); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 561, __pyx_L49_error)
                                  __Pyx_GOTREF(__pyx_t_21);
                                  __pyx_t_23 = Py_TYPE(__pyx_t_21)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 561, __pyx_L49_error)
                                }
                                for (;;) {
                                  if (likely(!__pyx_t_23)) {
                                    if (likely(PyList_CheckExact(__pyx_t_21))) {
                                      if (__pyx_t_24 >= PyList_GET_SIZE(__pyx_t_21)) break;
                                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                      __pyx_t_27 = PyList_GET_ITEM(__pyx_t_21, __pyx_t_24); __Pyx_INCREF(__pyx_t_27); __pyx_t_24++; if (unlikely(0 < 0)) __PYX_ERR(0, 561, __pyx_L49_error)
                                      #else
                                      __pyx_t_27 = PySequence_ITEM(__pyx_t_21, __pyx_t_24); __pyx_t_24++; if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 561, __pyx_L49_error)
                                      __Pyx_GOTREF(__pyx_t_27);
                                      #endif
                                    } else {
                                      if (__pyx_t_24 >= PyTuple_GET_SIZE(__pyx_t_21)) break;
                                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                      __pyx_t_27 = PyTuple_GET_ITEM(__pyx_t_21, __pyx_t_24); __Pyx_INCREF(__pyx_t_27); __pyx_t_24++; if (unlikely(0 < 0)) __PYX_ERR(0, 561, __pyx_L49_error)
                                      #else
                                      __pyx_t_27 = PySequence_ITEM(__pyx_t_21, __pyx_t_24); __pyx_t_24++; if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 561, __pyx_L49_error)
                                      __Pyx_GOTREF(__pyx_t_27);
                                      #endif
                                    }
                                  } else {
                                    __pyx_t_27 = __pyx_t_23(__pyx_t_21);
                                    if (unlikely(!__pyx_t_27)) {
                                      PyObject* exc_type = PyErr_Occurred();
                                      if (exc_type) {
                                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                                        else __PYX_ERR(0, 561, __pyx_L49_error)
                                      }
                                      break;
                                    }
                                    __Pyx_GOTREF(__pyx_t_27);
                                  }
                                  __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_feature, __pyx_t_27);
                                  __pyx_t_27 = 0;

                                  /* "pkuseg/feature_extractor.pyx":560
 *                     features = self.get_node_features(idx, example)
 *                     features = [
 *                         (feature if feature in self.feature_to_idx else "/")             # <<<<<<<<<<<<<<
 *                         for feature in features
 *                     ]
 */
                                  __pyx_t_26 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feature_to_idx); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 560, __pyx_L49_error)
                                  __Pyx_GOTREF(__pyx_t_26);
                                  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_8genexpr7__pyx_v_feature, __pyx_t_26, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 560, __pyx_L49_error)
                                  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                                  if ((__pyx_t_2 != 0)) {
                                    __Pyx_INCREF(__pyx_8genexpr7__pyx_v_feature);
                                    __pyx_t_27 = __pyx_8genexpr7__pyx_v_feature;
                                  } else {
                                    __Pyx_INCREF(__pyx_kp_u__5);
                                    __pyx_t_27 = __pyx_kp_u__5;
                                  }
                                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_27))) __PYX_ERR(0, 559, __pyx_L49_error)
                                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;

                                  /* "pkuseg/feature_extractor.pyx":561
 *                     features = [
 *                         (feature if feature in self.feature_to_idx else "/")
 *                         for feature in features             # <<<<<<<<<<<<<<
 *                     ]
 *                     features.append(tag)
 */
                                }
                                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                                __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_feature); __pyx_8genexpr7__pyx_v_feature = 0;
                                goto __pyx_L52_exit_scope;
                                __pyx_L49_error:;
                                __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_feature); __pyx_8genexpr7__pyx_v_feature = 0;
                                goto __pyx_L30_error;
                                __pyx_L52_exit_scope:;
                              } /* exit inner scope */
                              __Pyx_DECREF_SET(__pyx_v_features, __pyx_t_3);
                              __pyx_t_3 = 0;

                              /* "pkuseg/feature_extractor.pyx":563
 *                         for feature in features
 *                     ]
 *                     features.append(tag)             # <<<<<<<<<<<<<<
 *                     f_writer.write(" ".join(features))
 *                     f_writer.write("\n")
 */
                              __pyx_t_29 = __Pyx_PyObject_Append(__pyx_v_features, __pyx_v_tag); if (unlikely(__pyx_t_29 == ((int)-1))) __PYX_ERR(0, 563, __pyx_L30_error)

                              /* "pkuseg/feature_extractor.pyx":564
 *                     ]
 *                     features.append(tag)
 *                     f_writer.write(" ".join(features))             # <<<<<<<<<<<<<<
 *                     f_writer.write("\n")
 *                 f_writer.write("\n")
 */
                              __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_v_f_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 564, __pyx_L30_error)
                              __Pyx_GOTREF(__pyx_t_21);
                              __pyx_t_27 = PyUnicode_Join(__pyx_kp_u__14, __pyx_v_features); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 564, __pyx_L30_error)
                              __Pyx_GOTREF(__pyx_t_27);
                              __pyx_t_26 = NULL;
                              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_21))) {
                                __pyx_t_26 = PyMethod_GET_SELF(__pyx_t_21);
                                if (likely(__pyx_t_26)) {
                                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
                                  __Pyx_INCREF(__pyx_t_26);
                                  __Pyx_INCREF(function);
                                  __Pyx_DECREF_SET(__pyx_t_21, function);
                                }
                              }
                              __pyx_t_3 = (__pyx_t_26) ? __Pyx_PyObject_Call2Args(__pyx_t_21, __pyx_t_26, __pyx_t_27) : __Pyx_PyObject_CallOneArg(__pyx_t_21, __pyx_t_27);
                              __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
                              __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 564, __pyx_L30_error)
                              __Pyx_GOTREF(__pyx_t_3);
                              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                              /* "pkuseg/feature_extractor.pyx":565
 *                     features.append(tag)
 *                     f_writer.write(" ".join(features))
 *                     f_writer.write("\n")             # <<<<<<<<<<<<<<
 *                 f_writer.write("\n")
 * 
 */
                              __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_v_f_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 565, __pyx_L30_error)
                              __Pyx_GOTREF(__pyx_t_21);
                              __pyx_t_27 = NULL;
                              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_21))) {
                                __pyx_t_27 = PyMethod_GET_SELF(__pyx_t_21);
                                if (likely(__pyx_t_27)) {
                                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
                                  __Pyx_INCREF(__pyx_t_27);
                                  __Pyx_INCREF(function);
                                  __Pyx_DECREF_SET(__pyx_t_21, function);
                                }
                              }
                              __pyx_t_3 = (__pyx_t_27) ? __Pyx_PyObject_Call2Args(__pyx_t_21, __pyx_t_27, __pyx_kp_u__12) : __Pyx_PyObject_CallOneArg(__pyx_t_21, __pyx_kp_u__12);
                              __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
                              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L30_error)
                              __Pyx_GOTREF(__pyx_t_3);
                              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                              /* "pkuseg/feature_extractor.pyx":557
 *                 c_writer.write("\n")
 * 
 *                 for idx, tag in enumerate(tags):             # <<<<<<<<<<<<<<
 *                     features = self.get_node_features(idx, example)
 *                     features = [
 */
                            }
                            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                            /* "pkuseg/feature_extractor.pyx":566
 *                     f_writer.write(" ".join(features))
 *                     f_writer.write("\n")
 *                 f_writer.write("\n")             # <<<<<<<<<<<<<<
 * 
 *     def save(self, model_dir=None):
 */
                            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_f_writer, __pyx_n_s_write); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 566, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_6);
                            __pyx_t_3 = NULL;
                            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
                              if (likely(__pyx_t_3)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                                __Pyx_INCREF(__pyx_t_3);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_6, function);
                              }
                            }
                            __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_kp_u__12) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u__12);
                            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 566, __pyx_L30_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                            /* "pkuseg/feature_extractor.pyx":526
 *             conll_file, "w", encoding="utf8"
 *         ) as c_writer, open(feature_file, "w", encoding="utf8") as f_writer:
 *             for line in reader:             # <<<<<<<<<<<<<<
 *                 line = line.strip()
 *                 if not line:
 */
                            __pyx_L36_continue:;
                          }
                          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

                          /* "pkuseg/feature_extractor.pyx":525
 *         with open(text_file, "r", encoding="utf8") as reader, open(
 *             conll_file, "w", encoding="utf8"
 *         ) as c_writer, open(feature_file, "w", encoding="utf8") as f_writer:             # <<<<<<<<<<<<<<
 *             for line in reader:
 *                 line = line.strip()
 */
                        }
                        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                        goto __pyx_L35_try_end;
                        __pyx_L30_error:;
                        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                        __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
                        __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
                        __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                        /*except:*/ {
                          __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.convert_text_file_to_feature_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
                          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_6) < 0) __PYX_ERR(0, 525, __pyx_L32_except_error)
                          __Pyx_GOTREF(__pyx_t_5);
                          __Pyx_GOTREF(__pyx_t_4);
                          __Pyx_GOTREF(__pyx_t_6);
                          __pyx_t_3 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L32_except_error)
                          __Pyx_GOTREF(__pyx_t_3);
                          __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_3, NULL);
                          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                          if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 525, __pyx_L32_except_error)
                          __Pyx_GOTREF(__pyx_t_31);
                          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_31);
                          __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                          if (__pyx_t_2 < 0) __PYX_ERR(0, 525, __pyx_L32_except_error)
                          __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
                          if (__pyx_t_1) {
                            __Pyx_GIVEREF(__pyx_t_5);
                            __Pyx_GIVEREF(__pyx_t_4);
                            __Pyx_XGIVEREF(__pyx_t_6);
                            __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_6);
                            __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_6 = 0; 
                            __PYX_ERR(0, 525, __pyx_L32_except_error)
                          }
                          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                          goto __pyx_L31_exception_handled;
                        }
                        __pyx_L32_except_error:;
                        __Pyx_XGIVEREF(__pyx_t_16);
                        __Pyx_XGIVEREF(__pyx_t_17);
                        __Pyx_XGIVEREF(__pyx_t_18);
                        __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
                        goto __pyx_L20_error;
                        __pyx_L31_exception_handled:;
                        __Pyx_XGIVEREF(__pyx_t_16);
                        __Pyx_XGIVEREF(__pyx_t_17);
                        __Pyx_XGIVEREF(__pyx_t_18);
                        __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
                        __pyx_L35_try_end:;
                      }
                    }
                    /*finally:*/ {
                      /*normal exit:*/{
                        if (__pyx_t_15) {
                          __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__6, NULL);
                          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                          if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 525, __pyx_L20_error)
                          __Pyx_GOTREF(__pyx_t_18);
                          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                        }
                        goto __pyx_L29;
                      }
                      __pyx_L29:;
                    }
                    goto __pyx_L56;
                    __pyx_L26_error:;
                    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    goto __pyx_L20_error;
                    __pyx_L56:;
                  }

                  /* "pkuseg/feature_extractor.pyx":523
 *         conll_line_format = "{} {}\n"
 * 
 *         with open(text_file, "r", encoding="utf8") as reader, open(             # <<<<<<<<<<<<<<
 *             conll_file, "w", encoding="utf8"
 *         ) as c_writer, open(feature_file, "w", encoding="utf8") as f_writer:
 */
                }
                __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
                __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                goto __pyx_L25_try_end;
                __pyx_L20_error:;
                __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
                __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
                __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                /*except:*/ {
                  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.convert_text_file_to_feature_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 523, __pyx_L22_except_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_3 = PyTuple_Pack(3, __pyx_t_6, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L22_except_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_3, NULL);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 523, __pyx_L22_except_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_15);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  if (__pyx_t_1 < 0) __PYX_ERR(0, 523, __pyx_L22_except_error)
                  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
                  if (__pyx_t_2) {
                    __Pyx_GIVEREF(__pyx_t_6);
                    __Pyx_GIVEREF(__pyx_t_4);
                    __Pyx_XGIVEREF(__pyx_t_5);
                    __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_4, __pyx_t_5);
                    __pyx_t_6 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0; 
                    __PYX_ERR(0, 523, __pyx_L22_except_error)
                  }
                  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                  goto __pyx_L21_exception_handled;
                }
                __pyx_L22_except_error:;
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_14);
                __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
                goto __pyx_L10_error;
                __pyx_L21_exception_handled:;
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_14);
                __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
                __pyx_L25_try_end:;
              }
            }
            /*finally:*/ {
              /*normal exit:*/{
                if (__pyx_t_11) {
                  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__6, NULL);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 523, __pyx_L10_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                }
                goto __pyx_L19;
              }
              __pyx_L19:;
            }
            goto __pyx_L60;
            __pyx_L16_error:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L10_error;
            __pyx_L60:;
          }
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L15_try_end;
        __pyx_L10_error:;
        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
        __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
        __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.convert_text_file_to_feature_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_6) < 0) __PYX_ERR(0, 523, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_3 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 523, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (__pyx_t_2 < 0) __PYX_ERR(0, 523, __pyx_L12_except_error)
          __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
          if (__pyx_t_1) {
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_XGIVEREF(__pyx_t_6);
            __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_6);
            __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_6 = 0; 
            __PYX_ERR(0, 523, __pyx_L12_except_error)
          }
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L11_exception_handled;
        }
        __pyx_L12_except_error:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L11_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L15_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_7) {
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__6, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 523, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        goto __pyx_L9;
      }
      __pyx_L9:;
    }
    goto __pyx_L64;
    __pyx_L6_error:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L1_error;
    __pyx_L64:;
  }

  /* "pkuseg/feature_extractor.pyx":493
 *                 tags_idx.append(self.tag_to_idx[splits[-1]])
 * 
 *     def convert_text_file_to_feature_file(             # <<<<<<<<<<<<<<
 *         self, text_file, conll_file=None, feature_file=None
 *     ):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.convert_text_file_to_feature_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_B_single);
  __Pyx_XDECREF(__pyx_v_I_first);
  __Pyx_XDECREF(__pyx_v_I);
  __Pyx_XDECREF(__pyx_v_I_end);
  __Pyx_XDECREF(__pyx_v_conll_line_format);
  __Pyx_XDECREF(__pyx_v_reader);
  __Pyx_XDECREF(__pyx_v_c_writer);
  __Pyx_XDECREF(__pyx_v_f_writer);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_words);
  __Pyx_XDECREF(__pyx_v_example);
  __Pyx_XDECREF(__pyx_v_tags);
  __Pyx_XDECREF(__pyx_v_word);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_character);
  __Pyx_XDECREF(__pyx_v_tag);
  __Pyx_XDECREF(__pyx_v_features);
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_feature);
  __Pyx_XDECREF(__pyx_v_conll_file);
  __Pyx_XDECREF(__pyx_v_feature_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":568
 *                 f_writer.write("\n")
 * 
 *     def save(self, model_dir=None):             # <<<<<<<<<<<<<<
 *         if model_dir is None:
 *             model_dir = config.modelDir
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_20save(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_20save = {"save", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_20save, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_20save(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_model_dir = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_model_dir,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_model_dir);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "save") < 0)) __PYX_ERR(0, 568, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_model_dir = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 568, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_19save(__pyx_self, __pyx_v_self, __pyx_v_model_dir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_19save(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_model_dir) {
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_writer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);
  __Pyx_INCREF(__pyx_v_model_dir);

  /* "pkuseg/feature_extractor.pyx":569
 * 
 *     def save(self, model_dir=None):
 *         if model_dir is None:             # <<<<<<<<<<<<<<
 *             model_dir = config.modelDir
 *         data = {}
 */
  __pyx_t_1 = (__pyx_v_model_dir == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pkuseg/feature_extractor.pyx":570
 *     def save(self, model_dir=None):
 *         if model_dir is None:
 *             model_dir = config.modelDir             # <<<<<<<<<<<<<<
 *         data = {}
 *         data["unigram"] = sorted(list(self.unigram))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_config); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_modelDir); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_model_dir, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pkuseg/feature_extractor.pyx":569
 * 
 *     def save(self, model_dir=None):
 *         if model_dir is None:             # <<<<<<<<<<<<<<
 *             model_dir = config.modelDir
 *         data = {}
 */
  }

  /* "pkuseg/feature_extractor.pyx":571
 *         if model_dir is None:
 *             model_dir = config.modelDir
 *         data = {}             # <<<<<<<<<<<<<<
 *         data["unigram"] = sorted(list(self.unigram))
 *         data["bigram"] = sorted(list(self.bigram))
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_data = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pkuseg/feature_extractor.pyx":572
 *             model_dir = config.modelDir
 *         data = {}
 *         data["unigram"] = sorted(list(self.unigram))             # <<<<<<<<<<<<<<
 *         data["bigram"] = sorted(list(self.bigram))
 *         data["feature_to_idx"] = self.feature_to_idx
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_unigram); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_6 = PyList_Sort(__pyx_t_4); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 572, __pyx_L1_error)
  if (unlikely(PyDict_SetItem(__pyx_v_data, __pyx_n_u_unigram, __pyx_t_4) < 0)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pkuseg/feature_extractor.pyx":573
 *         data = {}
 *         data["unigram"] = sorted(list(self.unigram))
 *         data["bigram"] = sorted(list(self.bigram))             # <<<<<<<<<<<<<<
 *         data["feature_to_idx"] = self.feature_to_idx
 *         data["tag_to_idx"] = self.tag_to_idx
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bigram); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_6 = PyList_Sort(__pyx_t_4); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 573, __pyx_L1_error)
  if (unlikely(PyDict_SetItem(__pyx_v_data, __pyx_n_u_bigram, __pyx_t_4) < 0)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pkuseg/feature_extractor.pyx":574
 *         data["unigram"] = sorted(list(self.unigram))
 *         data["bigram"] = sorted(list(self.bigram))
 *         data["feature_to_idx"] = self.feature_to_idx             # <<<<<<<<<<<<<<
 *         data["tag_to_idx"] = self.tag_to_idx
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feature_to_idx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyDict_SetItem(__pyx_v_data, __pyx_n_u_feature_to_idx, __pyx_t_4) < 0)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pkuseg/feature_extractor.pyx":575
 *         data["bigram"] = sorted(list(self.bigram))
 *         data["feature_to_idx"] = self.feature_to_idx
 *         data["tag_to_idx"] = self.tag_to_idx             # <<<<<<<<<<<<<<
 * 
 *         with open(os.path.join(model_dir, 'features.pkl'), 'wb') as writer:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_tag_to_idx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyDict_SetItem(__pyx_v_data, __pyx_n_u_tag_to_idx, __pyx_t_4) < 0)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pkuseg/feature_extractor.pyx":577
 *         data["tag_to_idx"] = self.tag_to_idx
 * 
 *         with open(os.path.join(model_dir, 'features.pkl'), 'wb') as writer:             # <<<<<<<<<<<<<<
 *             pickle.dump(data, writer, protocol=pickle.HIGHEST_PROTOCOL)
 * 
 */
  /*with:*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_model_dir, __pyx_kp_u_features_pkl};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_model_dir, __pyx_kp_u_features_pkl};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_model_dir);
      __Pyx_GIVEREF(__pyx_v_model_dir);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_model_dir);
      __Pyx_INCREF(__pyx_kp_u_features_pkl);
      __Pyx_GIVEREF(__pyx_kp_u_features_pkl);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_kp_u_features_pkl);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_u_wb);
    __Pyx_GIVEREF(__pyx_n_u_wb);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_u_wb);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_enter); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 577, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {
          __pyx_v_writer = __pyx_t_8;
          __pyx_t_8 = 0;

          /* "pkuseg/feature_extractor.pyx":578
 * 
 *         with open(os.path.join(model_dir, 'features.pkl'), 'wb') as writer:
 *             pickle.dump(data, writer, protocol=pickle.HIGHEST_PROTOCOL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_pickle); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 578, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_dump); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 578, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 578, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_v_data);
          __Pyx_GIVEREF(__pyx_v_data);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_data);
          __Pyx_INCREF(__pyx_v_writer);
          __Pyx_GIVEREF(__pyx_v_writer);
          PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_writer);
          __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 578, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pickle); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 578, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_HIGHEST_PROTOCOL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 578, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_protocol, __pyx_t_13) < 0) __PYX_ERR(0, 578, __pyx_L8_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 578, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "pkuseg/feature_extractor.pyx":577
 *         data["tag_to_idx"] = self.tag_to_idx
 * 
 *         with open(os.path.join(model_dir, 'features.pkl'), 'wb') as writer:             # <<<<<<<<<<<<<<
 *             pickle.dump(data, writer, protocol=pickle.HIGHEST_PROTOCOL)
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L13_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_13, &__pyx_t_3, &__pyx_t_8) < 0) __PYX_ERR(0, 577, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_4 = PyTuple_Pack(3, __pyx_t_13, __pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 577, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_4, NULL);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 577, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (__pyx_t_2 < 0) __PYX_ERR(0, 577, __pyx_L10_except_error)
          __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
          if (__pyx_t_1) {
            __Pyx_GIVEREF(__pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_8);
            __Pyx_ErrRestoreWithState(__pyx_t_13, __pyx_t_3, __pyx_t_8);
            __pyx_t_13 = 0; __pyx_t_3 = 0; __pyx_t_8 = 0; 
            __PYX_ERR(0, 577, __pyx_L10_except_error)
          }
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_L13_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_9) {
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__6, NULL);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 577, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L17;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L1_error;
    __pyx_L17:;
  }

  /* "pkuseg/feature_extractor.pyx":568
 *                 f_writer.write("\n")
 * 
 *     def save(self, model_dir=None):             # <<<<<<<<<<<<<<
 *         if model_dir is None:
 *             model_dir = config.modelDir
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_writer);
  __Pyx_XDECREF(__pyx_v_model_dir);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":587
 * 
 *     @classmethod
 *     def load(cls, model_dir=None):             # <<<<<<<<<<<<<<
 *         if model_dir is None:
 *             model_dir = config.modelDir
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_22load(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_22load = {"load", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_22load, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pkuseg_17feature_extractor_16FeatureExtractor_22load(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_model_dir = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,&__pyx_n_s_model_dir,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cls)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_model_dir);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load") < 0)) __PYX_ERR(0, 587, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cls = values[0];
    __pyx_v_model_dir = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 587, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_21load(__pyx_self, __pyx_v_cls, __pyx_v_model_dir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_4load_2generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pkuseg/feature_extractor.pyx":637
 *             encoding="utf8",
 *         ) as reader:
 *             extractor.bigram = set(line.strip() for line in reader)             # <<<<<<<<<<<<<<
 * 
 *         extractor.feature_to_idx = {}
 */

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_4load_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr *)__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr(__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 637, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_4load_2generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_FeatureExtractor_load_locals_gen, __pyx_n_s_pkuseg_feature_extractor); if (unlikely(!gen)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.load.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_4load_2generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 637, __pyx_L1_error)
  __pyx_r = PySet_New(NULL); if (unlikely(!__pyx_r)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_reader)) { __Pyx_RaiseClosureNameError("reader"); __PYX_ERR(0, 637, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_reader)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_reader)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_reader; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_reader); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 637, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 637, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 637, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 637, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 637, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 637, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(PySet_Add(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pkuseg/feature_extractor.pyx":587
 * 
 *     @classmethod
 *     def load(cls, model_dir=None):             # <<<<<<<<<<<<<<
 *         if model_dir is None:
 *             model_dir = config.modelDir
 */

static PyObject *__pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_21load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_model_dir) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *__pyx_cur_scope;
  PyObject *__pyx_v_extractor = NULL;
  PyObject *__pyx_v_feature_path = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_feature_base_name = NULL;
  long __pyx_v_i;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_feature = NULL;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_v_tag = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_line = NULL;
  PyObject *__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_4load_2generator4 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  long __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *)__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_5_load(__pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_5_load, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 587, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_INCREF(__pyx_v_model_dir);

  /* "pkuseg/feature_extractor.pyx":588
 *     @classmethod
 *     def load(cls, model_dir=None):
 *         if model_dir is None:             # <<<<<<<<<<<<<<
 *             model_dir = config.modelDir
 *         extractor = cls.__new__(cls)
 */
  __pyx_t_1 = (__pyx_v_model_dir == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pkuseg/feature_extractor.pyx":589
 *     def load(cls, model_dir=None):
 *         if model_dir is None:
 *             model_dir = config.modelDir             # <<<<<<<<<<<<<<
 *         extractor = cls.__new__(cls)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_config); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_modelDir); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_model_dir, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pkuseg/feature_extractor.pyx":588
 *     @classmethod
 *     def load(cls, model_dir=None):
 *         if model_dir is None:             # <<<<<<<<<<<<<<
 *             model_dir = config.modelDir
 *         extractor = cls.__new__(cls)
 */
  }

  /* "pkuseg/feature_extractor.pyx":590
 *         if model_dir is None:
 *             model_dir = config.modelDir
 *         extractor = cls.__new__(cls)             # <<<<<<<<<<<<<<
 * 
 *         feature_path = os.path.join(model_dir, "features.pkl")
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_v_cls) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_cls);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_extractor = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pkuseg/feature_extractor.pyx":592
 *         extractor = cls.__new__(cls)
 * 
 *         feature_path = os.path.join(model_dir, "features.pkl")             # <<<<<<<<<<<<<<
 *         if os.path.exists(feature_path):
 *             with open(feature_path, "rb") as reader:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_model_dir, __pyx_kp_u_features_pkl};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_model_dir, __pyx_kp_u_features_pkl};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_model_dir);
    __Pyx_GIVEREF(__pyx_v_model_dir);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_model_dir);
    __Pyx_INCREF(__pyx_kp_u_features_pkl);
    __Pyx_GIVEREF(__pyx_kp_u_features_pkl);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_kp_u_features_pkl);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_feature_path = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pkuseg/feature_extractor.pyx":593
 * 
 *         feature_path = os.path.join(model_dir, "features.pkl")
 *         if os.path.exists(feature_path):             # <<<<<<<<<<<<<<
 *             with open(feature_path, "rb") as reader:
 *                 data = pickle.load(reader)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_v_feature_path) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_feature_path);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "pkuseg/feature_extractor.pyx":594
 *         feature_path = os.path.join(model_dir, "features.pkl")
 *         if os.path.exists(feature_path):
 *             with open(feature_path, "rb") as reader:             # <<<<<<<<<<<<<<
 *                 data = pickle.load(reader)
 *             extractor.unigram = set(data["unigram"])
 */
    /*with:*/ {
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_feature_path);
      __Pyx_GIVEREF(__pyx_v_feature_path);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_feature_path);
      __Pyx_INCREF(__pyx_n_u_rb);
      __Pyx_GIVEREF(__pyx_n_u_rb);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_u_rb);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 594, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 594, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_11);
          /*try:*/ {
            __Pyx_GIVEREF(__pyx_t_7);
            __pyx_cur_scope->__pyx_v_reader = __pyx_t_7;
            __pyx_t_7 = 0;

            /* "pkuseg/feature_extractor.pyx":595
 *         if os.path.exists(feature_path):
 *             with open(feature_path, "rb") as reader:
 *                 data = pickle.load(reader)             # <<<<<<<<<<<<<<
 *             extractor.unigram = set(data["unigram"])
 *             extractor.bigram = set(data["bigram"])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pickle); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 595, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_load); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 595, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_cur_scope->__pyx_v_reader) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_reader);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 595, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_v_data = __pyx_t_7;
            __pyx_t_7 = 0;

            /* "pkuseg/feature_extractor.pyx":594
 *         feature_path = os.path.join(model_dir, "features.pkl")
 *         if os.path.exists(feature_path):
 *             with open(feature_path, "rb") as reader:             # <<<<<<<<<<<<<<
 *                 data = pickle.load(reader)
 *             extractor.unigram = set(data["unigram"])
 */
          }
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L14_try_end;
          __pyx_L9_error:;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_4, &__pyx_t_3) < 0) __PYX_ERR(0, 594, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_5 = PyTuple_Pack(3, __pyx_t_7, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 594, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 594, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_2 < 0) __PYX_ERR(0, 594, __pyx_L11_except_error)
            __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
            if (__pyx_t_1) {
              __Pyx_GIVEREF(__pyx_t_7);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_3);
              __Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_4, __pyx_t_3);
              __pyx_t_7 = 0; __pyx_t_4 = 0; __pyx_t_3 = 0; 
              __PYX_ERR(0, 594, __pyx_L11_except_error)
            }
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L10_exception_handled;
          }
          __pyx_L11_except_error:;
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
          goto __pyx_L1_error;
          __pyx_L10_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
          __pyx_L14_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_8) {
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__6, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 594, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
      goto __pyx_L18;
      __pyx_L5_error:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L1_error;
      __pyx_L18:;
    }

    /* "pkuseg/feature_extractor.pyx":596
 *             with open(feature_path, "rb") as reader:
 *                 data = pickle.load(reader)
 *             extractor.unigram = set(data["unigram"])             # <<<<<<<<<<<<<<
 *             extractor.bigram = set(data["bigram"])
 *             extractor.feature_to_idx = data["feature_to_idx"]
 */
    if (unlikely(!__pyx_v_data)) { __Pyx_RaiseUnboundLocalError("data"); __PYX_ERR(0, 596, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_data, __pyx_n_u_unigram); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_unigram, __pyx_t_4) < 0) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pkuseg/feature_extractor.pyx":597
 *                 data = pickle.load(reader)
 *             extractor.unigram = set(data["unigram"])
 *             extractor.bigram = set(data["bigram"])             # <<<<<<<<<<<<<<
 *             extractor.feature_to_idx = data["feature_to_idx"]
 *             extractor.tag_to_idx = data["tag_to_idx"]
 */
    if (unlikely(!__pyx_v_data)) { __Pyx_RaiseUnboundLocalError("data"); __PYX_ERR(0, 597, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_data, __pyx_n_u_bigram); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_bigram, __pyx_t_3) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":598
 *             extractor.unigram = set(data["unigram"])
 *             extractor.bigram = set(data["bigram"])
 *             extractor.feature_to_idx = data["feature_to_idx"]             # <<<<<<<<<<<<<<
 *             extractor.tag_to_idx = data["tag_to_idx"]
 * 
 */
    if (unlikely(!__pyx_v_data)) { __Pyx_RaiseUnboundLocalError("data"); __PYX_ERR(0, 598, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_data, __pyx_n_u_feature_to_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_feature_to_idx, __pyx_t_3) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":599
 *             extractor.bigram = set(data["bigram"])
 *             extractor.feature_to_idx = data["feature_to_idx"]
 *             extractor.tag_to_idx = data["tag_to_idx"]             # <<<<<<<<<<<<<<
 * 
 *             return extractor
 */
    if (unlikely(!__pyx_v_data)) { __Pyx_RaiseUnboundLocalError("data"); __PYX_ERR(0, 599, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_data, __pyx_n_u_tag_to_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 599, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_tag_to_idx, __pyx_t_3) < 0) __PYX_ERR(0, 599, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":601
 *             extractor.tag_to_idx = data["tag_to_idx"]
 * 
 *             return extractor             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_extractor);
    __pyx_r = __pyx_v_extractor;
    goto __pyx_L0;

    /* "pkuseg/feature_extractor.pyx":593
 * 
 *         feature_path = os.path.join(model_dir, "features.pkl")
 *         if os.path.exists(feature_path):             # <<<<<<<<<<<<<<
 *             with open(feature_path, "rb") as reader:
 *                 data = pickle.load(reader)
 */
  }

  /* "pkuseg/feature_extractor.pyx":606
 *         print(
 *             "WARNING: features.pkl does not exist, try loading features.json",
 *             file=sys.stderr,             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_sys); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_stderr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_file, __pyx_t_7) < 0) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pkuseg/feature_extractor.pyx":604
 * 
 * 
 *         print(             # <<<<<<<<<<<<<<
 *             "WARNING: features.pkl does not exist, try loading features.json",
 *             file=sys.stderr,
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__17, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pkuseg/feature_extractor.pyx":610
 * 
 * 
 *         feature_path = os.path.join(model_dir, "features.json")             # <<<<<<<<<<<<<<
 *         if os.path.exists(feature_path):
 *             with open(feature_path, "r", encoding="utf8") as reader:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_model_dir, __pyx_kp_u_features_json};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_model_dir, __pyx_kp_u_features_json};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_model_dir);
    __Pyx_GIVEREF(__pyx_v_model_dir);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_v_model_dir);
    __Pyx_INCREF(__pyx_kp_u_features_json);
    __Pyx_GIVEREF(__pyx_kp_u_features_json);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_kp_u_features_json);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_feature_path, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "pkuseg/feature_extractor.pyx":611
 * 
 *         feature_path = os.path.join(model_dir, "features.json")
 *         if os.path.exists(feature_path):             # <<<<<<<<<<<<<<
 *             with open(feature_path, "r", encoding="utf8") as reader:
 *                 data = json.load(reader)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_v_feature_path) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_feature_path);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_1) {

    /* "pkuseg/feature_extractor.pyx":612
 *         feature_path = os.path.join(model_dir, "features.json")
 *         if os.path.exists(feature_path):
 *             with open(feature_path, "r", encoding="utf8") as reader:             # <<<<<<<<<<<<<<
 *                 data = json.load(reader)
 *             extractor.unigram = set(data["unigram"])
 */
    /*with:*/ {
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_feature_path);
      __Pyx_GIVEREF(__pyx_v_feature_path);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_feature_path);
      __Pyx_INCREF(__pyx_n_u_r);
      __Pyx_GIVEREF(__pyx_n_u_r);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_n_u_r);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 612, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 612, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_9);
          /*try:*/ {
            __Pyx_GIVEREF(__pyx_t_7);
            __pyx_cur_scope->__pyx_v_reader = __pyx_t_7;
            __pyx_t_7 = 0;

            /* "pkuseg/feature_extractor.pyx":613
 *         if os.path.exists(feature_path):
 *             with open(feature_path, "r", encoding="utf8") as reader:
 *                 data = json.load(reader)             # <<<<<<<<<<<<<<
 *             extractor.unigram = set(data["unigram"])
 *             extractor.bigram = set(data["bigram"])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_json); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 613, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_load); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 613, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_cur_scope->__pyx_v_reader) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_cur_scope->__pyx_v_reader);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 613, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_v_data = __pyx_t_7;
            __pyx_t_7 = 0;

            /* "pkuseg/feature_extractor.pyx":612
 *         feature_path = os.path.join(model_dir, "features.json")
 *         if os.path.exists(feature_path):
 *             with open(feature_path, "r", encoding="utf8") as reader:             # <<<<<<<<<<<<<<
 *                 data = json.load(reader)
 *             extractor.unigram = set(data["unigram"])
 */
          }
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L29_try_end;
          __pyx_L24_error:;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_3, &__pyx_t_5) < 0) __PYX_ERR(0, 612, __pyx_L26_except_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = PyTuple_Pack(3, __pyx_t_7, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 612, __pyx_L26_except_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_4, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 612, __pyx_L26_except_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_1 < 0) __PYX_ERR(0, 612, __pyx_L26_except_error)
            __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
            if (__pyx_t_2) {
              __Pyx_GIVEREF(__pyx_t_7);
              __Pyx_GIVEREF(__pyx_t_3);
              __Pyx_XGIVEREF(__pyx_t_5);
              __Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_3, __pyx_t_5);
              __pyx_t_7 = 0; __pyx_t_3 = 0; __pyx_t_5 = 0; 
              __PYX_ERR(0, 612, __pyx_L26_except_error)
            }
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            goto __pyx_L25_exception_handled;
          }
          __pyx_L26_except_error:;
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
          goto __pyx_L1_error;
          __pyx_L25_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
          __pyx_L29_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_8) {
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__6, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 612, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          goto __pyx_L23;
        }
        __pyx_L23:;
      }
      goto __pyx_L33;
      __pyx_L20_error:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L1_error;
      __pyx_L33:;
    }

    /* "pkuseg/feature_extractor.pyx":614
 *             with open(feature_path, "r", encoding="utf8") as reader:
 *                 data = json.load(reader)
 *             extractor.unigram = set(data["unigram"])             # <<<<<<<<<<<<<<
 *             extractor.bigram = set(data["bigram"])
 *             extractor.feature_to_idx = data["feature_to_idx"]
 */
    if (unlikely(!__pyx_v_data)) { __Pyx_RaiseUnboundLocalError("data"); __PYX_ERR(0, 614, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_data, __pyx_n_u_unigram); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PySet_New(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_unigram, __pyx_t_3) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pkuseg/feature_extractor.pyx":615
 *                 data = json.load(reader)
 *             extractor.unigram = set(data["unigram"])
 *             extractor.bigram = set(data["bigram"])             # <<<<<<<<<<<<<<
 *             extractor.feature_to_idx = data["feature_to_idx"]
 *             extractor.tag_to_idx = data["tag_to_idx"]
 */
    if (unlikely(!__pyx_v_data)) { __Pyx_RaiseUnboundLocalError("data"); __PYX_ERR(0, 615, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_data, __pyx_n_u_bigram); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_bigram, __pyx_t_5) < 0) __PYX_ERR(0, 615, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":616
 *             extractor.unigram = set(data["unigram"])
 *             extractor.bigram = set(data["bigram"])
 *             extractor.feature_to_idx = data["feature_to_idx"]             # <<<<<<<<<<<<<<
 *             extractor.tag_to_idx = data["tag_to_idx"]
 *             extractor.save(model_dir)
 */
    if (unlikely(!__pyx_v_data)) { __Pyx_RaiseUnboundLocalError("data"); __PYX_ERR(0, 616, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_data, __pyx_n_u_feature_to_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_feature_to_idx, __pyx_t_5) < 0) __PYX_ERR(0, 616, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":617
 *             extractor.bigram = set(data["bigram"])
 *             extractor.feature_to_idx = data["feature_to_idx"]
 *             extractor.tag_to_idx = data["tag_to_idx"]             # <<<<<<<<<<<<<<
 *             extractor.save(model_dir)
 *             return extractor
 */
    if (unlikely(!__pyx_v_data)) { __Pyx_RaiseUnboundLocalError("data"); __PYX_ERR(0, 617, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_data, __pyx_n_u_tag_to_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_tag_to_idx, __pyx_t_5) < 0) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":618
 *             extractor.feature_to_idx = data["feature_to_idx"]
 *             extractor.tag_to_idx = data["tag_to_idx"]
 *             extractor.save(model_dir)             # <<<<<<<<<<<<<<
 *             return extractor
 *         print(
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_extractor, __pyx_n_s_save); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_v_model_dir) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_model_dir);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":619
 *             extractor.tag_to_idx = data["tag_to_idx"]
 *             extractor.save(model_dir)
 *             return extractor             # <<<<<<<<<<<<<<
 *         print(
 *             "WARNING: features.json does not exist, try loading using old format",
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_extractor);
    __pyx_r = __pyx_v_extractor;
    goto __pyx_L0;

    /* "pkuseg/feature_extractor.pyx":611
 * 
 *         feature_path = os.path.join(model_dir, "features.json")
 *         if os.path.exists(feature_path):             # <<<<<<<<<<<<<<
 *             with open(feature_path, "r", encoding="utf8") as reader:
 *                 data = json.load(reader)
 */
  }

  /* "pkuseg/feature_extractor.pyx":622
 *         print(
 *             "WARNING: features.json does not exist, try loading using old format",
 *             file=sys.stderr,             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stderr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_file, __pyx_t_7) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pkuseg/feature_extractor.pyx":620
 *             extractor.save(model_dir)
 *             return extractor
 *         print(             # <<<<<<<<<<<<<<
 *             "WARNING: features.json does not exist, try loading using old format",
 *             file=sys.stderr,
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__18, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pkuseg/feature_extractor.pyx":625
 *         )
 * 
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "unigram_word.txt"),
 *             "r",
 */
  /*with:*/ {

    /* "pkuseg/feature_extractor.pyx":626
 * 
 *         with open(
 *             os.path.join(model_dir, "unigram_word.txt"),             # <<<<<<<<<<<<<<
 *             "r",
 *             encoding="utf8",
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_model_dir, __pyx_kp_u_unigram_word_txt};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_model_dir, __pyx_kp_u_unigram_word_txt};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_model_dir);
      __Pyx_GIVEREF(__pyx_v_model_dir);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_model_dir);
      __Pyx_INCREF(__pyx_kp_u_unigram_word_txt);
      __Pyx_GIVEREF(__pyx_kp_u_unigram_word_txt);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_kp_u_unigram_word_txt);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":625
 *         )
 * 
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "unigram_word.txt"),
 *             "r",
 */
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
    __Pyx_INCREF(__pyx_n_u_r);
    __Pyx_GIVEREF(__pyx_n_u_r);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_u_r);
    __pyx_t_7 = 0;

    /* "pkuseg/feature_extractor.pyx":628
 *             os.path.join(model_dir, "unigram_word.txt"),
 *             "r",
 *             encoding="utf8",             # <<<<<<<<<<<<<<
 *         ) as reader:
 *             extractor.unigram = set([line.strip() for line in reader])
 */
    __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 628, __pyx_L1_error)

    /* "pkuseg/feature_extractor.pyx":625
 *         )
 * 
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "unigram_word.txt"),
 *             "r",
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 625, __pyx_L34_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 625, __pyx_L34_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        /*try:*/ {
          __Pyx_GIVEREF(__pyx_t_5);
          __pyx_cur_scope->__pyx_v_reader = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "pkuseg/feature_extractor.pyx":630
 *             encoding="utf8",
 *         ) as reader:
 *             extractor.unigram = set([line.strip() for line in reader])             # <<<<<<<<<<<<<<
 * 
 *         with open(
 */
          { /* enter inner scope */
            __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 630, __pyx_L46_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_reader)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_reader)) {
              __pyx_t_4 = __pyx_cur_scope->__pyx_v_reader; __Pyx_INCREF(__pyx_t_4); __pyx_t_13 = 0;
              __pyx_t_14 = NULL;
            } else {
              __pyx_t_13 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_reader); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 630, __pyx_L46_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_14 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 630, __pyx_L46_error)
            }
            for (;;) {
              if (likely(!__pyx_t_14)) {
                if (likely(PyList_CheckExact(__pyx_t_4))) {
                  if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_4)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_13); __Pyx_INCREF(__pyx_t_7); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 630, __pyx_L46_error)
                  #else
                  __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 630, __pyx_L46_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  #endif
                } else {
                  if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_13); __Pyx_INCREF(__pyx_t_7); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 630, __pyx_L46_error)
                  #else
                  __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 630, __pyx_L46_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  #endif
                }
              } else {
                __pyx_t_7 = __pyx_t_14(__pyx_t_4);
                if (unlikely(!__pyx_t_7)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 630, __pyx_L46_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_7);
              }
              __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_line, __pyx_t_7);
              __pyx_t_7 = 0;
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr8__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 630, __pyx_L46_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_15 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_15)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_15);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_7 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 630, __pyx_L46_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 630, __pyx_L46_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_line); __pyx_8genexpr8__pyx_v_line = 0;
            goto __pyx_L49_exit_scope;
            __pyx_L46_error:;
            __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_line); __pyx_8genexpr8__pyx_v_line = 0;
            goto __pyx_L38_error;
            __pyx_L49_exit_scope:;
          } /* exit inner scope */
          __pyx_t_4 = PySet_New(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 630, __pyx_L38_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_unigram, __pyx_t_4) < 0) __PYX_ERR(0, 630, __pyx_L38_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "pkuseg/feature_extractor.pyx":625
 *         )
 * 
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "unigram_word.txt"),
 *             "r",
 */
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L43_try_end;
        __pyx_L38_error:;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_7) < 0) __PYX_ERR(0, 625, __pyx_L40_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_3 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 625, __pyx_L40_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 625, __pyx_L40_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_2 < 0) __PYX_ERR(0, 625, __pyx_L40_except_error)
          __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
          if (__pyx_t_1) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_7);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_5, __pyx_t_7);
            __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_7 = 0; 
            __PYX_ERR(0, 625, __pyx_L40_except_error)
          }
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L39_exception_handled;
        }
        __pyx_L40_except_error:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        goto __pyx_L1_error;
        __pyx_L39_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        __pyx_L43_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_8) {
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__6, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 625, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        goto __pyx_L37;
      }
      __pyx_L37:;
    }
    goto __pyx_L53;
    __pyx_L34_error:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L1_error;
    __pyx_L53:;
  }

  /* "pkuseg/feature_extractor.pyx":632
 *             extractor.unigram = set([line.strip() for line in reader])
 * 
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "bigram_word.txt"),
 *             "r",
 */
  /*with:*/ {

    /* "pkuseg/feature_extractor.pyx":633
 * 
 *         with open(
 *             os.path.join(model_dir, "bigram_word.txt"),             # <<<<<<<<<<<<<<
 *             "r",
 *             encoding="utf8",
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_join); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_model_dir, __pyx_kp_u_bigram_word_txt};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 633, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_model_dir, __pyx_kp_u_bigram_word_txt};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 633, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 633, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_model_dir);
      __Pyx_GIVEREF(__pyx_v_model_dir);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_model_dir);
      __Pyx_INCREF(__pyx_kp_u_bigram_word_txt);
      __Pyx_GIVEREF(__pyx_kp_u_bigram_word_txt);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_kp_u_bigram_word_txt);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 633, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pkuseg/feature_extractor.pyx":632
 *             extractor.unigram = set([line.strip() for line in reader])
 * 
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "bigram_word.txt"),
 *             "r",
 */
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
    __Pyx_INCREF(__pyx_n_u_r);
    __Pyx_GIVEREF(__pyx_n_u_r);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_u_r);
    __pyx_t_7 = 0;

    /* "pkuseg/feature_extractor.pyx":635
 *             os.path.join(model_dir, "bigram_word.txt"),
 *             "r",
 *             encoding="utf8",             # <<<<<<<<<<<<<<
 *         ) as reader:
 *             extractor.bigram = set(line.strip() for line in reader)
 */
    __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 635, __pyx_L1_error)

    /* "pkuseg/feature_extractor.pyx":632
 *             extractor.unigram = set([line.strip() for line in reader])
 * 
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "bigram_word.txt"),
 *             "r",
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 632, __pyx_L54_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 632, __pyx_L54_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_reader);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_reader, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          __pyx_t_5 = 0;

          /* "pkuseg/feature_extractor.pyx":637
 *             encoding="utf8",
 *         ) as reader:
 *             extractor.bigram = set(line.strip() for line in reader)             # <<<<<<<<<<<<<<
 * 
 *         extractor.feature_to_idx = {}
 */
          __pyx_t_5 = __pyx_pf_6pkuseg_17feature_extractor_16FeatureExtractor_4load_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 637, __pyx_L58_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_3 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 637, __pyx_L58_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_bigram, __pyx_t_3) < 0) __PYX_ERR(0, 637, __pyx_L58_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "pkuseg/feature_extractor.pyx":632
 *             extractor.unigram = set([line.strip() for line in reader])
 * 
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "bigram_word.txt"),
 *             "r",
 */
        }
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L63_try_end;
        __pyx_L58_error:;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_5, &__pyx_t_7) < 0) __PYX_ERR(0, 632, __pyx_L60_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_4 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 632, __pyx_L60_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_4, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 632, __pyx_L60_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_1 < 0) __PYX_ERR(0, 632, __pyx_L60_except_error)
          __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
          if (__pyx_t_2) {
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_7);
            __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_5, __pyx_t_7);
            __pyx_t_3 = 0; __pyx_t_5 = 0; __pyx_t_7 = 0; 
            __PYX_ERR(0, 632, __pyx_L60_except_error)
          }
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L59_exception_handled;
        }
        __pyx_L60_except_error:;
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L59_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
        __pyx_L63_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_8) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__6, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 632, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L57;
      }
      __pyx_L57:;
    }
    goto __pyx_L67;
    __pyx_L54_error:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L1_error;
    __pyx_L67:;
  }

  /* "pkuseg/feature_extractor.pyx":639
 *             extractor.bigram = set(line.strip() for line in reader)
 * 
 *         extractor.feature_to_idx = {}             # <<<<<<<<<<<<<<
 *         feature_base_name = os.path.join(model_dir, "featureIndex.txt")
 *         for i in range(10):
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_feature_to_idx, __pyx_t_7) < 0) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pkuseg/feature_extractor.pyx":640
 * 
 *         extractor.feature_to_idx = {}
 *         feature_base_name = os.path.join(model_dir, "featureIndex.txt")             # <<<<<<<<<<<<<<
 *         for i in range(10):
 *             with open(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_model_dir, __pyx_kp_u_featureIndex_txt};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_model_dir, __pyx_kp_u_featureIndex_txt};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_model_dir);
    __Pyx_GIVEREF(__pyx_v_model_dir);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_model_dir);
    __Pyx_INCREF(__pyx_kp_u_featureIndex_txt);
    __Pyx_GIVEREF(__pyx_kp_u_featureIndex_txt);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_kp_u_featureIndex_txt);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_feature_base_name = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "pkuseg/feature_extractor.pyx":641
 *         extractor.feature_to_idx = {}
 *         feature_base_name = os.path.join(model_dir, "featureIndex.txt")
 *         for i in range(10):             # <<<<<<<<<<<<<<
 *             with open(
 *                 "{}_{}".format(feature_base_name, i), "r", encoding="utf8"
 */
  for (__pyx_t_16 = 0; __pyx_t_16 < 10; __pyx_t_16+=1) {
    __pyx_v_i = __pyx_t_16;

    /* "pkuseg/feature_extractor.pyx":642
 *         feature_base_name = os.path.join(model_dir, "featureIndex.txt")
 *         for i in range(10):
 *             with open(             # <<<<<<<<<<<<<<
 *                 "{}_{}".format(feature_base_name, i), "r", encoding="utf8"
 *             ) as reader:
 */
    /*with:*/ {

      /* "pkuseg/feature_extractor.pyx":643
 *         for i in range(10):
 *             with open(
 *                 "{}_{}".format(feature_base_name, i), "r", encoding="utf8"             # <<<<<<<<<<<<<<
 *             ) as reader:
 *                 for line in reader:
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u__19, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_feature_base_name, __pyx_t_4};
        __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 643, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_feature_base_name, __pyx_t_4};
        __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 643, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_15 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 643, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_v_feature_base_name);
        __Pyx_GIVEREF(__pyx_v_feature_base_name);
        PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_6, __pyx_v_feature_base_name);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_6, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_15, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 643, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pkuseg/feature_extractor.pyx":642
 *         feature_base_name = os.path.join(model_dir, "featureIndex.txt")
 *         for i in range(10):
 *             with open(             # <<<<<<<<<<<<<<
 *                 "{}_{}".format(feature_base_name, i), "r", encoding="utf8"
 *             ) as reader:
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
      __Pyx_INCREF(__pyx_n_u_r);
      __Pyx_GIVEREF(__pyx_n_u_r);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_u_r);
      __pyx_t_7 = 0;

      /* "pkuseg/feature_extractor.pyx":643
 *         for i in range(10):
 *             with open(
 *                 "{}_{}".format(feature_base_name, i), "r", encoding="utf8"             # <<<<<<<<<<<<<<
 *             ) as reader:
 *                 for line in reader:
 */
      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 643, __pyx_L1_error)

      /* "pkuseg/feature_extractor.pyx":642
 *         feature_base_name = os.path.join(model_dir, "featureIndex.txt")
 *         for i in range(10):
 *             with open(             # <<<<<<<<<<<<<<
 *                 "{}_{}".format(feature_base_name, i), "r", encoding="utf8"
 *             ) as reader:
 */
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_15, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_15, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 642, __pyx_L70_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 642, __pyx_L70_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __pyx_t_7;
      __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_11);
          /*try:*/ {
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_reader);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_reader, __pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            __pyx_t_5 = 0;

            /* "pkuseg/feature_extractor.pyx":645
 *                 "{}_{}".format(feature_base_name, i), "r", encoding="utf8"
 *             ) as reader:
 *                 for line in reader:             # <<<<<<<<<<<<<<
 *                     feature, index = line.split(" ")
 *                     feature = ".".join(feature.split(".")[1:])
 */
            if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_reader)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_reader)) {
              __pyx_t_5 = __pyx_cur_scope->__pyx_v_reader; __Pyx_INCREF(__pyx_t_5); __pyx_t_13 = 0;
              __pyx_t_14 = NULL;
            } else {
              __pyx_t_13 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_reader); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 645, __pyx_L76_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_14 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 645, __pyx_L76_error)
            }
            for (;;) {
              if (likely(!__pyx_t_14)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_13); __Pyx_INCREF(__pyx_t_15); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 645, __pyx_L76_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_5, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 645, __pyx_L76_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                } else {
                  if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_13); __Pyx_INCREF(__pyx_t_15); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 645, __pyx_L76_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_5, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 645, __pyx_L76_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                }
              } else {
                __pyx_t_15 = __pyx_t_14(__pyx_t_5);
                if (unlikely(!__pyx_t_15)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 645, __pyx_L76_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_15);
              }
              __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_15);
              __pyx_t_15 = 0;

              /* "pkuseg/feature_extractor.pyx":646
 *             ) as reader:
 *                 for line in reader:
 *                     feature, index = line.split(" ")             # <<<<<<<<<<<<<<
 *                     feature = ".".join(feature.split(".")[1:])
 *                     extractor.feature_to_idx[feature] = int(index)
 */
              __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 646, __pyx_L76_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_7, function);
                }
              }
              __pyx_t_15 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_kp_u__14) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u__14);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 646, __pyx_L76_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_15))) || (PyList_CheckExact(__pyx_t_15))) {
                PyObject* sequence = __pyx_t_15;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 646, __pyx_L76_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_4);
                #else
                __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 646, __pyx_L76_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 646, __pyx_L76_error)
                __Pyx_GOTREF(__pyx_t_4);
                #endif
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_3 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 646, __pyx_L76_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_17 = Py_TYPE(__pyx_t_3)->tp_iternext;
                index = 0; __pyx_t_7 = __pyx_t_17(__pyx_t_3); if (unlikely(!__pyx_t_7)) goto __pyx_L86_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_7);
                index = 1; __pyx_t_4 = __pyx_t_17(__pyx_t_3); if (unlikely(!__pyx_t_4)) goto __pyx_L86_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_4);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_3), 2) < 0) __PYX_ERR(0, 646, __pyx_L76_error)
                __pyx_t_17 = NULL;
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                goto __pyx_L87_unpacking_done;
                __pyx_L86_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_17 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 646, __pyx_L76_error)
                __pyx_L87_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_7);
              __pyx_t_7 = 0;
              __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "pkuseg/feature_extractor.pyx":647
 *                 for line in reader:
 *                     feature, index = line.split(" ")
 *                     feature = ".".join(feature.split(".")[1:])             # <<<<<<<<<<<<<<
 *                     extractor.feature_to_idx[feature] = int(index)
 * 
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_feature, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 647, __pyx_L76_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_7 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                }
              }
              __pyx_t_15 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_kp_u__2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u__2);
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 647, __pyx_L76_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_t_15, 1, 0, NULL, NULL, &__pyx_slice__20, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 647, __pyx_L76_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_15 = PyUnicode_Join(__pyx_kp_u__2, __pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 647, __pyx_L76_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF_SET(__pyx_v_feature, __pyx_t_15);
              __pyx_t_15 = 0;

              /* "pkuseg/feature_extractor.pyx":648
 *                     feature, index = line.split(" ")
 *                     feature = ".".join(feature.split(".")[1:])
 *                     extractor.feature_to_idx[feature] = int(index)             # <<<<<<<<<<<<<<
 * 
 *         extractor.tag_to_idx = {}
 */
              __pyx_t_15 = __Pyx_PyNumber_Int(__pyx_v_index); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 648, __pyx_L76_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_extractor, __pyx_n_s_feature_to_idx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 648, __pyx_L76_error)
              __Pyx_GOTREF(__pyx_t_4);
              if (unlikely(PyObject_SetItem(__pyx_t_4, __pyx_v_feature, __pyx_t_15) < 0)) __PYX_ERR(0, 648, __pyx_L76_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

              /* "pkuseg/feature_extractor.pyx":645
 *                 "{}_{}".format(feature_base_name, i), "r", encoding="utf8"
 *             ) as reader:
 *                 for line in reader:             # <<<<<<<<<<<<<<
 *                     feature, index = line.split(" ")
 *                     feature = ".".join(feature.split(".")[1:])
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "pkuseg/feature_extractor.pyx":642
 *         feature_base_name = os.path.join(model_dir, "featureIndex.txt")
 *         for i in range(10):
 *             with open(             # <<<<<<<<<<<<<<
 *                 "{}_{}".format(feature_base_name, i), "r", encoding="utf8"
 *             ) as reader:
 */
          }
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L83_try_end;
          __pyx_L76_error:;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_15, &__pyx_t_4) < 0) __PYX_ERR(0, 642, __pyx_L78_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_7 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 642, __pyx_L78_except_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 642, __pyx_L78_except_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (__pyx_t_2 < 0) __PYX_ERR(0, 642, __pyx_L78_except_error)
            __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
            if (__pyx_t_1) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_4);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_15, __pyx_t_4);
              __pyx_t_5 = 0; __pyx_t_15 = 0; __pyx_t_4 = 0; 
              __PYX_ERR(0, 642, __pyx_L78_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            goto __pyx_L77_exception_handled;
          }
          __pyx_L78_except_error:;
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
          goto __pyx_L1_error;
          __pyx_L77_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
          __pyx_L83_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_8) {
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__6, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 642, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          goto __pyx_L75;
        }
        __pyx_L75:;
      }
      goto __pyx_L91;
      __pyx_L70_error:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L1_error;
      __pyx_L91:;
    }
  }

  /* "pkuseg/feature_extractor.pyx":650
 *                     extractor.feature_to_idx[feature] = int(index)
 * 
 *         extractor.tag_to_idx = {}             # <<<<<<<<<<<<<<
 *         with open(
 *             os.path.join(model_dir, "tagIndex.txt"), "r", encoding="utf8"
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_extractor, __pyx_n_s_tag_to_idx, __pyx_t_4) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pkuseg/feature_extractor.pyx":651
 * 
 *         extractor.tag_to_idx = {}
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "tagIndex.txt"), "r", encoding="utf8"
 *         ) as reader:
 */
  /*with:*/ {

    /* "pkuseg/feature_extractor.pyx":652
 *         extractor.tag_to_idx = {}
 *         with open(
 *             os.path.join(model_dir, "tagIndex.txt"), "r", encoding="utf8"             # <<<<<<<<<<<<<<
 *         ) as reader:
 *             for line in reader:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_os); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_join); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_15)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_model_dir, __pyx_kp_u_tagIndex_txt};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 652, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_model_dir, __pyx_kp_u_tagIndex_txt};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 652, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_model_dir);
      __Pyx_GIVEREF(__pyx_v_model_dir);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_model_dir);
      __Pyx_INCREF(__pyx_kp_u_tagIndex_txt);
      __Pyx_GIVEREF(__pyx_kp_u_tagIndex_txt);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_kp_u_tagIndex_txt);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "pkuseg/feature_extractor.pyx":651
 * 
 *         extractor.tag_to_idx = {}
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "tagIndex.txt"), "r", encoding="utf8"
 *         ) as reader:
 */
    __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_u_r);
    __Pyx_GIVEREF(__pyx_n_u_r);
    PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_n_u_r);
    __pyx_t_4 = 0;

    /* "pkuseg/feature_extractor.pyx":652
 *         extractor.tag_to_idx = {}
 *         with open(
 *             os.path.join(model_dir, "tagIndex.txt"), "r", encoding="utf8"             # <<<<<<<<<<<<<<
 *         ) as reader:
 *             for line in reader:
 */
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_encoding, __pyx_n_u_utf8) < 0) __PYX_ERR(0, 652, __pyx_L1_error)

    /* "pkuseg/feature_extractor.pyx":651
 * 
 *         extractor.tag_to_idx = {}
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "tagIndex.txt"), "r", encoding="utf8"
 *         ) as reader:
 */
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_7, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_15 = __Pyx_PyObject_LookupSpecial(__pyx_t_7, __pyx_n_s_enter); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 651, __pyx_L92_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 651, __pyx_L92_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_reader);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_reader, __pyx_t_15);
          __Pyx_GIVEREF(__pyx_t_15);
          __pyx_t_15 = 0;

          /* "pkuseg/feature_extractor.pyx":654
 *             os.path.join(model_dir, "tagIndex.txt"), "r", encoding="utf8"
 *         ) as reader:
 *             for line in reader:             # <<<<<<<<<<<<<<
 *                 tag, index = line.split(" ")
 *                 extractor.tag_to_idx[tag] = int(index)
 */
          if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_reader)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_reader)) {
            __pyx_t_15 = __pyx_cur_scope->__pyx_v_reader; __Pyx_INCREF(__pyx_t_15); __pyx_t_13 = 0;
            __pyx_t_14 = NULL;
          } else {
            __pyx_t_13 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_reader); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 654, __pyx_L96_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_14 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 654, __pyx_L96_error)
          }
          for (;;) {
            if (likely(!__pyx_t_14)) {
              if (likely(PyList_CheckExact(__pyx_t_15))) {
                if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_15)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_7 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_13); __Pyx_INCREF(__pyx_t_7); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 654, __pyx_L96_error)
                #else
                __pyx_t_7 = PySequence_ITEM(__pyx_t_15, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 654, __pyx_L96_error)
                __Pyx_GOTREF(__pyx_t_7);
                #endif
              } else {
                if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_13); __Pyx_INCREF(__pyx_t_7); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 654, __pyx_L96_error)
                #else
                __pyx_t_7 = PySequence_ITEM(__pyx_t_15, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 654, __pyx_L96_error)
                __Pyx_GOTREF(__pyx_t_7);
                #endif
              }
            } else {
              __pyx_t_7 = __pyx_t_14(__pyx_t_15);
              if (unlikely(!__pyx_t_7)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 654, __pyx_L96_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_7);
            }
            __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_7);
            __pyx_t_7 = 0;

            /* "pkuseg/feature_extractor.pyx":655
 *         ) as reader:
 *             for line in reader:
 *                 tag, index = line.split(" ")             # <<<<<<<<<<<<<<
 *                 extractor.tag_to_idx[tag] = int(index)
 * 
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 655, __pyx_L96_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u__14) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u__14);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 655, __pyx_L96_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
              PyObject* sequence = __pyx_t_7;
              Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
              if (unlikely(size != 2)) {
                if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                __PYX_ERR(0, 655, __pyx_L96_error)
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              if (likely(PyTuple_CheckExact(sequence))) {
                __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
                __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
              } else {
                __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
                __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
              }
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_5);
              #else
              __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 655, __pyx_L96_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 655, __pyx_L96_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            } else {
              Py_ssize_t index = -1;
              __pyx_t_3 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 655, __pyx_L96_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __pyx_t_17 = Py_TYPE(__pyx_t_3)->tp_iternext;
              index = 0; __pyx_t_4 = __pyx_t_17(__pyx_t_3); if (unlikely(!__pyx_t_4)) goto __pyx_L104_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_4);
              index = 1; __pyx_t_5 = __pyx_t_17(__pyx_t_3); if (unlikely(!__pyx_t_5)) goto __pyx_L104_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_5);
              if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_3), 2) < 0) __PYX_ERR(0, 655, __pyx_L96_error)
              __pyx_t_17 = NULL;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              goto __pyx_L105_unpacking_done;
              __pyx_L104_unpacking_failed:;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_17 = NULL;
              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
              __PYX_ERR(0, 655, __pyx_L96_error)
              __pyx_L105_unpacking_done:;
            }
            __Pyx_XDECREF_SET(__pyx_v_tag, __pyx_t_4);
            __pyx_t_4 = 0;
            __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_5);
            __pyx_t_5 = 0;

            /* "pkuseg/feature_extractor.pyx":656
 *             for line in reader:
 *                 tag, index = line.split(" ")
 *                 extractor.tag_to_idx[tag] = int(index)             # <<<<<<<<<<<<<<
 * 
 *         print(
 */
            __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_v_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L96_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_extractor, __pyx_n_s_tag_to_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 656, __pyx_L96_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_v_tag, __pyx_t_7) < 0)) __PYX_ERR(0, 656, __pyx_L96_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "pkuseg/feature_extractor.pyx":654
 *             os.path.join(model_dir, "tagIndex.txt"), "r", encoding="utf8"
 *         ) as reader:
 *             for line in reader:             # <<<<<<<<<<<<<<
 *                 tag, index = line.split(" ")
 *                 extractor.tag_to_idx[tag] = int(index)
 */
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "pkuseg/feature_extractor.pyx":651
 * 
 *         extractor.tag_to_idx = {}
 *         with open(             # <<<<<<<<<<<<<<
 *             os.path.join(model_dir, "tagIndex.txt"), "r", encoding="utf8"
 *         ) as reader:
 */
        }
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L101_try_end;
        __pyx_L96_error:;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_7, &__pyx_t_5) < 0) __PYX_ERR(0, 651, __pyx_L98_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PyTuple_Pack(3, __pyx_t_15, __pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 651, __pyx_L98_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_4, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 651, __pyx_L98_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_1 < 0) __PYX_ERR(0, 651, __pyx_L98_except_error)
          __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
          if (__pyx_t_2) {
            __Pyx_GIVEREF(__pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_7);
            __Pyx_XGIVEREF(__pyx_t_5);
            __Pyx_ErrRestoreWithState(__pyx_t_15, __pyx_t_7, __pyx_t_5);
            __pyx_t_15 = 0; __pyx_t_7 = 0; __pyx_t_5 = 0; 
            __PYX_ERR(0, 651, __pyx_L98_except_error)
          }
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L97_exception_handled;
        }
        __pyx_L98_except_error:;
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L97_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
        __pyx_L101_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_8) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__6, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 651, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L95;
      }
      __pyx_L95:;
    }
    goto __pyx_L109;
    __pyx_L92_error:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L1_error;
    __pyx_L109:;
  }

  /* "pkuseg/feature_extractor.pyx":660
 *         print(
 *             "INFO: features.json is saved",
 *             file=sys.stderr,             # <<<<<<<<<<<<<<
 *         )
 *         extractor.save(model_dir)
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_sys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_stderr); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_file, __pyx_t_15) < 0) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "pkuseg/feature_extractor.pyx":658
 *                 extractor.tag_to_idx[tag] = int(index)
 * 
 *         print(             # <<<<<<<<<<<<<<
 *             "INFO: features.json is saved",
 *             file=sys.stderr,
 */
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__21, __pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "pkuseg/feature_extractor.pyx":662
 *             file=sys.stderr,
 *         )
 *         extractor.save(model_dir)             # <<<<<<<<<<<<<<
 * 
 *         return extractor
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_extractor, __pyx_n_s_save); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_15 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_v_model_dir) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_model_dir);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "pkuseg/feature_extractor.pyx":664
 *         extractor.save(model_dir)
 * 
 *         return extractor             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_extractor);
  __pyx_r = __pyx_v_extractor;
  goto __pyx_L0;

  /* "pkuseg/feature_extractor.pyx":587
 * 
 *     @classmethod
 *     def load(cls, model_dir=None):             # <<<<<<<<<<<<<<
 *         if model_dir is None:
 *             model_dir = config.modelDir
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("pkuseg.feature_extractor.FeatureExtractor.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_extractor);
  __Pyx_XDECREF(__pyx_v_feature_path);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_feature_base_name);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_feature);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_tag);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_line);
  __Pyx_XDECREF(__pyx_gb_6pkuseg_17feature_extractor_16FeatureExtractor_4load_2generator4);
  __Pyx_XDECREF(__pyx_v_model_dir);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text *__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text[8];
static int __pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text = 0;

static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text)))) {
    o = (PyObject*)__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text[--__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text];
    memset(o, 0, sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text(PyObject *o) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_character);
  Py_CLEAR(p->__pyx_v_cls);
  Py_CLEAR(p->__pyx_v_text);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text)))) {
    __pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text[__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text++] = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text *)o;
  if (p->__pyx_v_character) {
    e = (*v)(p->__pyx_v_character, a); if (e) return e;
  }
  if (p->__pyx_v_cls) {
    e = (*v)(p->__pyx_v_cls, a); if (e) return e;
  }
  if (p->__pyx_v_text) {
    e = (*v)(p->__pyx_v_text, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text = {
  PyVarObject_HEAD_INIT(0, 0)
  "pkuseg.feature_extractor.__pyx_scope_struct__normalize_text", /*tp_name*/
  sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_1_build[8];
static int __pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_1_build = 0;

static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_1_build(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_1_build > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build)))) {
    o = (PyObject*)__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_1_build[--__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_1_build];
    memset(o, 0, sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_1_build(PyObject *o) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_feature_freq);
  Py_CLEAR(p->__pyx_v_node_features);
  Py_CLEAR(p->__pyx_v_words);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_1_build < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build)))) {
    __pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_1_build[__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_1_build++] = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_1_build(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *)o;
  if (p->__pyx_v_feature_freq) {
    e = (*v)(p->__pyx_v_feature_freq, a); if (e) return e;
  }
  if (p->__pyx_v_node_features) {
    e = (*v)(p->__pyx_v_node_features, a); if (e) return e;
  }
  if (p->__pyx_v_words) {
    e = (*v)(p->__pyx_v_words, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pkuseg_17feature_extractor___pyx_scope_struct_1_build(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build *)o;
  tmp = ((PyObject*)p->__pyx_v_feature_freq);
  p->__pyx_v_feature_freq = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_node_features);
  p->__pyx_v_node_features = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_words);
  p->__pyx_v_words = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_1_build = {
  PyVarObject_HEAD_INIT(0, 0)
  "pkuseg.feature_extractor.__pyx_scope_struct_1_build", /*tp_name*/
  sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_1_build), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_1_build, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_1_build, /*tp_traverse*/
  __pyx_tp_clear_6pkuseg_17feature_extractor___pyx_scope_struct_1_build, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_1_build, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr *__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr[8];
static int __pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr = 0;

static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr[--__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_word);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr)))) {
    __pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr[__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_word) {
    e = (*v)(p->__pyx_v_word, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pkuseg.feature_extractor.__pyx_scope_struct_2_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr *__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr[--__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_feature);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr[__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_feature) {
    e = (*v)(p->__pyx_v_feature, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pkuseg.feature_extractor.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr *__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr[--__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_feature);
  Py_CLEAR(p->__pyx_v_freq);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr[__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_feature) {
    e = (*v)(p->__pyx_v_feature, a); if (e) return e;
  }
  if (p->__pyx_v_freq) {
    e = (*v)(p->__pyx_v_freq, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pkuseg.feature_extractor.__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_5_load[8];
static int __pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_5_load = 0;

static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_5_load(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_5_load > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load)))) {
    o = (PyObject*)__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_5_load[--__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_5_load];
    memset(o, 0, sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_5_load(PyObject *o) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_reader);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_5_load < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load)))) {
    __pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_5_load[__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_5_load++] = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_5_load(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *)o;
  if (p->__pyx_v_reader) {
    e = (*v)(p->__pyx_v_reader, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pkuseg_17feature_extractor___pyx_scope_struct_5_load(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load *)o;
  tmp = ((PyObject*)p->__pyx_v_reader);
  p->__pyx_v_reader = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_5_load = {
  PyVarObject_HEAD_INIT(0, 0)
  "pkuseg.feature_extractor.__pyx_scope_struct_5_load", /*tp_name*/
  sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_5_load), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_5_load, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_5_load, /*tp_traverse*/
  __pyx_tp_clear_6pkuseg_17feature_extractor___pyx_scope_struct_5_load, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_5_load, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr *__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr[--__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_line);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr[__pyx_freecount_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_line) {
    e = (*v)(p->__pyx_v_line, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pkuseg.feature_extractor.__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"get_slice_str", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pkuseg_17feature_extractor_1get_slice_str, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_feature_extractor(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_feature_extractor},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "feature_extractor",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_u_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0, 0},
  {&__pyx_kp_u_0123456789, __pyx_k_0123456789, sizeof(__pyx_k_0123456789), 0, 1, 0, 0},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_u_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 1, 0, 1},
  {&__pyx_n_s_B_single, __pyx_k_B_single, sizeof(__pyx_k_B_single), 0, 0, 1, 1},
  {&__pyx_n_u_B_single, __pyx_k_B_single, sizeof(__pyx_k_B_single), 0, 1, 0, 1},
  {&__pyx_n_s_Counter, __pyx_k_Counter, sizeof(__pyx_k_Counter), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor, __pyx_k_FeatureExtractor, sizeof(__pyx_k_FeatureExtractor), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor___init, __pyx_k_FeatureExtractor___init, sizeof(__pyx_k_FeatureExtractor___init), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor__num_letter_nor, __pyx_k_FeatureExtractor__num_letter_nor, sizeof(__pyx_k_FeatureExtractor__num_letter_nor), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor_build, __pyx_k_FeatureExtractor_build, sizeof(__pyx_k_FeatureExtractor_build), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor_build_locals_ge, __pyx_k_FeatureExtractor_build_locals_ge, sizeof(__pyx_k_FeatureExtractor_build_locals_ge), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor_convert_feature, __pyx_k_FeatureExtractor_convert_feature, sizeof(__pyx_k_FeatureExtractor_convert_feature), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor_convert_text_fi, __pyx_k_FeatureExtractor_convert_text_fi, sizeof(__pyx_k_FeatureExtractor_convert_text_fi), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor_get_node_featur, __pyx_k_FeatureExtractor_get_node_featur, sizeof(__pyx_k_FeatureExtractor_get_node_featur), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor_get_node_featur_2, __pyx_k_FeatureExtractor_get_node_featur_2, sizeof(__pyx_k_FeatureExtractor_get_node_featur_2), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor_keyword_rename, __pyx_k_FeatureExtractor_keyword_rename, sizeof(__pyx_k_FeatureExtractor_keyword_rename), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor_load, __pyx_k_FeatureExtractor_load, sizeof(__pyx_k_FeatureExtractor_load), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor_load_locals_gen, __pyx_k_FeatureExtractor_load_locals_gen, sizeof(__pyx_k_FeatureExtractor_load_locals_gen), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor_normalize_text, __pyx_k_FeatureExtractor_normalize_text, sizeof(__pyx_k_FeatureExtractor_normalize_text), 0, 0, 1, 1},
  {&__pyx_n_s_FeatureExtractor_save, __pyx_k_FeatureExtractor_save, sizeof(__pyx_k_FeatureExtractor_save), 0, 0, 1, 1},
  {&__pyx_n_s_HIGHEST_PROTOCOL, __pyx_k_HIGHEST_PROTOCOL, sizeof(__pyx_k_HIGHEST_PROTOCOL), 0, 0, 1, 1},
  {&__pyx_n_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 1},
  {&__pyx_n_u_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 1, 0, 1},
  {&__pyx_kp_u_INFO_features_json_is_saved, __pyx_k_INFO_features_json_is_saved, sizeof(__pyx_k_INFO_features_json_is_saved), 0, 1, 0, 0},
  {&__pyx_n_s_I_end, __pyx_k_I_end, sizeof(__pyx_k_I_end), 0, 0, 1, 1},
  {&__pyx_n_u_I_end, __pyx_k_I_end, sizeof(__pyx_k_I_end), 0, 1, 0, 1},
  {&__pyx_n_s_I_first, __pyx_k_I_first, sizeof(__pyx_k_I_first), 0, 0, 1, 1},
  {&__pyx_n_u_I_first, __pyx_k_I_first, sizeof(__pyx_k_I_first), 0, 1, 0, 1},
  {&__pyx_kp_u_Letter, __pyx_k_Letter, sizeof(__pyx_k_Letter), 0, 1, 0, 0},
  {&__pyx_kp_u_Num, __pyx_k_Num, sizeof(__pyx_k_Num), 0, 1, 0, 0},
  {&__pyx_kp_u_WARNING_features_json_does_not_e, __pyx_k_WARNING_features_json_does_not_e, sizeof(__pyx_k_WARNING_features_json_does_not_e), 0, 1, 0, 0},
  {&__pyx_kp_u_WARNING_features_pkl_does_not_ex, __pyx_k_WARNING_features_pkl_does_not_ex, sizeof(__pyx_k_WARNING_features_pkl_does_not_ex), 0, 1, 0, 0},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_kp_u__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 0},
  {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
  {&__pyx_kp_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {&__pyx_kp_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
  {&__pyx_kp_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
  {&__pyx_kp_u__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 1, 0, 0},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_kp_u__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 1, 0, 0},
  {&__pyx_kp_u__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 1, 0, 0},
  {&__pyx_kp_u__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 1, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_n_s__35, __pyx_k__35, sizeof(__pyx_k__35), 0, 0, 1, 1},
  {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_all_len, __pyx_k_all_len, sizeof(__pyx_k_all_len), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_bigram, __pyx_k_bigram, sizeof(__pyx_k_bigram), 0, 0, 1, 1},
  {&__pyx_n_u_bigram, __pyx_k_bigram, sizeof(__pyx_k_bigram), 0, 1, 0, 1},
  {&__pyx_kp_u_bigram_word_txt, __pyx_k_bigram_word_txt, sizeof(__pyx_k_bigram_word_txt), 0, 1, 0, 0},
  {&__pyx_n_s_build, __pyx_k_build, sizeof(__pyx_k_build), 0, 0, 1, 1},
  {&__pyx_kp_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 0},
  {&__pyx_kp_u_c1, __pyx_k_c1, sizeof(__pyx_k_c1), 0, 1, 0, 0},
  {&__pyx_kp_u_c2, __pyx_k_c2, sizeof(__pyx_k_c2), 0, 1, 0, 0},
  {&__pyx_kp_u_c_1, __pyx_k_c_1, sizeof(__pyx_k_c_1), 0, 1, 0, 0},
  {&__pyx_kp_u_c_1c, __pyx_k_c_1c, sizeof(__pyx_k_c_1c), 0, 1, 0, 0},
  {&__pyx_kp_u_c_2, __pyx_k_c_2, sizeof(__pyx_k_c_2), 0, 1, 0, 0},
  {&__pyx_kp_u_c_2c_1, __pyx_k_c_2c_1, sizeof(__pyx_k_c_2c_1), 0, 1, 0, 0},
  {&__pyx_n_s_c_3, __pyx_k_c_3, sizeof(__pyx_k_c_3), 0, 0, 1, 1},
  {&__pyx_n_s_c_writer, __pyx_k_c_writer, sizeof(__pyx_k_c_writer), 0, 0, 1, 1},
  {&__pyx_kp_u_cc1, __pyx_k_cc1, sizeof(__pyx_k_cc1), 0, 1, 0, 0},
  {&__pyx_n_s_character, __pyx_k_character, sizeof(__pyx_k_character), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_config, __pyx_k_config, sizeof(__pyx_k_config), 0, 0, 1, 1},
  {&__pyx_kp_u_conll, __pyx_k_conll, sizeof(__pyx_k_conll), 0, 1, 0, 0},
  {&__pyx_n_s_conll_file, __pyx_k_conll_file, sizeof(__pyx_k_conll_file), 0, 0, 1, 1},
  {&__pyx_n_s_conll_line_format, __pyx_k_conll_line_format, sizeof(__pyx_k_conll_line_format), 0, 0, 1, 1},
  {&__pyx_n_s_convert_feature_file_to_idx_file, __pyx_k_convert_feature_file_to_idx_file, sizeof(__pyx_k_convert_feature_file_to_idx_file), 0, 0, 1, 1},
  {&__pyx_n_s_convert_text_file_to_feature_fil, __pyx_k_convert_text_file_to_feature_fil, sizeof(__pyx_k_convert_text_file_to_feature_fil), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_delimInFeature, __pyx_k_delimInFeature, sizeof(__pyx_k_delimInFeature), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dump, __pyx_k_dump, sizeof(__pyx_k_dump), 0, 0, 1, 1},
  {&__pyx_n_s_encoding, __pyx_k_encoding, sizeof(__pyx_k_encoding), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_example, __pyx_k_example, sizeof(__pyx_k_example), 0, 0, 1, 1},
  {&__pyx_n_s_examples, __pyx_k_examples, sizeof(__pyx_k_examples), 0, 0, 1, 1},
  {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_extractor, __pyx_k_extractor, sizeof(__pyx_k_extractor), 0, 0, 1, 1},
  {&__pyx_n_s_f_writer, __pyx_k_f_writer, sizeof(__pyx_k_f_writer), 0, 0, 1, 1},
  {&__pyx_kp_u_feat, __pyx_k_feat, sizeof(__pyx_k_feat), 0, 1, 0, 0},
  {&__pyx_n_s_feat_2, __pyx_k_feat_2, sizeof(__pyx_k_feat_2), 0, 0, 1, 1},
  {&__pyx_n_s_feature, __pyx_k_feature, sizeof(__pyx_k_feature), 0, 0, 1, 1},
  {&__pyx_kp_u_featureIndex_txt, __pyx_k_featureIndex_txt, sizeof(__pyx_k_featureIndex_txt), 0, 1, 0, 0},
  {&__pyx_n_s_featureTrim, __pyx_k_featureTrim, sizeof(__pyx_k_featureTrim), 0, 0, 1, 1},
  {&__pyx_n_s_feature_base_name, __pyx_k_feature_base_name, sizeof(__pyx_k_feature_base_name), 0, 0, 1, 1},
  {&__pyx_n_s_feature_file, __pyx_k_feature_file, sizeof(__pyx_k_feature_file), 0, 0, 1, 1},
  {&__pyx_n_s_feature_freq, __pyx_k_feature_freq, sizeof(__pyx_k_feature_freq), 0, 0, 1, 1},
  {&__pyx_n_s_feature_idx, __pyx_k_feature_idx, sizeof(__pyx_k_feature_idx), 0, 0, 1, 1},
  {&__pyx_n_s_feature_idx_file, __pyx_k_feature_idx_file, sizeof(__pyx_k_feature_idx_file), 0, 0, 1, 1},
  {&__pyx_n_s_feature_path, __pyx_k_feature_path, sizeof(__pyx_k_feature_path), 0, 0, 1, 1},
  {&__pyx_n_s_feature_set, __pyx_k_feature_set, sizeof(__pyx_k_feature_set), 0, 0, 1, 1},
  {&__pyx_n_s_feature_to_idx, __pyx_k_feature_to_idx, sizeof(__pyx_k_feature_to_idx), 0, 0, 1, 1},
  {&__pyx_n_u_feature_to_idx, __pyx_k_feature_to_idx, sizeof(__pyx_k_feature_to_idx), 0, 1, 0, 1},
  {&__pyx_n_s_features, __pyx_k_features, sizeof(__pyx_k_features), 0, 0, 1, 1},
  {&__pyx_n_s_features_idx, __pyx_k_features_idx, sizeof(__pyx_k_features_idx), 0, 0, 1, 1},
  {&__pyx_kp_u_features_json, __pyx_k_features_json, sizeof(__pyx_k_features_json), 0, 1, 0, 0},
  {&__pyx_kp_u_features_pkl, __pyx_k_features_pkl, sizeof(__pyx_k_features_pkl), 0, 1, 0, 0},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_flist, __pyx_k_flist, sizeof(__pyx_k_flist), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_node_features, __pyx_k_get_node_features, sizeof(__pyx_k_get_node_features), 0, 0, 1, 1},
  {&__pyx_n_s_get_node_features_idx, __pyx_k_get_node_features_idx, sizeof(__pyx_k_get_node_features_idx), 0, 0, 1, 1},
  {&__pyx_n_s_get_node_features_idx_2, __pyx_k_get_node_features_idx_2, sizeof(__pyx_k_get_node_features_idx_2), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_iterable, __pyx_k_iterable, sizeof(__pyx_k_iterable), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_keyword_rename, __pyx_k_keyword_rename, sizeof(__pyx_k_keyword_rename), 0, 0, 1, 1},
  {&__pyx_n_s_keywords, __pyx_k_keywords, sizeof(__pyx_k_keywords), 0, 0, 1, 1},
  {&__pyx_n_s_keywords_translate_table, __pyx_k_keywords_translate_table, sizeof(__pyx_k_keywords_translate_table), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_len, __pyx_k_len, sizeof(__pyx_k_len), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_kp_u_length_2, __pyx_k_length_2, sizeof(__pyx_k_length_2), 0, 1, 0, 0},
  {&__pyx_n_s_letter, __pyx_k_letter, sizeof(__pyx_k_letter), 0, 0, 1, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_lines, __pyx_k_lines, sizeof(__pyx_k_lines), 0, 0, 1, 1},
  {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_maketrans, __pyx_k_maketrans, sizeof(__pyx_k_maketrans), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_max_word_length, __pyx_k_max_word_length, sizeof(__pyx_k_max_word_length), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_modelDir, __pyx_k_modelDir, sizeof(__pyx_k_modelDir), 0, 0, 1, 1},
  {&__pyx_n_s_model_dir, __pyx_k_model_dir, sizeof(__pyx_k_model_dir), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_most_common, __pyx_k_most_common, sizeof(__pyx_k_most_common), 0, 0, 1, 1},
  {&__pyx_n_s_nLabel, __pyx_k_nLabel, sizeof(__pyx_k_nLabel), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_next_c, __pyx_k_next_c, sizeof(__pyx_k_next_c), 0, 0, 1, 1},
  {&__pyx_kp_u_noWord, __pyx_k_noWord, sizeof(__pyx_k_noWord), 0, 1, 0, 0},
  {&__pyx_n_s_node_features, __pyx_k_node_features, sizeof(__pyx_k_node_features), 0, 0, 1, 1},
  {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_normalize_text, __pyx_k_normalize_text, sizeof(__pyx_k_normalize_text), 0, 0, 1, 1},
  {&__pyx_n_s_num, __pyx_k_num, sizeof(__pyx_k_num), 0, 0, 1, 1},
  {&__pyx_n_s_numLetterNorm, __pyx_k_numLetterNorm, sizeof(__pyx_k_numLetterNorm), 0, 0, 1, 1},
  {&__pyx_n_s_num_letter_normalize_char, __pyx_k_num_letter_normalize_char, sizeof(__pyx_k_num_letter_normalize_char), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pkuseg_config, __pyx_k_pkuseg_config, sizeof(__pyx_k_pkuseg_config), 0, 0, 1, 1},
  {&__pyx_n_s_pkuseg_feature_extractor, __pyx_k_pkuseg_feature_extractor, sizeof(__pyx_k_pkuseg_feature_extractor), 0, 0, 1, 1},
  {&__pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_k_pkuseg_feature_extractor_pyx, sizeof(__pyx_k_pkuseg_feature_extractor_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_post, __pyx_k_post, sizeof(__pyx_k_post), 0, 0, 1, 1},
  {&__pyx_n_s_postlst_ex, __pyx_k_postlst_ex, sizeof(__pyx_k_postlst_ex), 0, 0, 1, 1},
  {&__pyx_n_s_postlst_in, __pyx_k_postlst_in, sizeof(__pyx_k_postlst_in), 0, 0, 1, 1},
  {&__pyx_n_s_pre, __pyx_k_pre, sizeof(__pyx_k_pre), 0, 0, 1, 1},
  {&__pyx_n_s_prelst_ex, __pyx_k_prelst_ex, sizeof(__pyx_k_prelst_ex), 0, 0, 1, 1},
  {&__pyx_n_s_prelst_in, __pyx_k_prelst_in, sizeof(__pyx_k_prelst_in), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_prepre_char, __pyx_k_prepre_char, sizeof(__pyx_k_prepre_char), 0, 0, 1, 1},
  {&__pyx_n_s_prev_c, __pyx_k_prev_c, sizeof(__pyx_k_prev_c), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_product, __pyx_k_product, sizeof(__pyx_k_product), 0, 0, 1, 1},
  {&__pyx_n_s_protocol, __pyx_k_protocol, sizeof(__pyx_k_protocol), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_u_rb, __pyx_k_rb, sizeof(__pyx_k_rb), 0, 1, 0, 1},
  {&__pyx_n_s_reader, __pyx_k_reader, sizeof(__pyx_k_reader), 0, 0, 1, 1},
  {&__pyx_n_s_readlines, __pyx_k_readlines, sizeof(__pyx_k_readlines), 0, 0, 1, 1},
  {&__pyx_n_s_save, __pyx_k_save, sizeof(__pyx_k_save), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_specials, __pyx_k_specials, sizeof(__pyx_k_specials), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_splits, __pyx_k_splits, sizeof(__pyx_k_splits), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_stderr, __pyx_k_stderr, sizeof(__pyx_k_stderr), 0, 0, 1, 1},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_suf, __pyx_k_suf, sizeof(__pyx_k_suf), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_t_writer, __pyx_k_t_writer, sizeof(__pyx_k_t_writer), 0, 0, 1, 1},
  {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {&__pyx_kp_u_tagIndex_txt, __pyx_k_tagIndex_txt, sizeof(__pyx_k_tagIndex_txt), 0, 1, 0, 0},
  {&__pyx_n_s_tag_idx_file, __pyx_k_tag_idx_file, sizeof(__pyx_k_tag_idx_file), 0, 0, 1, 1},
  {&__pyx_n_s_tag_set, __pyx_k_tag_set, sizeof(__pyx_k_tag_set), 0, 0, 1, 1},
  {&__pyx_n_s_tag_to_idx, __pyx_k_tag_to_idx, sizeof(__pyx_k_tag_to_idx), 0, 0, 1, 1},
  {&__pyx_n_u_tag_to_idx, __pyx_k_tag_to_idx, sizeof(__pyx_k_tag_to_idx), 0, 1, 0, 1},
  {&__pyx_n_s_tags, __pyx_k_tags, sizeof(__pyx_k_tags), 0, 0, 1, 1},
  {&__pyx_n_s_tags_idx, __pyx_k_tags_idx, sizeof(__pyx_k_tags_idx), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_text_file, __pyx_k_text_file, sizeof(__pyx_k_text_file), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tmp, __pyx_k_tmp, sizeof(__pyx_k_tmp), 0, 0, 1, 1},
  {&__pyx_n_s_tmplst, __pyx_k_tmplst, sizeof(__pyx_k_tmplst), 0, 0, 1, 1},
  {&__pyx_n_s_tot, __pyx_k_tot, sizeof(__pyx_k_tot), 0, 0, 1, 1},
  {&__pyx_n_s_train_file, __pyx_k_train_file, sizeof(__pyx_k_train_file), 0, 0, 1, 1},
  {&__pyx_n_s_translate, __pyx_k_translate, sizeof(__pyx_k_translate), 0, 0, 1, 1},
  {&__pyx_n_s_unigram, __pyx_k_unigram, sizeof(__pyx_k_unigram), 0, 0, 1, 1},
  {&__pyx_n_u_unigram, __pyx_k_unigram, sizeof(__pyx_k_unigram), 0, 1, 0, 1},
  {&__pyx_kp_u_unigram_word_txt, __pyx_k_unigram_word_txt, sizeof(__pyx_k_unigram_word_txt), 0, 1, 0, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_u_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 1, 0, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
  {&__pyx_kp_u_w1, __pyx_k_w1, sizeof(__pyx_k_w1), 0, 1, 0, 0},
  {&__pyx_kp_u_w_1, __pyx_k_w_1, sizeof(__pyx_k_w_1), 0, 1, 0, 0},
  {&__pyx_n_u_wb, __pyx_k_wb, sizeof(__pyx_k_wb), 0, 1, 0, 1},
  {&__pyx_n_s_word, __pyx_k_word, sizeof(__pyx_k_word), 0, 0, 1, 1},
  {&__pyx_n_s_wordFeature, __pyx_k_wordFeature, sizeof(__pyx_k_wordFeature), 0, 0, 1, 1},
  {&__pyx_n_s_wordMax, __pyx_k_wordMax, sizeof(__pyx_k_wordMax), 0, 0, 1, 1},
  {&__pyx_n_s_wordMin, __pyx_k_wordMin, sizeof(__pyx_k_wordMin), 0, 0, 1, 1},
  {&__pyx_n_s_word_length, __pyx_k_word_length, sizeof(__pyx_k_word_length), 0, 0, 1, 1},
  {&__pyx_n_s_word_length_info, __pyx_k_word_length_info, sizeof(__pyx_k_word_length_info), 0, 0, 1, 1},
  {&__pyx_n_s_word_max, __pyx_k_word_max, sizeof(__pyx_k_word_max), 0, 0, 1, 1},
  {&__pyx_n_s_word_min, __pyx_k_word_min, sizeof(__pyx_k_word_min), 0, 0, 1, 1},
  {&__pyx_n_s_word_range, __pyx_k_word_range, sizeof(__pyx_k_word_range), 0, 0, 1, 1},
  {&__pyx_n_s_wordary, __pyx_k_wordary, sizeof(__pyx_k_wordary), 0, 0, 1, 1},
  {&__pyx_n_s_words, __pyx_k_words, sizeof(__pyx_k_words), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_writer, __pyx_k_writer, sizeof(__pyx_k_writer), 0, 0, 1, 1},
  {&__pyx_kp_u_ww_l, __pyx_k_ww_l, sizeof(__pyx_k_ww_l), 0, 1, 0, 0},
  {&__pyx_kp_u_ww_r, __pyx_k_ww_r, sizeof(__pyx_k_ww_r), 0, 1, 0, 0},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 108, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 258, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 260, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 267, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pkuseg/feature_extractor.pyx":225
 * 
 *     def build(self, train_file):
 *         with open(train_file, "r", encoding="utf8") as reader:             # <<<<<<<<<<<<<<
 *             lines = reader.readlines()
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pkuseg/feature_extractor.pyx":487
 *                 feature_idx = [
 *                     self.feature_to_idx[feat]
 *                     for feat in splits[:-1]             # <<<<<<<<<<<<<<
 *                     if feat in self.feature_to_idx
 *                 ]
 */
  __pyx_slice__15 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__15)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__15);
  __Pyx_GIVEREF(__pyx_slice__15);

  /* "pkuseg/feature_extractor.pyx":604
 * 
 * 
 *         print(             # <<<<<<<<<<<<<<
 *             "WARNING: features.pkl does not exist, try loading features.json",
 *             file=sys.stderr,
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_WARNING_features_pkl_does_not_ex); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "pkuseg/feature_extractor.pyx":620
 *             extractor.save(model_dir)
 *             return extractor
 *         print(             # <<<<<<<<<<<<<<
 *             "WARNING: features.json does not exist, try loading using old format",
 *             file=sys.stderr,
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_WARNING_features_json_does_not_e); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "pkuseg/feature_extractor.pyx":647
 *                 for line in reader:
 *                     feature, index = line.split(" ")
 *                     feature = ".".join(feature.split(".")[1:])             # <<<<<<<<<<<<<<
 *                     extractor.feature_to_idx[feature] = int(index)
 * 
 */
  __pyx_slice__20 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__20)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__20);
  __Pyx_GIVEREF(__pyx_slice__20);

  /* "pkuseg/feature_extractor.pyx":658
 *                 extractor.tag_to_idx[tag] = int(index)
 * 
 *         print(             # <<<<<<<<<<<<<<
 *             "INFO: features.json is saved",
 *             file=sys.stderr,
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_INFO_features_json_is_saved); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "pkuseg/feature_extractor.pyx":29
 * @cython.wraparound(False)
 * @cython.nonecheck(False)
 * def __get_node_features_idx(object config not None, int idx, list nodes not None, dict feature_to_idx not None, set unigram not None):             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
  __pyx_tuple__22 = PyTuple_Pack(25, __pyx_n_s_config, __pyx_n_s_idx, __pyx_n_s_nodes, __pyx_n_s_feature_to_idx, __pyx_n_s_unigram, __pyx_n_s_flist, __pyx_n_s_i, __pyx_n_s_length, __pyx_n_s_word_max, __pyx_n_s_word_min, __pyx_n_s_word_range, __pyx_n_s_c_3, __pyx_n_s_feat_2, __pyx_n_s_feature, __pyx_n_s_prev_c, __pyx_n_s_next_c, __pyx_n_s_prepre_char, __pyx_n_s_prelst_in, __pyx_n_s_l, __pyx_n_s_tmp, __pyx_n_s_postlst_in, __pyx_n_s_prelst_ex, __pyx_n_s_postlst_ex, __pyx_n_s_pre, __pyx_n_s_post); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(5, 0, 25, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_get_node_features_idx, 29, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 29, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":193
 *     )
 * 
 *     keywords_translate_table = str.maketrans("-._,|/[inserted by cython to avoid comment start]*:", "&&&&&&&&")             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_kp_u__24, __pyx_kp_u__26); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "pkuseg/feature_extractor.pyx":196
 * 
 *     @classmethod
 *     def keyword_rename(cls, text):             # <<<<<<<<<<<<<<
 *         return text.translate(cls.keywords_translate_table)
 * 
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_s_cls, __pyx_n_s_text); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_keyword_rename, 196, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 196, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":200
 * 
 *     @classmethod
 *     def _num_letter_normalize_char(cls, character):             # <<<<<<<<<<<<<<
 *         if character in cls.num:
 *             return "**Num"
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_s_cls, __pyx_n_s_character); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_num_letter_normalize_char, 200, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 200, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":208
 * 
 *     @classmethod
 *     def normalize_text(cls, text):             # <<<<<<<<<<<<<<
 *         text = cls.keyword_rename(text)
 *         for character in text:
 */
  __pyx_tuple__32 = PyTuple_Pack(3, __pyx_n_s_cls, __pyx_n_s_text, __pyx_n_s_character); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_normalize_text, 208, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 208, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":217
 * 
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.unigram = set()  # type: Set[str]
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_init, 217, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 217, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":224
 *         self.tag_to_idx = {}  # type: Dict[str, int]
 * 
 *     def build(self, train_file):             # <<<<<<<<<<<<<<
 *         with open(train_file, "r", encoding="utf8") as reader:
 *             lines = reader.readlines()
 */
  __pyx_tuple__36 = PyTuple_Pack(36, __pyx_n_s_self, __pyx_n_s_train_file, __pyx_n_s_reader, __pyx_n_s_lines, __pyx_n_s_examples, __pyx_n_s_word_length_info, __pyx_n_s_specials, __pyx_n_s_line, __pyx_n_s_words, __pyx_n_s_pre, __pyx_n_s_suf, __pyx_n_s_example, __pyx_n_s_max_word_length, __pyx_n_s_length, __pyx_n_s_feature_freq, __pyx_n_s_i, __pyx_n_s__35, __pyx_n_s_node_features, __pyx_n_s_feature_set, __pyx_n_s_tot, __pyx_n_s_feature, __pyx_n_s_B, __pyx_n_s_B_single, __pyx_n_s_I_first, __pyx_n_s_I, __pyx_n_s_I_end, __pyx_n_s_tag_set, __pyx_n_s_word, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_word, __pyx_n_s_character, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_idx, __pyx_n_s_tag); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 36, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_build, 224, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 224, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":312
 * 
 * 
 *     def get_node_features_idx(self, idx, nodes):             # <<<<<<<<<<<<<<
 *         return __get_node_features_idx(config, idx, nodes, self.feature_to_idx, self.unigram)
 * 
 */
  __pyx_tuple__38 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_idx, __pyx_n_s_nodes); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_get_node_features_idx_2, 312, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 312, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":316
 * 
 * 
 *     def get_node_features(self, idx, wordary):             # <<<<<<<<<<<<<<
 *         cdef int length = len(wordary)
 *         w = wordary[idx]
 */
  __pyx_tuple__40 = PyTuple_Pack(16, __pyx_n_s_self, __pyx_n_s_idx, __pyx_n_s_wordary, __pyx_n_s_length, __pyx_n_s_w, __pyx_n_s_flist, __pyx_n_s_tmplst, __pyx_n_s_l, __pyx_n_s_tmp, __pyx_n_s_prelst_in, __pyx_n_s_postlst_in, __pyx_n_s_prelst_ex, __pyx_n_s_postlst_ex, __pyx_n_s_pre, __pyx_n_s_post, __pyx_n_s_bigram); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_get_node_features, 316, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 316, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":449
 *         return flist
 * 
 *     def convert_feature_file_to_idx_file(             # <<<<<<<<<<<<<<
 *         self, feature_file, feature_idx_file, tag_idx_file
 *     ):
 */
  __pyx_tuple__42 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_feature_file, __pyx_n_s_feature_idx_file, __pyx_n_s_tag_idx_file, __pyx_n_s_reader, __pyx_n_s_lines, __pyx_n_s_f_writer, __pyx_n_s_t_writer, __pyx_n_s_tags_idx, __pyx_n_s_features_idx, __pyx_n_s_line, __pyx_n_s_feature_idx, __pyx_n_s_splits, __pyx_n_s_feat_2); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(4, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_convert_feature_file_to_idx_file, 449, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 449, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":493
 *                 tags_idx.append(self.tag_to_idx[splits[-1]])
 * 
 *     def convert_text_file_to_feature_file(             # <<<<<<<<<<<<<<
 *         self, text_file, conll_file=None, feature_file=None
 *     ):
 */
  __pyx_tuple__44 = PyTuple_Pack(24, __pyx_n_s_self, __pyx_n_s_text_file, __pyx_n_s_conll_file, __pyx_n_s_feature_file, __pyx_n_s_B, __pyx_n_s_B_single, __pyx_n_s_I_first, __pyx_n_s_I, __pyx_n_s_I_end, __pyx_n_s_conll_line_format, __pyx_n_s_reader, __pyx_n_s_c_writer, __pyx_n_s_f_writer, __pyx_n_s_line, __pyx_n_s_words, __pyx_n_s_example, __pyx_n_s_tags, __pyx_n_s_word, __pyx_n_s_word_length, __pyx_n_s_idx, __pyx_n_s_character, __pyx_n_s_tag, __pyx_n_s_features, __pyx_n_s_feature); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(4, 0, 24, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_convert_text_file_to_feature_fil, 493, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 493, __pyx_L1_error)
  __pyx_tuple__46 = PyTuple_Pack(2, ((PyObject *)Py_None), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "pkuseg/feature_extractor.pyx":568
 *                 f_writer.write("\n")
 * 
 *     def save(self, model_dir=None):             # <<<<<<<<<<<<<<
 *         if model_dir is None:
 *             model_dir = config.modelDir
 */
  __pyx_tuple__47 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_model_dir, __pyx_n_s_data, __pyx_n_s_writer); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_save, 568, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 568, __pyx_L1_error)
  __pyx_tuple__49 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "pkuseg/feature_extractor.pyx":587
 * 
 *     @classmethod
 *     def load(cls, model_dir=None):             # <<<<<<<<<<<<<<
 *         if model_dir is None:
 *             model_dir = config.modelDir
 */
  __pyx_tuple__50 = PyTuple_Pack(15, __pyx_n_s_cls, __pyx_n_s_model_dir, __pyx_n_s_extractor, __pyx_n_s_feature_path, __pyx_n_s_reader, __pyx_n_s_data, __pyx_n_s_feature_base_name, __pyx_n_s_i, __pyx_n_s_line, __pyx_n_s_feature, __pyx_n_s_index, __pyx_n_s_tag, __pyx_n_s_line, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(2, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pkuseg_feature_extractor_pyx, __pyx_n_s_load, 587, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 587, __pyx_L1_error)
  __pyx_tuple__52 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PySet_Type_update.type = (PyObject*)&PySet_Type;
  __pyx_umethod_PyUnicode_Type_format.type = (PyObject*)&PyUnicode_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text) < 0) __PYX_ERR(0, 208, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text.tp_dictoffset && __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text = &__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct__normalize_text;
  if (PyType_Ready(&__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_1_build) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_1_build.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_1_build.tp_dictoffset && __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_1_build.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_1_build.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_1_build = &__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_1_build;
  if (PyType_Ready(&__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr.tp_dictoffset && __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr = &__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_2_genexpr;
  if (PyType_Ready(&__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 270, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr.tp_dictoffset && __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr = &__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr.tp_dictoffset && __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr = &__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_4_genexpr;
  if (PyType_Ready(&__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_5_load) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_5_load.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_5_load.tp_dictoffset && __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_5_load.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_5_load.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_5_load = &__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_5_load;
  if (PyType_Ready(&__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(0, 637, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr.tp_dictoffset && __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr = &__pyx_type_6pkuseg_17feature_extractor___pyx_scope_struct_6_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initfeature_extractor(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initfeature_extractor(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_feature_extractor(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_feature_extractor(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_feature_extractor(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'feature_extractor' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_feature_extractor(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("feature_extractor", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pkuseg__feature_extractor) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pkuseg.feature_extractor")) {
      if (unlikely(PyDict_SetItemString(modules, "pkuseg.feature_extractor", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pkuseg/feature_extractor.pyx":4
 * # cython: infer_types=True
 * # cython: language_level=3
 * import json             # <<<<<<<<<<<<<<
 * import os
 * import sys
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_json, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_json, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":5
 * # cython: language_level=3
 * import json
 * import os             # <<<<<<<<<<<<<<
 * import sys
 * import pickle
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":6
 * import json
 * import os
 * import sys             # <<<<<<<<<<<<<<
 * import pickle
 * from collections import Counter
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":7
 * import os
 * import sys
 * import pickle             # <<<<<<<<<<<<<<
 * from collections import Counter
 * from itertools import product
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pickle, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pickle, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":8
 * import sys
 * import pickle
 * from collections import Counter             # <<<<<<<<<<<<<<
 * from itertools import product
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Counter);
  __Pyx_GIVEREF(__pyx_n_s_Counter);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Counter);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Counter, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":9
 * import pickle
 * from collections import Counter
 * from itertools import product             # <<<<<<<<<<<<<<
 * 
 * import cython
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_product);
  __Pyx_GIVEREF(__pyx_n_s_product);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_product);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_product); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_product, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":12
 * 
 * import cython
 * from pkuseg.config import config             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_config);
  __Pyx_GIVEREF(__pyx_n_s_config);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_config);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pkuseg_config, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_config); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_config, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":29
 * @cython.wraparound(False)
 * @cython.nonecheck(False)
 * def __get_node_features_idx(object config not None, int idx, list nodes not None, dict feature_to_idx not None, set unigram not None):             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pkuseg_17feature_extractor_3__get_node_features_idx, NULL, __pyx_n_s_pkuseg_feature_extractor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_node_features_idx, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":184
 * 
 * 
 * class FeatureExtractor:             # <<<<<<<<<<<<<<
 * 
 *     keywords = "-._,|/[inserted by cython to avoid comment start]*:"
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_FeatureExtractor, __pyx_n_s_FeatureExtractor, (PyObject *) NULL, __pyx_n_s_pkuseg_feature_extractor, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pkuseg/feature_extractor.pyx":186
 * class FeatureExtractor:
 * 
 *     keywords = "-._,|/[inserted by cython to avoid comment start]*:"             # <<<<<<<<<<<<<<
 * 
 *     num = set("0123456789." "" "")
 */
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_keywords, __pyx_kp_u__24) < 0) __PYX_ERR(0, 186, __pyx_L1_error)

  /* "pkuseg/feature_extractor.pyx":188
 *     keywords = "-._,|/[inserted by cython to avoid comment start]*:"
 * 
 *     num = set("0123456789." "" "")             # <<<<<<<<<<<<<<
 *     letter = set(
 *         "" "" ""
 */
  __pyx_t_1 = PySet_New(__pyx_kp_u_0123456789); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_num, __pyx_t_1) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":189
 * 
 *     num = set("0123456789." "" "")
 *     letter = set(             # <<<<<<<<<<<<<<
 *         "" "" ""
 *     )
 */
  __pyx_t_1 = PySet_New(__pyx_kp_u__25); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_letter, __pyx_t_1) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":193
 *     )
 * 
 *     keywords_translate_table = str.maketrans("-._,|/[inserted by cython to avoid comment start]*:", "&&&&&&&&")             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyUnicode_Type)), __pyx_n_s_maketrans); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_keywords_translate_table, __pyx_t_3) < 0) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pkuseg/feature_extractor.pyx":196
 * 
 *     @classmethod
 *     def keyword_rename(cls, text):             # <<<<<<<<<<<<<<
 *         return text.translate(cls.keywords_translate_table)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_1keyword_rename, __Pyx_CYFUNCTION_CLASSMETHOD, __pyx_n_s_FeatureExtractor_keyword_rename, NULL, __pyx_n_s_pkuseg_feature_extractor, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pkuseg/feature_extractor.pyx":195
 *     keywords_translate_table = str.maketrans("-._,|/[inserted by cython to avoid comment start]*:", "&&&&&&&&")
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def keyword_rename(cls, text):
 *         return text.translate(cls.keywords_translate_table)
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_keyword_rename, __pyx_t_1) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":200
 * 
 *     @classmethod
 *     def _num_letter_normalize_char(cls, character):             # <<<<<<<<<<<<<<
 *         if character in cls.num:
 *             return "**Num"
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_3_num_letter_normalize_char, __Pyx_CYFUNCTION_CLASSMETHOD, __pyx_n_s_FeatureExtractor__num_letter_nor, NULL, __pyx_n_s_pkuseg_feature_extractor, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pkuseg/feature_extractor.pyx":199
 *         return text.translate(cls.keywords_translate_table)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def _num_letter_normalize_char(cls, character):
 *         if character in cls.num:
 */
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_num_letter_normalize_char, __pyx_t_3) < 0) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pkuseg/feature_extractor.pyx":208
 * 
 *     @classmethod
 *     def normalize_text(cls, text):             # <<<<<<<<<<<<<<
 *         text = cls.keyword_rename(text)
 *         for character in text:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_5normalize_text, __Pyx_CYFUNCTION_CLASSMETHOD, __pyx_n_s_FeatureExtractor_normalize_text, NULL, __pyx_n_s_pkuseg_feature_extractor, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pkuseg/feature_extractor.pyx":207
 *         return character
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def normalize_text(cls, text):
 *         text = cls.keyword_rename(text)
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_normalize_text, __pyx_t_1) < 0) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":217
 * 
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.unigram = set()  # type: Set[str]
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_8__init__, 0, __pyx_n_s_FeatureExtractor___init, NULL, __pyx_n_s_pkuseg_feature_extractor, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":224
 *         self.tag_to_idx = {}  # type: Dict[str, int]
 * 
 *     def build(self, train_file):             # <<<<<<<<<<<<<<
 *         with open(train_file, "r", encoding="utf8") as reader:
 *             lines = reader.readlines()
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_10build, 0, __pyx_n_s_FeatureExtractor_build, NULL, __pyx_n_s_pkuseg_feature_extractor, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_build, __pyx_t_1) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":312
 * 
 * 
 *     def get_node_features_idx(self, idx, nodes):             # <<<<<<<<<<<<<<
 *         return __get_node_features_idx(config, idx, nodes, self.feature_to_idx, self.unigram)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_12get_node_features_idx, 0, __pyx_n_s_FeatureExtractor_get_node_featur, NULL, __pyx_n_s_pkuseg_feature_extractor, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_get_node_features_idx_2, __pyx_t_1) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":316
 * 
 * 
 *     def get_node_features(self, idx, wordary):             # <<<<<<<<<<<<<<
 *         cdef int length = len(wordary)
 *         w = wordary[idx]
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_14get_node_features, 0, __pyx_n_s_FeatureExtractor_get_node_featur_2, NULL, __pyx_n_s_pkuseg_feature_extractor, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_get_node_features, __pyx_t_1) < 0) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":449
 *         return flist
 * 
 *     def convert_feature_file_to_idx_file(             # <<<<<<<<<<<<<<
 *         self, feature_file, feature_idx_file, tag_idx_file
 *     ):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_16convert_feature_file_to_idx_file, 0, __pyx_n_s_FeatureExtractor_convert_feature, NULL, __pyx_n_s_pkuseg_feature_extractor, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_convert_feature_file_to_idx_file, __pyx_t_1) < 0) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":493
 *                 tags_idx.append(self.tag_to_idx[splits[-1]])
 * 
 *     def convert_text_file_to_feature_file(             # <<<<<<<<<<<<<<
 *         self, text_file, conll_file=None, feature_file=None
 *     ):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_18convert_text_file_to_feature_file, 0, __pyx_n_s_FeatureExtractor_convert_text_fi, NULL, __pyx_n_s_pkuseg_feature_extractor, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__46);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_convert_text_file_to_feature_fil, __pyx_t_1) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":568
 *                 f_writer.write("\n")
 * 
 *     def save(self, model_dir=None):             # <<<<<<<<<<<<<<
 *         if model_dir is None:
 *             model_dir = config.modelDir
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_20save, 0, __pyx_n_s_FeatureExtractor_save, NULL, __pyx_n_s_pkuseg_feature_extractor, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__49);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_save, __pyx_t_1) < 0) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pkuseg/feature_extractor.pyx":587
 * 
 *     @classmethod
 *     def load(cls, model_dir=None):             # <<<<<<<<<<<<<<
 *         if model_dir is None:
 *             model_dir = config.modelDir
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pkuseg_17feature_extractor_16FeatureExtractor_22load, __Pyx_CYFUNCTION_CLASSMETHOD, __pyx_n_s_FeatureExtractor_load, NULL, __pyx_n_s_pkuseg_feature_extractor, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__52);

  /* "pkuseg/feature_extractor.pyx":586
 *         #     json.dump(data, writer, ensure_ascii=False)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load(cls, model_dir=None):
 *         if model_dir is None:
 */
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_load, __pyx_t_3) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pkuseg/feature_extractor.pyx":184
 * 
 * 
 * class FeatureExtractor:             # <<<<<<<<<<<<<<
 * 
 *     keywords = "-._,|/[inserted by cython to avoid comment start]*:"
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_FeatureExtractor, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FeatureExtractor, __pyx_t_3) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pkuseg/feature_extractor.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # cython: infer_types=True
 * # cython: language_level=3
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pkuseg.feature_extractor", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pkuseg.feature_extractor");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* SliceTupleAndList */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
